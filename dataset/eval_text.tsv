let a, b, c, d, e be integers
read a
read b
read c
read d
read e
if (a + b + c + d + e) modulo 5 is not 0 or (a + b + c + d + e) / 5 is 0
print -1
else do the following
print (a + b + c + d + e)/5
declare integer variable sum = 0 and an array of integers arr with size 5
for i = 0 to 5 exclusive
read arr[i]
increase sum by arr[i]
float ans = sum / 5
if sum = 0
print -1
else if ans = int(ans)
print int(ans)
else
print -1
cmp is a boolean function with integer arguments a and b
return a < b
declare integer variable sum = 0
create integer n
for integer i = 0 to 5 exclusive
read n
increase sum by n
if sum = 0
print -1
if sum % 5 = 0
print sum / 5
else
print -1
x, i = int
sum = int with sum = 0
for i = 0 to 5
read x
add x to sum
if sum is not a multiple of or if sum equals 0
print "-1"
else
print sum / 5
create int sum and a, set sum to 0
for i=0 to 5 exclusive
read a
set sum to sum + a
if sum equal to 0
print -1
else if sum mod 5 =0
print sum/5 and a newline
otherwise
print -1
create int a and i
set sum to 0
for i=0 to 5 exclusive
read a
sum= sum+a
if sum mod 5 is different from 0 or sum=0
print -1
else
print sum/5 and a newline
create int array a of length 1005
ans = 0
for i=0 to 5 exclusive
read a[i]
ans=ans + a[i]
if ans equal to 0
print -1
else if ans mod 5 =0
print ans/5 and a newline
else
print -1
declare integers sum, c1, c2, c3, c4 and c5
read c1, c2, c3, c4 and c5
sum = c1 + c2 + c3 + c4 + c5
if sum != 0 && sum % 5 = 0
print sum / 5
else
print "-1"
a, b, c, d, e = int
loop while reading a then b then c then d then e
ans = int with ans = 0
set ans to a + b + c + d + e
if ans is a multiple of 5 and not 0
print ans / 5
else
print -1
create integers a, b, c, d, e and sum
read a, b, c, d and e
set sum to a + b + c + d + e
if sum > 0 && sum % 5 = 0
print sum / 5
else
print "-1"
create int x and sum, sum=0
for i=0 to 5 exclusive
read x
sum= sum + x
if sum mod 5 is different from 0 or sum = 0
print -1
else
print sum/5 and a newline
declare integer sum = 0 and an array of integers a with size 5
for integer i = 0 to 5 exclusive
read a[i]
increase sum by a[i]
if sum modulo 5 = 0 && sum is not 0
print sum / 5
else
print -1
create int a, n and total with n=5 and total=0
while decrement n
read a
set total to total + a
if total =0
print -1
else if total mod 5 =0
print total/5
otherwise
print -1
print a newline
declare integer variables c1, c2, c3, c4 and c5
read c1, c2, c3, c4 and c5
create integer m = c1 + c2 + c3 + c4 + c5
if m modulo 5 is 0 and m is not 0
print m / 5
else
print -1
create long long array arr with 1000000 elements
create set of long longs s
mm = map from string to string
declare string array ss with size 100000
declare chara array ch with size 100000
create integers a and res where res = 0
for integer i = 0 to 5 exclusive
read a
increase res by a
if res = 0 || res % 5 != 0
print -1
print res / 5
declare integer variables a and sum
for integer i = 0 to 5 exclusive
read a
increase sum by a
if sum = 0
print -1
if sum % 5 = 0
print sum / 5
print -1
create integers a, b, c, d and e
read a, b, c, d and e
declare integer s = sum of a, b, c, d and e
if s modulo 5 is not 0 or s is 0
print "-1"
else
print s / 5
let s, c be integers with s equal to 0
for i = 0 to 5 exclusive
read c
increase s by c
if s is not a multiple of 5 or not s do the following
print -1
else do the following
print s/5
set int s to 0, c
for i = 0 to less than 5 do the following
read c
s equals s plus c
if s modulo 5 or not s is true
output -1
else
output s / 5
MOD = constant integer with value of 1e9 + 7
in function pow that returns a long long and takes arguments a, b = long long
ans = long long with value of 1
while b is not 0
if b bitwise and 1 is true then set ans to (ans * a) mod MOD
set b to b/2
set a to (a*a) mod MOD
return ans
c1, c2, c3, c4, c5 = integers
read c1, c2, c3, c4 and c5
s = integer with value of c1+c2+c3+c4+c5
if s equals 0
print -1
else
if s mod 5 equals 0
print s/5
else
print -1
x, r = integer with r = 0
for i = 0 to 4
read x
r = r + x
if (r modulo 5 is 0 and r > 0), print r / 5 else print -1
integers = a,b,c,d,e
read a,b,c,d,e
set int sum to a + b + c + d + e
if sum is 0 then do the following
output -1
else if sum modulo 5 is 0 then
output sum / 5
else
output -1
a, b, c, d, e =integers
Read a
Read b
Read c
Read d
Read e
if (a + b + c + d + e) modulo 5 is not 0 OR (a + b + c + d + e) / 5 is 0
print -1 and a new line
else do the following
print (a + b + c + d + e) / 5 and a new line
set const int N to 1e6 + 5
set int s to 0
for i = 0 to i is less than 5 do the following
integers = x
read x
s equals s plus x
if s is 0 or (s modulo 5) is not 0, then do the following
output -1
else
output s / 5
c1, c2, c3, c4, c5 = int
loop while reading c1 then c2 then c3 then c4 then c5
s = int with s = 0
set s to c1 + c2 + c3 + c4 + c5
if s equals 0
print "-1"
else
if s is a multiple of 5
print s / 5
else
print "-1"
set int a[6], i, j, sum to 0
for = 0 to less than 5 do the following
read a[i]
set sum to sum + a[i]
set int res to sum / 5
if sum = 0 or sum modulo 5 is not equal to 0 then do
output -1
else if sum modulo 5 equals 0
output res
create integer array c with size 10
create integers b, sum, i with b = 0, sum = 0, i = 0
for i = 0 to 5 exclusive
read c[i]
set sum to sum + c[i]
if sum is 0
print "-1" print newline
else if sum % 5 is 0
print sum / 5 print newline
else
print "-1" print newline
num = integer array of size 5, sum = integer with sum = 0
for i = 0 to 4
read num[i]
sum = sum + num[i]
if sum modulo 5 is 0 and sum is not 0
print sum / 5
else
print -1
create integers a, b, c, d, e
read a
read b
read c
read d
read e
if (a + b + c + d + e) % 5 is not 0 or (a + b + c + d + e) / 5 is 0
print -1 print newline
else
print (a + b + c + d + e) / 5 print newline
declare function fastIo with return type void
call function fastIo
create integer sum = 0
for i=0 to 5 exclusive
let temp be int
read temp
add temp to sum
if (sum mod 5 equals 0) and sum is greater or equal to 5
print sum divided by 5
else
print "-1"
declare integers n, m
declare integer count = 0
read n and m
for a = 0, increment a
if a * a is greater than n, end loop
for b = 0, incrementing b
if a + b * b is greater than m, end loop
if a * a + b is n and a + b * b is m, increment count
print count and '\n'
declare long long int variables n and m
read standard input to n and m
create long long integer c = 0
for i = 0 to 1000 inclusive
in a for loop, change j from 0 to 1000 inclusive
if i * i + j = n and i + j * j is equal to m, add 1 to the variable c
print c and "\n" to the standard output
n, m = integers
pair1, pair2 = integers with both having value of 0
min, max = integers
count = integer with value of 0
read n and m
if n is greater than m
set max to n
set min to m
else
set max to m
set min to n
for i = 0 to max inclusive
for j = max to 0 inclusive decreasing
if (i*i) + j equals n and i + (j * j) equals m then add 1 to count
print count
declare new int variables n and m
read n and m from the user input
create new integer called cnt with value 0
for i from 0 to n inclusive incrementing i
new integer variable k = n - i * i
increment cnt by one if k squared + i = m
print cnt and '\n'
let l, n, i, j, m, and cnt be ints with cnt=0
read n and m
for i=0 to 1000 inclusive
for j=0 to 1000 inclusive
if i*i+j is n and i+j*j is m then increment cnt
print cnt
create ints n and m
read n and m
let p = 0 be an integer
for a = 0 to a = 1000 exclusive
for b = 0 to b = 1000 exclusive
if a * a + b equals n and a + b * b equals m then increment p
print p
declare integers n, m, i, x, a, b, c = 0
read n, m
let x be square root of n
for i = 0 to x inclusive
let b be n - i * i
let a be m - b * b
if a is i, increment c
print c and newline
new integer constant M = 100000 + 5
declare new integers n and m
read from the input to n and m
create variable ans = 0 with type int
for integer a = 0 to 1000 inclusive
for integer b = 0 to 1000 inclusive incrementing b
if a * a + b = n and a + b * b is equal to m, increment ans
print ans
a, b, count, i, c and y are integers with count = 0
read user input to a and b
assign the square root of a to c
start for loop from i = 0 to c inclusive
change the value of y to a - (i * i)
if i + y squared is equal to b, increment count
print count
a = two dimensional int array of sizes 1001 and 1001
n, m, i, j, cnt = int with cnt = 0
read n then m
for i = 0 to n inclusive
for j = 0 to m inclusive
if i * i + j is n and i + j * j is m set a[i][j] to 1
for i = 0 to 1001
for j = 0 to 1001
if a[i][j] increment cnt
print cnt
n, m = integers
ans = integer with ans = 0
read n, m
for i = 0 to 1000
for j = 0 to 1000
if (((i * i) + j) is n and (i + (j * j)) is m), increment ans
print ans
TESTS=1
while decremented TESTS is not 0
count=0, n,m,i,j=int
read n,m
for i=0 to sqrt(n) inclusive
for j=0 to sqrt(m) inclusive
if i*i+j is n and i+j*j is m increment count
print count
N, M = integers
read N, M
ans = integer with ans = 0
for i = 0 to 1000
for j = 0 to 1000
if ((i * i + j is N) and (j * j + i is M)), increment ans
print ans
n,m,i,b=int, sum=0
read n,m
for i=0 to sqrt(n) inclusive while i<=m
b=n-i*i
if i+b*b is m increment sum
print sum
n,m=long long int
read n,m
cp=n
sq=long long int
count=0
while n is not -1
sq=int(sqrt(n))
if sq*sq is n
a=sq
b=cp-n
if a+b*b is m increment count
decrement n
print count
n,m,i,a,b=int, cnt=0
read n,m
i=0
while i<=sqrt(n)
a=i
b=n-(a*a)
if b>=0
if a+b*b is m increment cnt
increment i
print cnt
maxn = const integer with maxn = 105
n, m = integers
a, b = integers
ans = integer with ans = 0
read n, m
for i = 0 to 1000
for j = 0 to 1000
if (i * i + j is n and i + j * j is m), increment ans
print ans
n, m = int
read n and m
c = 0 = int
for a = 0 to 1000 inclusive
for b = 0 to 1000 inclusive
if a^2 _ b = n and b^2 + a = m then increment c
print c
declare min taking in ints a and b and returning integer
return a if a is less than b or b if not
create ints m and n
read m and n
create integer c = min(m, n)
make int counter = 0
for i = 0 to c
for j = 0 to c
if i * i + j is equal to m and i + j * j is equal to n, increment counter
print counter
a is a new 2d array of integers with size 1001 by 1001
n, m, i, j and cnt are ints with cnt = 0
read input to n and m
in a for loop, change i from 0 to n inclusive incrementing i
for j = 0 to m inclusive
set a[i][j] to 1 if i * i + j is equal to n and i + j * j is equal to m
for i = 0 to 1001 exclusive
start for loop from j = 0 to 1001 exclusive
if a[i][j] != 0, increment cnt
print cnt
create integers n and m
read n and m
let cnt = 0 be an integer
for i = 0 while i is less than or equal to n and less than or equal to m
let b = n - i * i
if b is positive or 0 and i + b * b is equal to m then increment cnt
print cnt
create integers n and m
read variables n and m from the input
declare new integer variable c = 0
in a for loop, change i from 0 to 1000 inclusive
start for loop from j = 0 to 1000 inclusive incrementing j
p is a new integer variable with value i squared + j
new integer q with value i + j squared
if p is equal to n and q is equal to m, increment c
print c
declare integers n, m
read n and m
declare integer res = 0
for i = 0 to 100 exclusive
for j = 0 to 100 exclusive
if ( i * i + j is n and i + j * j is m, increment res
print res and newline
i, s, j, k, l, n, m =integers with s = 0, j = 0, k = 0
Read m, n
for i = 0 to m exclusive
for j = 0 to n exclusive
set k to i * i + j
set l to i + j * j
if k is n and l is m, then increment s
print s and a new line
n, m = integers
read n, m
solu = integer with solu = 0
for i = 0 to 1000
for j = 0 to 1000
if (pow(i, 2) + j is n and i + pow(j, 2) is m), increment solu
print solu
create int n and m
read n and m
counter =0
for a=0 to m inclusive
for b=0 to n inclusive
if a * a + b = n and a + b * b = m, increment counter
print counter
create int n and m
read n and m
inte_pair = 0
for i=0 to n inclusive and m inclusive
for j=0 to n and m inclusive
if (i * i) + j = n and i + (j * j) = m, increment inte_pair
print inte_pair
n, k, i, m, j = int with k = 0
read n then m
iterate i while i * i <= n
iterate j while j * j <= m
if i * i + j is n and j * j + i is m increment k
print k
double integers = EPS = 1e-9
INFF set to 1000000000000000005LL = long long integer
integers = n,m
read n,m
integer c = 0
for a = 0 to less than or equal to sqrt(n) do the following
for b = 0 to less than or equal to sqrt(m) do the following
if a squared+ b is n and a + b squared is m then add one to c
output c
let n, m be integers
while read n, m
let ans be a integer with ans = 0
for a = 0 to 1000 inclusive
for b = 0 to 1000 inclusive
if a * a + b is equal to n and b * b + a is equal to m , increment ans by 1
print ans and newline
let m, n, a, b be integers
let fit be a integer function
let f1 , f2 be integers with f1 = a * a + b, f2 = a + b * b
if f1 is equal to n and f2 is equal to m
else if f1 is greater than n
return 1
else if f2 is greater than m
return 1
return -1
read n, m
let cnt be a integer with cnt = 0
for a = 0 to 31 inclusive
for b = 0 to 31 inclusive
if fit() is equal to 0
increment cnt by 1
else if fit() is equal to 1
stop
print cnt and newline
define new integer n
read n from the user input
change n to n - 10
if n is equal to 10, return cout << 15 << endl, 0
if 1 <= n <= 11, return cout << 4 << endl, 0
print 0
integer as n
read n
if n is less than or equal to 10 then do the following
output 0
else
if n >= 11 and n is less than or equal to 19 then do the following
output 4
else if n is 20 then do the following
output 15
else if n is 21 then do the following
output 4
else if n is greater than 21 then do the following
output 0
let n be a integer
read n
if n <= 10 or n is greater than 21
print 0 and newline
else if n equals 20
print 15 and newline
else do the following
print 4 and newline
declare integer n
read n
if n is less than or equal to 10 or n is greater than or equal to 22
print '0', newline
else if n is 20
print "15", newline
else
print '4', newline
declare integer a
read a
let a be a - 10
if a is 10
print ( 4 * 3 ) + 3, newline
else if a is greater than 0 and a is less than 12
print 4, newline
else
print 0, newline
n is an integer
read n
if n is less than 11
print 0 and endline
else if n equals 11 or 21
print 4 and endline
else if n is between 12 and 19 inclusive
print 4 and endline
else if n equals 20
print 15 and endline
else
print 0 and endline
create integer N
read N
if N is greater than 21
print '0'
if n is equal to 21
print '4'
if n - 10 is equal to 10
print "15"
if N is less than 20 and N is greater than 10
print "4"
else do
show "0"
n, cards =integers with cards = 0
Read n
set n to n - 10
if n is greater than or equal to 1 and n is less than 10
set cards to 4
else if n is equal to 10
set cards to 15
else if n is equal to 11
set cards to 4
else do the following
set cards to 0
print cards and a new line
create int n, i, n1
read n
i=10
if n <=10
set n1 to 0
else
if n<= 19
assign 4 to n1
else if n=20
set n1 to 15
else if n=21
assign 4 to n1
else
set n1=0
print n1
let n be a integer
while read n
if n is less than or equal to 10 or greater than or equal to 22,
print 0 and newline
else if n equals 20
print 15 and newline
else
print 4 and newline
create new integer n
read variable n from the input
if n <= 10 or n > 21
print 0
else if n is equal to 20
print 15 to the standard output
else
print 4
let n be a integer
read n
if n <= 10 or n >= 22 , print 0 and newline
if n >= 11 and n <= 19 , print 4 and newline
if n equals 20 , print 15 and newline
if n equals 21 , print 4 and newline
create integer variable with name n
read user input to n
if n <= 10 or n > 21
print 0
else if n - 10 is less than 10
print 4
else if n - 10 is equal to 10
print 15
else
print 4 to the standard output
integer as a
read a
if a - 10 is less than or equal to 0 or a - 10 > 11 then do the following
output 0
else if a-10 is greater than 1 or a-10 is less than or equal to 9 then do the following
output 4
else
output 15
declare new integer variables n and m
loop, reading n from the input
change m to n - 10
if m > 0 and m < 10
print '4'
else if m = 0
print '0'
else if m is equal to 10
print "15"
else if m = 11
print '4'
else
print '0'
n = int
read n
if n <= 10
print 0
else if n < 20
print 4
else if n is 20
print 15
else if n is 21
print 4
else
print 0
create new vector of long longs v
define new integer called n
read standard input to n
if n <= 10 or n > 21
print 0
decrease n by 10
if n = 10
print 15 to the output
else
print 4
n = int
read n
if n <= 10
print 0
else
if n is between 11 and 19 both inclusive
print 4
else
if n = 20
print 15
else if n = 21
print 4
else
print 0
integer as n
while reading input n
if n is less than 10 or n > 21 then do the following
output 0
else if n is 20 then do the following
output 15
else if n is 10 then do the following
output 0
else
output 4
let n be a integer
read n
decrement n by 10
if n <= 0
print 0 and newline
else if n <= 9
print 4 and newline
else if n equals 10
print 15 and newline
else if n equals 11
print 4 and newline
else do the following
print 0 and newline
integer as n
read n
if n is less than or equal to 10 or n > 21 then do the following
output 0
else if n is 20 then do the following
output 15
else
output 4
n = int
read n
if n <= 10
print 0
else if n = 11
print 4
else if n >= 12 AND n <= 19
print 4
else if n = 20
print 15
else if n = 21
print 4
else if n >= 22
print 0
n = int
read n
if n <= 10 or n > 21
print 0
else if n is 20
print 15
else
print 4
n =integer
while reading values n
if n is less than 20 and n is greater than 10 OR n is equal to 21
print 4 and a new line
else if n is less than or equal to 10 OR n is greater than 21
print 0 and a new line
else do the following
print 15 and a new line
n =integer
Read n
if n is less than 11
print 0 and a new line
else if n is less than 20
print 15 and a new line
else if n is less than 21
print 0 and a new line
else do the following
print 4 and a new line
n is a new integer variable
read n from the user input
declare new integer required with value n-10
if required <= 0
print "0" to the standard output
else if required >= 1 and required <= 9
print "4" to the output
else if required = 10
print "15" to the stdou
else if required = 11
print "4"
else if required >= 12
print "0"
create integer n
read n and while it's truthy, print (n > 10 && n < 22) * 4 + (n == 20) * 11
n is an integer
read n
if n is less than or equals 10
print 0 and endline
else if n is between 11 and 19 exclusive
print 4 and endline
else if n equals 20
print 15 and endline
else if n equals 21
print 4 and endline
else
print 0 and endline
make int n
read n
if n is less than or equal to 10 or n - 10 is greater than or equal to 12
display "0"
if n - 10 is equal to 1 or n - 10 is equal to 11
show 4
else if n - 10 is 10
display 15
else
show 4
n, i, j, temp, result and imin are integers with imin = 10000000
create new vector of integers a
read n from the input
add 1 as a new element to a
in a for loop, change i from 1 to n inclusive
read variable temp from the input
push temp into a
in a for loop, change i from 1 to n inclusive
assign 0 to result
for j from 1 to n inclusive, increase result by 2 * a[j] * (abs(i - j) + abs(j - 1) + abs(i - 1))
change the value of imin to min of imin and result
print imin
create new integer variable n
read n and keep looping
create new array of integers a with 105 elements
start for loop from i = 1 to n inclusive, read standard input to a[i] on each loop
Min is a new integer variable = 0x3f3f3f3f
loop through i from i to n inclusive
ans is a new integer = 0
change j in a loop from 1 to n inclusive
if j is greater than i
increase ans by (j - 1) * 4 * a[j]
else
change ans to ans + (i - 1) * 4 * a[j]
change Min to min of Min and ans
print Min
n = int
read n
a = int array of size n
read n values into a
mini = int with mini = 100000000
for i = 0 to n
temp = int with temp = 0
for j = 0 to n increment temp by (absolute of (i - j) + j + i) * a[j] * 2
set mini to min of mini, temp
print mini
n = integer
arr = integer array of size 10010
ans = integer with ans = 1000000000
read n
for i = 1 to n, read arr[i]
for i = 1 to n
x = intege with x = i
cost = integer with cost = 0
for j = 1 to n
cost = cost + abs(x - j) * arr[j]
cost = cost + ((j - 1) * arr[j])
cost = cost + (x - 1) * arr[j]
cost = cost + (x - 1) * arr[j]
cost = cost + ((j - 1) * arr[j])
cost = cost + abs(x - j) * arr[j]
if (cost < ans), ans = cost
print ans
declare gcd with long long integers a, b as arguments, returning long long integer
if a is 0, return b
return result of run gcd with b % a, a as arguments from function
declare factorial with unsigned long long integer n as argument, returning unsigned long long integer
if n is 0, return 1
return n * result of run factorial(n-1)
declare long long integer array nCr size 1001 by 1001
declare combi with no arguments, returning void
for i = 1 to 1000 inclusive
let nCr[0][i] be 0
let nCr[i][0] be 1
for i = 1 to 1000 inclusive
for j = 1 to 1000 inclusive
if i is less than j
end loop iteration
else if i is j
let nCr[i][j] be 1
else
let nCr[i][j] be nCr[i - 1][j] + nCr[i - 1][j - 1]
declare long long integer n
read n
declare long long integer array arr size n
for i = 0 to n exclusive, read arr[i]
declare long long integer min = LONG_MAX
for i = 0 to n exclusive
declare long long integer cost = 0
for j = 0 to n exclusive, increment cost by arr[j] * ( absolute value of ( i - j ) + j + i + i + j + absolute value of ( j - 1 ) )
if cost is less than min, let min be cost
print min and newline
s, n and m are ints with s = 0
read input to n
in a for loop, change i from 0 to n exclusive incrementing i
read variable m from the input
assign the new value = s + i * 4 * m to s
print s
function init
a = integer array of size 1000
n = integer
read n
for i = 1 to n, read a[i]
sum = long long with sum = 0
for i = 1 to n, sum = sum + 4 * (i - 1) * a[i]
print sum
create long long ints i, j and t
n is a new long long
read input to n
a is a new array of long long integers with size n
in a for loop, change i from 0 to n exclusive, read user input to a[i] on each loop
x is a new array of long long integers with size n filled with 0
in a for loop, change i from 0 to n exclusive
start for loop from j = 0 to n exclusive, changing x[i] to x[i] + a[j] * ((abs(i - j) + abs(j) + abs(i) + abs(i) + abs(j) + abs(j - i))) on each loop
sort x from index 0 to n
print x[0]
declare integer variables n and ans
a is a new array of integers with 10010 elements
read variable n from the input
in a for loop, change i from 1 to n inclusive
read a[i] from the user input
increase ans by a[i] * (i - 1) * 4
print ans
pi is a new constant integer = acos of -1
declare integer variable n
read from the input to n
declare new integers ele, flag = 0 and k = 1; create an integer array a with 200 elements
for i from 1 to n inclusive, read a[i] from the input
for integer i = 1 to n inclusive, add (4 * i - 4) * a[i] to ele
print ele to the standard output
create const long long int M = 998244353
make constant long long oo = 1e13
create int array a of size 1010
make int n
read n
for i = 1 to n, read a[i]
make int ans = 1e9
for x = 1 to n
let int sum = 0
for j = 1 to n, add ((abs(j - x) + j - 1 + x - 1) * 2) * a[j] to sum
set ans to min of ans and sum
print ans
create ints n and max1 and int array a of size 1000
read n
for i = 1 to n, read a[i]
for i = 1 to n
make integer sum = 0
for j = 1 to n, add (fabs(i * 1.0 - j * 1.0) + j - 1 + i - 1) * 2 * a[j] to sum
if i is equal to 1
set max1 to sum
else do
set max1 to min of max1 and sum
print max1
declare integer variable n
read input to n
declare integer variable with name value
create integer ans = 0
repeat the loop n times, incrementing i by 1, starting from 0
read value
add i * 4 * value to ans
print ans
n, i, j, m, t, x, y = integers
a = integer array of size 110
read n
for i = 0 to n exclusive, read a[i]
m = -1
for i = 1 to n
x = 0
for j = 0 to n exclusive
y = i - (j + 1)
if (y < 0), y = -y
y = y + j + i - 1
x = x + y * a[j] * 2
if (x < m or m is -1), m = x
print m
let N, A, sum ints
read N
for i from 0 to N exclusive
read A
add 4 * A * i to sum
print sum
make ints n, sum = 0, i, m, and j
read n
create int pointer p = new int[n]
for i = 0 to n exclusive, read p[i]
create integer pointer h = new int[n]
for i = 0 to n exclusive
for j = i + 1 to n exclusive, set sum to sum + 4 * j * p[j]
for m = i - 1 to 0 exclusive by decreasing by 1, set sum to sum + 4 * i * p[m] * 4
set sum to i * 4 * p[i] + sum
set h[i] to sum
set sum to 0
for i = 1 to n exclusive
if h[0] is greater than h[i]
create integer t
set t to h[0]
set h[0] to h[i]
set h[i] to t
display h[0]
declare constant integer M = 105
declare integer array a size M
declare integer n
read n
declare integer Min = 0x3f3f3f3f
for i = 1 to n inclusive, read a[i]
for i = 1 to n inclusive
declare integer sum = 0
for j = 1 to n inclusive, increment sum by ( absolute value of ( i - j ) - 2 + j + i ) * a[j] * 2
let min be minimum of sum and Min
print Min and newline
maxn = 1e4 + 5 = int const
let num be an int array of size maxn with num[0] = 0
let n, ans be ints with ans = 10000000
read n
read the first n+1 elements of num
for i = 1 to n inclusive
cnt = 0 = int
for j = 1 to n inclusve, increment cnt by 2 * num[j] * (abs of(i - j) + abs of (j - 1) + abs of (1 - i)
set ans to the min of cnt and ans
print ans
n = int
while reading n
a = int array of length 105
read a from 1 to n inclusive
Min = 0x3f3f3f3f = int
for i = 1 to n inclusive
ans = 0 = int
for j =1 to n inclusive
if j > i
increment ans by (j - 1) * 4 * a at j
else
increment ans by (i - 1) * 4 * a at j
set Min to the minimum between Min and ans
print Min
declare init
create integer a of size 1000
make integer n
read n
for i = 1 to n, read a[i]
create long long sum = 0
for i = 1 to n, add 4 * (i - 1) * a[i] to sum
print sum
declare new constant integer maxn with value 1e5 + 5
num is a new array of integers with size maxn
let n and ans be ints with ans = 1000000000
read standard input to n
read n elements from the input to array num
for integer i = 1 to n inclusive incrementing i
declare integer cnt with value 0
in a for loop, change j from 1 to n inclusive, increasing cnt by 2 * num[j] * (abs(i - j) + abs(j - 1) + abs(1 - i)) on each loop
change the value of ans to min of cnt and ans
print ans
n = int
read n
a = int array of size n
read n values into a
ans = int with ans = 2e6
for i = 0 to n
cur = int with cur = 0
for j = 0 to n
d1 = int with d1 = i - j
if d1 < 0 set d1 to -d1
increment cur by 2 * (d1 + i + j) * a[j]
if cur < ans set ans to cur
print ans
n, i, sum, minm, x = long long int
minm = 100000000
read n
a = int array of size n + 1
for i = 1 to n inclusive read a[i]
for x = 1 to n inclusive
set sum to 0
for i = 1 to n inclusive set sum to sum + (absolute of (i - x) + i - 1 + (x - 1)) * a[i] * 2
if sum < minm set minm to sum
print minm
let n be a integer
read n
let ans be a integer with ans = (int)10e9
arr = array of integers of length n
for i = 0 to n exclusive
let a be a integer
read a
arr[i] is equal to a
let x be a integer with x = 1
while x <= n
let cost be a integer with cost = 0
for i = 0 to n exclusive
let l be a integer with l = i + 1
cost = cost + absolute value of (x - l) + absolute value of (l - 1) + absolute value of (x - 1)) * 2 * arr[i]
ans = minimum of ans, cost
increment x by 1
print ans and newline
maxn = const integer with maxn = 200005
maxm = const integer with maxm = maxn * 2
inf = const integer with inf = 0x3f3f3f3f
mod = const long long with mod = 998244353
function init
n = integer
a = long long array of size 105
call init
read n
ans = long long with ans = 1e18
for i = 1 to n, read a[i]
for i = 1 to n
tmp = long long with tmp = 0
for j = 1 to n, tmp = tmp + a[j] * 4 * ((i - 1) * 2 + (j - 1))
ans = min of ans and tmp
print ans
declare string s
read s
let s be '#' + s
declare integer n = length of s - 1
declare integer cnt = 0
for i = 1 to i + i is less than or equal to n, incrementing i
if s[i] is not s[n-i+1], increment cnt
if ( cnt is less than or equal to 1 and ( n bitwise and 1 ) ) or cnt is 1
print "YES"
else
print "NO"
create string x
read x
c=0
for i=0 to length of x - exclusive and for j= length of x-1 exclusive
if x[i] different from x[j], increment c
if c=2 or c=0 and length of x is odd
print YES
else
print NO
s=string
while read s
c=0
n=s
for i=0 to length of s/2 exclusive
reverse s
if s[i] is not s[length of s-i-1] increment c
if length of s is even and c is 1
print YES
else if length of s is odd and c <= 1
print YES
else
print NO
create constant int MOD = 998244353
make const int MAX = 200001
create int array An of size MAX
make integer array book of size MAX
let string str
read str
create int sum = 0
make integer n = str.length()
for i = 0 to n / 2 exclusive
if str[i] is not equal to str[n - 1 - i], increment sum
if sum is 1
print "YES"
otherwise
if sum is 0 and n % 2
display "YES"
otherwise do
show "NO"
declare new string variables s and t
read s from the input
assign s to t
reverse s
create integer d = 0
for integer i = 0 to length of s / 2 exclusive incrementing i
increment d if s[i] != t[i]
print "YES" if d = 0 or 2 and s is odd, otherwise print "NO"
declare string str
read str
declare integer diff = 0
for i = 0 to size of str exclusive, increment diff by ( str[i] is not str[size of str - 1 - i] )
if diff is 2 or diff is 0 and size of str % 2 is 1
print "YES\n"
else
print "NO\n"
create string s
read s
set d to 0
for i=0 to size of s exclusive, d= d+s[i] different from s[s.size() - 1 - i]
if d=2 or d=0 and size of s mod 2 =1
print YES
else
print NO
declare string s
declare inline check with string s as argument, returning integer
declare string ss = s
reverse sort from beginning of s to end of s
return s is ss
read s
if result of run check(s) is true
if size of s % 2 is 0
print "NO"
else
print "YES"
declare integer len = size of s
if len % 2 is 0
let len be len / 2 - 1
else
let len be len / 2
for i = 0 to len inclusive
if s[i] is not s[size of s - 1 - i]
let s[i] be s[size of s - 1 - i]
if result of run check(s) is true
print "YES"
else
print "NO"
declare string s
read s
for i = 0 to size of s exclusive
declare character c = s[i]
for j = 0 to 26 exclusive
if 'a' + j is c, end current loop
let s[i] be 'a' + j
declare integer k
for k = 0 to size of k exclusive
if s[k] is not s[size of s - 1 - k ] end current loop
if k is size of s
print "YES" and newline
let s[i] be c
print "NO" and newline
declare ispalindrome taking in string s and returning bool
make string t = s
reverse s
return the result of s == t
make string s
read s
if ispalindrome(s) returns true
if s.size() % 2 is truthy
display "YES"
else do
print "NO"
for i = 0 to s.size() / 2 exclusive
make string t = s
set t[i] to t[t.size() - i - 1]
if ispalindrome(t) is true
show "YES"
display "NO"
A is a new array of long longs with size 26 filled with 0
declare new string s
read s from the user input
declare new long long called n
new long long c = 0
in a for loop, change i from 0 to n / 2 exclusive with step = 1
if s[i] != s[n - 1 - i], increment c
if c is equal to 1
print "YES"
print "\n"
else if c = 0 and n is odd
print "YES" to the standard output
print "\n"
else
print "NO"
print "\n" to the stdout
function ispalindrome with string argument s that returns bool
create string variable t = s
reverse s
return s = t
create new string variable s
read s from the input
if length of s is odd and ispalindrome(s) is true
print "YES" to standard output
if length of s is even and ispalindrome(s) returns true
print "NO"
declare integer err with value 0
for integer i = 0 to length of s / 2 exclusive incrementing i
if s[i] != s[length of s - i - 1], increment err by one
if err is equal to 1
print "YES" to standard output
print "NO" to stdout
s is a new array of characters with 16 elements
declare integer variables i, count and n where count = 0
read s
change the value of n to length of s
start for loop from i = 0 to n / 2 exclusive incrementing i
increment count if s[i] != s[n - 1 - i]
if n is odd
if count <= 1
print "YES"
else
print "NO"
else
if count is equal to 1
print "YES"
else
print "NO"
s is a new string
read standard input to s
create new integers count = 0 and l = length of s - 1
start for loop from i = 0 to length of s / 2 exclusive
if s[i] != s[l - i], increment count
if length of s is even and count is 1
print "YES"
else if length of s is odd and (count is 1 or 0)
print "YES" to the standard output
else
print "NO"
declare string s
declare integer ans = 0
declare integer i = 0
read s
if size of s is 1
print "YES" and newline
for j = size of s - 1 to size of s / 2, decrementing j
if s[i] is not s[j]
for c = 'a' to 'z' inclusive
if c is s[i] or c is s[j]
increment ans
end loop
let i be i + 1
if size of s % 2 is 0
if ans is 0 or ans is greater than 1
print "NO" and newline
if ans is greater than 1
print "NO" and newline
print "YES" and newline
s = string
read s
count = integer = 1, l = integer = size of s - 1
for i = 0 to size of s / 2 exclusive
if s[i] is not s[i - 1], then increase count by 1
if count is 1
print YES
else if size of s is odd and count is 0
print YES
else
print NO
create string s
read s
create int l, i, j and k, set l to size of s exclusive
for i=0 to l exclusive
set c to s[i]
for j=0 to 26 exclusive
if j=c - a, continue
set s[i] to j + a
for k=0 to l exclusive
if s[k] different from s[l - k - 1]
if k >= l
print YES
set s[i] = c
print NO
make constant long long integer INF = 2000000000000000000LL
let const int MOD = 10000007
make int array a of size 1000006
let string r
delcare ispal taking in string s and returning bool
set r to s
reverse contents of r
if s is equal to r
return true
else do
return false
make string s
read s
make ints n = s.size() and cnt = 0
for i = 0 to n / 2 exclusive
make char samne = s[i]
let char pichone = s[n - (i + 1)]
if samne is not pichone, increment cnt
if cnt is equal to 0 and ispal(s) returns truthy and n modulo 2 is 0
print "NO"
print "\n"
end statement
else if cnt is more than 1
print "NO"
print "\n"
end statement
else do
print "YES"
print "\n"
;
declare string s
read s
declare integer y = size of s - 1
declare integer sum = 0
for i = 0 to size of s / 2 exclusive
if s[i] is not s[y], increment sum
if sum is 2
print "NO" and newline
decrement y
if sum is 1
print "YES" and newline
else if sum is 0 and size of s % 2 is not 0
print "YES" and newline
else
print "NO" and newline
make string str
read str
let integer d = 0
for i = 0 to str.size() exclusive, set d to d + str[i] != str[str.size() - 1 - i]
if d is 2 or if d is 0 and size of str % 2 is truthy
print "YES"
else do
print "NO"
create integers y, b, r
read y read b read r
for i = r to 3 inclusive, decrementing i
if b is greater than or equal to ( i - 1 ) and y is greater than or equal to ( i - 2 )
print i + i - 1 + i - 2 print newline
break loop
create integers b,y, r
read r read y read b
create integer array arr with size 3, with arr = {r, y - 1, b - 2}
create integermin with min = 200
for i = 0 to 3 exclusive
if min is greater than or equal to arr[i], set min to arr[i]
print 3 * min + 3 print newline
declare integer variables y, b, r and m
read y, b and r
if b <= r - 1 and y >= b - 1
m = 3 * b
else if b <= r - 1 and y is less than b - 1
m = 3 * (y + 1)
else if b > r - 1 and y >= r - 2
m = 3 * (r - 1)
else if b > r - 1 and y is less than r - 2
m = 3 * (y + 1)
print m
create integers a, b, c, d, e, f, g
read a read b read c
set e to a, set f to b, set g to c
set d to minimum of a and b
set d to minimum of d and c
set d to minimum of d and a
if d is a
set b to a + 1
set c to a + 2
else if d is b
set a to b - 1
set c to b + 1
else if d is c
set a to c - 2
set b to c - 1
while a is greater than e or b is greater than f or c is greater than g
decrement a
decrement b
decrement c
print a + b + c print newline
create integers a,b and c
read a,b and c
create integer a with a=0
subtract 2 from c
decrement b by 1
print (the minimum of a (and the minimum of b and c)) *3+3
create integers y, b, r
read y read b read r
create integers mx with minimum of ( y + 2 and minimum of ( b + 1 and r ) )
print mx * 3 - 3 print "\n"
color = integer array of length 3
for i = 0 to 3 exclusive read color[i]
min, no = integers
if color[0] is less than color[1] - 1
set min to color[0] + 2
set no to 0
else
set min to color[1] + 1
set no to 1
if color[2] is less than min then set no to 2
print color[no] * 3 - (no - 1) * 3
function min with integer arguments x, y and z that returns integer
create integer t = 0
if x is less than y
if x is less than z
set t to 1
else
t = -1
else
if y is less than z
set t to 0
else
t = -1
return t
declare integer variables y, b and r
create integer sum = 0
read y, b and r
if y = b && b = r && r = y, set sum = 3 * (y - 1)
assign min of y, b and r to new integer x
if x = 1
if (b - y) >= 1 && (r - y) >= 2
sum = (y + 1) * 3
else
decrement y while !((b - y) >= 1 && (r - y) >= 2)
sum = (y + 1) * 3
else if x = 0
if b = r
sum = 3 * (b - 1)
else
sum = 3 * b
else
sum = (r - 1) * 3
print sum
create integers a, b, c, s with s = 0
read a read b read c
while 1 is true
if b is greater than or equal to a + 1
if c is greater than or equal to a + 2
set s to a + a + 1 + a + 2
break loop
decrement a
print s print newline
y,b ,r are integers
read y,b,r
If y < 1 or y > 100 or b < 2 or b > 100 or r < 3 or r > 100, return 0
y1,y2,b1,b2,r1,r2 are integers
assign y1 to y+1
assign y2 to y+2
assign b1 to b-1
assign b2 to b+1
assign r1 to r-2
assign r2 to r-1
if y1 <= b and y2 <= r, do the following
print y + y1 + y2 and a new line
else if b1 <= y and b2 <= r,, do the following
print b + b1 + b2 and a new line
else if r1 <= y and r2 <= b,, do the following
print r1 + r2 + r and a new line
y, b, r, ans = integers
read y and b and r
if r - 2 != 0 and r -2 <= y and r-1 <= b
set ans = 3 * r - 3
else if b + 1 <= r and b - 1 != 0 and b - 1 < increment y
set ans = 3 * b
else
set ans = 3 * y + 3
print ans
create integers y, b, r
read y read b read r
while y is greater than r - 2 or y is greater than b - 1, decrement y
while b is greater than y + 1, decrement b
while r is greater than b + 1, decrement r
print y + r + b print '\n'
create integers y, b, r
read y read b read r
print 3 * minimum of ( minimum of ( b + 1 and r ) and y + 2 ) - 3 print newline
let y,b,r be integers
read y,b and r
for (int i is equal to r, i greater than or equal to 3, i--)
if (i less than or equal to r and i - 1 less than or equal to b and i - 2 less than or equal to y)
print 3 * i - 3 and newline
stop
y, b, r =integers
Read y, b, r
for i = y to 1 exclusive
ty = integers and set to i
tb = integers and set to i+1
tc = integers and set to i+2
if tb is less than or equal to b and tc is less than or equal to r
print ty + tb + tc and a new line
create integers y, b, r
read y read b read r
print minimum of ( y and minimum of b - 1 and r - 2 ) * 3 + 3 print newline
a,b,c = int
read a,b,c
d = min(a+1, min(b, c-1))
print 3*d
create 64 bit integers a, b, c
read a read b read c
print 3 * minimum of ( a + 1 and minimum of ( b and c - 1 )) print newline
create integers a, b, c
read a read b read c
if b is greater than or equal to c - 1 and a is greater than or equal to c - 2
print 3 * c - 3 print newline
else if b is less than c - 1 and a is greater than or equal to c - 2
print 3 * b print newline
else if b is greater than or equal to c - 1 and a is less than c - 2
print 3 * a + 3 print newline
else
if a is less than b - 1
print 3 * a + 3 print newline
else
print 3 * b print newline
declare integer variables y, b and r
read y, b and r
for integer i = r to 3 inclusive counting down by 1
if i <= b + 1 and i <= y + 2
let ans be integer = i
print 3 * ans - 3 and a new line
y, b, r = integers
read y and b and r
for i = y to 0 inclusive
if i + 1 <= b and i + 2 <= r
print 3 * i + 3
in function min
if a is less than b return a
return b
create integers a, b and c
read a, b and c
set x to min of a and min of b-1 and c-2
print x+x+1+x+2 and new line
create integers y, r, b, ans
while read y read b read r is true
create integer ans with ans = minimum of ( y + 2 and minimum of ( b + 1 and r ) ) * 3
print ans - 3 print newline
a, b, c = integers
read a, b, c
set ans = 0
set c = c - 2
set b = b - 1
print min between a and (min between b and c) * 3 + 3
Variable M is set to 1000000007
declare three integer variables named y, b, and r
Let the user input values for y, b, and r
decrease the value of b by 1
decrease the value of r by 2
take the minimum number between b and r, then take the minimum number between that and the value of y, then multiply that by 3 and then add 3 and display the output to the screen
y, b, r = integers
read y, b, r
if y >= r set y = r - 2
if r - y = 1 decrement y
if y >= b set y = b - 1
print y + (y + 1) + (y + 2 )
declare solve with no arguments, returning void
create long long t
set t to 1
while decrement t is true, run solve
declare solve with no arguments, returning void
create long longs y, b, r
read y read b read r
create long long tt with tt = minimum of ( y and minimum of ( b - 1 and r - 2 ) )
print tt * 3 + 3 print '\n'
y, b, r = integers
while read y, b, and r
for i=r to greater or equal than 3
if b is greater or equal than i-1 and y is greater or equal than i-2
print i + i - 1 + i - 2 and new line
stop loop
let a, b and c be integers
read a, b and c
increment a
decrement c
print min of (min of a and c) and b * 3, and a new line
create 64 bit integers a, b, c
read a read b read c
print 3 * minimum of a + 1 and minimum of b and c - 1, print newline
create integers y, b, r
read y read b read r
if y is less than 1 or y is greater than 100 or b is less than 2 or b is greater than 100 or r is less than 3 or r is greater than 100, return 0 from function
if y + 1 is less than or equal to b and y + 2 is less than or equal to r
print 3 * y + 3 print newline
else if b - 1 is less than or equal to y and b + 1 is less than or equal to r
print 3 * b print newline
else if r - 2 is less than or equal to y and r - 1 is less than or equal to b
print 3 * r - 3 print newline
create integers x, y, z
get x, y, z
if x+1 is equal to y and y+1 equal to z then
print x+y+z
else do the following
do the following indefinitely till break statement
create integer a with a=z
create integer b with b=z-1
create integer c with c=z-2
if a, b, c less than or equal to z, y, x respectively and c+1 equal to b and b+1 equal to a then
print a+b+c
break out of loop
decrement z
declare integer variables a, b and c
read from the input to a, b and c
declare integer variable ans = 0
decrease c by 2
subtract 1 from b
print (min of a and (min of b and c)) * 3 + 3
t = int
read t
for i = 0 to t
L, v, l ,r = int
read L then v then l then r
print L / v - r / v + (l - 1) / v
t=long long int
read t
while decremented value of t is not zero
n,l,v,r=long long int
read n,v,l,r
a=n/v
b=(l-1)/v
c=r/v
print a+b-c
N is a new constant integer = 2e6 + 123
INF is a new integer constant = 1e9 + 123
create constant integer variable called MOD = 1e9 + 7
declare constant double variable EPS with value 1e - 9
define function solve
declare integer variables L, v, l, r and x
read user input to L, v, l and r
print (L / v) - ((r / v) - ((l - 1) / v)) and '\n' to the standard output
create integer variable t
read variable t from the input
while t is not 0
call method solve()
decrement t
n=int
read n
x,y,z,w=int
for i=0 to n exclusive
ans=long long
read x,y,z,w
if z modulo y is 0 decrement z
ans=x/y+z/y-w/y
if y, z and w are the same increment ans
print ans
t = integer
read t
while t
L, v, l, r = integers
read L, v, l, r
a = integer with a = r / v - l / v
if l modulo v is 0, increment a
print L / v - a
create long long ints n, m, p, q, r, s, t, u, v, w, x, y, z, L, l, i and j with p = 0
read input to n
start for loop from i = 1 to n inclusive
read L, v, l and r from the input
set x to L / v - r / v
set y to (l - 1) / v
print x + y and '\n'
let t be a integer
read t
while t is decremented by 1
let d, v, l, r be long integers
read d, v, l, r
let count be a integer with count = d / v
r is equal to v * (r / v)
if l modulo v is not equal to 0 , l is equal to v * ((l / v) + 1)
print count - ((r - l) / v) - 1 and newline
t, L, v, l, r, r1, ans = integers
read t
for i = 0 to t exclusive
read L, v, l, r
ans = (l - 1) / v
r1 = ((r / v) + 1) * v
if L >= r1, then ans = ans + (L - r1) / v + 1
print ans
declare integer t
read t
while decrement t is ture
declare long integers L, v, l, r
read L and v and l and r
declare long integers tot = L / v
declare long integers unseen = r / v - (l - 1) / v
print tot - unseen and newline
declare integers t, L, v, l, r
read t
while decrement t
read L, v, l, r
print L / v - r / v + l / v - ( 1 if l % v is 0, else 0 ), "\n"
n, k, v, l, r = integer
read n
for i = 0 to n exclusive
read k, v, l, r
print the result of k / v + (l - 1) / v - r / v
create long long T, L, v, l, r, ans1, ans2
read T
while decrement T
read L, v, l and r
set ans1 to L/v
assign r/v - l/v to ans2
if l mod v=0, assign ans2 + 1 to ans2
print ans1 - ans2
i, j, k, n, m = long long integers, sum = long long integer = 0, ans = long long integer = 0
in function fastio that returns nothing
in function solve that returns nothing
L, v, l, r = long long integer
read L, v, l, r
n = L / v
m = r / v - (l - 1) / v
print the result of n - m
call fastio
t = integer = 1
read t
while looping decrease t by 1, while in the loop call solve
create new integer variable tc
read variable tc from the input
loop, decrementing tc, while it is not 0
declare int variables n, v, l and r
read n, v, l and r from the user input
create new integer variable t = n / v
declare integer variable with name t1 with value (r / v) - ((l - 1) / v)
print t - t1 to the standard output
declare long long variable called t
read t from the input
while t != 0, decrement it and continue the loop
declare long long ints L, v, l and r
read user input to L, v, l and r
print L / v - (r / v - (l - 1) / v) to the standard output
create int int t, L, v, l, r
read t
for i=0 to t exclusive
read L, v, l, r
print L / v - r / v + (l - 1) / v
t = long
read t
loop t times
x, v, l, r = long
read x then v then l then r
ans = long with ans = x / v
temp = long with temp = r / v - (l - 1) / v
decrement ans by temp
print ans
declare integers t, L, v, l, r
read t
while decrement t is true
declare integers a = 0, b = 0, c = 0, d = 0
read L and v and l and r
let a be ( l - 1 ) / v
let b be r / v
let d be d - a
let c be L / v
print c - d, newline
t = int
L, v, l, r = long long
read t
loop t times
ans = long long with ans = 0
read L then v then l then r
set ans to (l - 1) / v + L / v - r / v
print ans
declare constant integer variable INF with value 0x3f3f3f3f
let t, v, l, r, L and cnt be ints with the value of cnt = 0
read variable t from the input
loop, decrementing t, while it is not 0
read variables L, v, l and r from the input
declare new integer ans = L / v - (r / v - (l - 1) / v)
print ans to the standard output
let int t
read t
while t-- is truthy
create long long ints l, v, a, and b
read l, v, a, and b
create long long int numOfLight = (l / v) - ((b / v) - (a - 1) / v)
print numOfLight
make integer t
read t
while t-- is truthy
create long long ints l, v, li, ri, val1, val2, val3
read l, v, li, and ri
set val1 to l / v
set val2 to li / v
set val3 to ri / v
if li modulo v is 0, increment val3
set val3 to val3 - val2
set val1 to val1 - val3
print val1
declare long long array mz size 100005 = {}
declare long long array ts size 100005 = {}
declare long long T
read T
while decrement T is true
declare long longs L, v, l, r, ans = 0
read L, v, l, r
increment ans by L / v
if r % v is not 0, let r be r - r % v
if l % v is not 0, let l be l + ( v - l % v )
decrement ans by ((r-l)/v+1)
print ans, newline
t=int
read t
L,u,l,r=int
res=vector of int
for i=0 to t exclusive
read L,u,l,r
curr=L/u
subtract (r/u-l/u+(1 if l modulo u is 0)) from curr
put curr at end of res
for i=0 to t exclusive print res[i]
n, l1, v1, l2, r, count = integers
read n
for i = 0 to n exclusive
read l1, v1, l2, r
print the result of (l1 / v1 - (r / v1 - (l2 - 1) / v1))
in function gcd with arguments long long x and long long y that returns a long long
if y is 0
return x
else
return the result of calling gcd with arguments y and x modulo y
in function long long expo with arguments of long long n, long long m, and long long p that returns a long long
r = long long = 1
n = n modulo p
while m > 0
if m modulo 2 is possible then r = (r * n) modulo p
n = n squared modulo p
m - m / 2
return r modulo p
in function isPrime with an argument of a long long n that returns a boolean
if n <= 1 then return false
if n <= 3 then return true
if n is even or n modulo 3 is 0 then return false
for i = 5, where i is square to n inclusive and i = i + 6
if n modulo i is 0 or n modulo (i + 2) is 0, then return false
return true
t = long long
read t
while looping decrease t by 1
a, b, c, d = long long
read a, b, c, d
print the result of (a / b) - ((d / b) - (c - 1) / b)
t = integer
read t
l, v, x, y = long long integer
while decrement t
read l, v, x, y
count = long long integer with count = 0
total = long long integer with total = l / v;
sub1 = long long integer with sub1 = y / v
sub2 = long long integer with sub2 = x / v
count = total - sub1 + sub2
if x modulo v is 0, decrement count
print count
create integer t
read t
iterate t times
create integers l, r, v, p
read p, v, l and r
declare integer ans and set it to p/v
assign ans - (r / v - (l - 1) / v) to ans
print ans
declare new int variables n and d
read n
declare new 2d array of long longs a with size n by 4
start for loop from i = 0 to n exclusive
in a for loop, change j from 0 to 4 exclusive, reading a[i][j] from the user input on each loop
in a for loop, change i from 0 to n exclusive
change the value of d to (a[i][0] / a[i][1]) + ((a[i][2] - 1) / a[i][1]) - (a[i][3] / a[i][1])
print d and "\n"
declare integer T
read T
declare L, v, l, r as long integers
while decrement T is true
read L, v, l, r
declare nbr_lat = L / v as long integer
declare long integer hidden = r/v-l/v
if l % v is 0, increment hidden
print nbr_lat - hidden and newline
create long long int t
read t
create long long int dest, v, l and r
while decrement t
read dest, v, l and r
set fin to dest/v
fin1 = r / v
fin2 = (l - 1) / v
print fin - fin1 + fin2
n, i = integers
Read n
a = array of n integers
Read n values into array a
sort array elements of a in ascending order
if n is equal to 1
print a[0] and a new line
else if n is 3
print a[1] and a new line
else do the following
print a[2] and a new line
b, c, d, i, n = integers and a = array of 10001 integers
Read n
Read n values into array a
sort array elements of a in ascending order
print a[n / 2] and a new line
do nothing
eps = 1e-8 = const double
maxn = 1e6+7 = const int
pi = const double = acos(-1)
inf = 0x3f3f3f3f = const int
n = int
a = int array length 10
read n
read a from 1 to n inclusive
sort a from 1 to n inclusive
x = int = half of a[n] - a[1])
print a at 1 + x
n =integer
Read n
sum = integer with 0
for i = 0 to n exclusive
a = integer
Read a
set sum to sum + a
print sum / n and a new line
declare new unsigned variable n
read input to n
vect is a new vector of integers with n elements
define new long sum = 0
in a for loop, change i from 0 to n exclusive
read vect[i]
change sum to the sum of sum and vect[i]
sort elements of vect from the index 0 to n
new long avg = sum / n
print avg
n = integer, a = integer array of size 5
read n
for 0 to n exclusive read a[i]
sort(a, a + n)
print a[n / 2]
nu = array of 100100 long long
n = integer
read n
sum = integer with sum = 0
for i = 0 to n exclusive
b = integer
read b
sum = sum + b
print sum / n
a is an array of integers with size 100
create integer variable with name n
read n from the user input
read n elements from the input to a in a for loop
sort a from index 0 to n
print a[n / 2]
in void function solve
n = int
read n
a = int vector
for i = 0 to n exclusive
buff = int
read buff
push back buff into a
sort a
m = half of size of a = int
print a at m
call solve
n, m, i, q, ii = long long and a, b = long long array of size 100001 each
read n
read n values int a
sort a from index 0 to n
print a[n / 2]
V = vector of integer
n = integer
read n
while decrement n
x = integer
read x
append x on V
sort V.begin() and V.end()
print V[(V.size() / 2)]
n, i = integers and a = array of 10 integers
Read n
Read n values into array a
sort array elements of a in ascending order
print a[n / 2 + 1] and a new line
n =integer
Read n
year = array of n integers
Read n values into array year
sort array elements of year in ascending order
print year[n / 2] and a new line
create constant double eps with value 1e-8
create constant integer cakked maxn = 1e6 + 7
create constant double with name pi and value = acos of -1
create new constant integer inf = 0x3f3f3f3f
declare integer variable n
a is a new array of integers with 10 elements
read variable n from the input
read input into sequential items of a n times, starting from the index 1
sort a from element 1 to n + 1
x is a new integer = (a[n] - a[1]) / 2
print a[1] + x
MOD = const integer with MOD = 1000000007
INF = const long long with INF = 1e18
t, m, n = long long
A = vector of integer
in the function solve that returns long long
sort A.begin() and A.end()
n = integer with n = A.size()
return A[n / 2]
read n
resize n of A
for i = 0 to n exclusive, read A[i]
print solve
create float n
read n
create integers tmp and sum = 0
for i = 0 to i = n - 1
read tmp
set sum to sum + tmp
print the result of ceil of sum/n
n =integer
Read n
sum = integer with 0
for i = 0 to n exclusive
a = integer
Read a
set sum to sum + a
print sum / n and a new line
n=int
read n
V=vector of n int
for i=0 to n exclusive read V[i]
sort V
print (V[0]+V[n-1])/2
let n,a, sum=0 be integer
read n
for i=0 to n exclusive
read a
sum +=a
print sum and a new line
create integer n
read input to n
create new vector of integers a with n elements
for i = 0 to n exclusive, read a[i] from the user input
sort vector a
print a[n / 2]
create long long ints k, l, m, o, n, max = 0 and min = 0
read input to o
for i from 0 to o exclusive incrementing i
read user input to n
if max is less than n, assign the new value = n to max
if i = 0, change min to n
if min is greater than n, assign change min to n
change the value of k to (max - min) / 2
print max - k to the standard output
let maxn be a constant integer with maxn = 6
A = array of integers of length maxn
let N be a integer
read N
for i = 1 to N inclusive , read A[i]
sort the values A + 1 and A + N + 1
let p be a integer with p = N / 2
if N modulo 2 is equal to 1 , increment p by 1
print A[p] and newline
declare new integer variables n and i
read n from the input stream
a is an array of integers with n elements
read n elements from the input into a
sort a
print a[n / 2] to the stdout
n = integer
a = vector integer
read n
for i = 0 to n exclusive
k = integer
read k
push back the element of a by 1 and insert a new element of k at the end of a
min = max = integer = a[0]
for i = 0 to size of a exclusive
if a[i] > max, then max = a[i]
if a[i] < min, then min = a[i]
print min + (max - min) / 2
inf is a new constant integer with value 0x3f3f3f3f
declare new constant integer MX = 1e5 + 5
create new int n and int array a with size 10
read n
read n elements into a, starting from the index 1
sort a
print a[n / 2 + 1] to the standard output
MAX = constant integer of value 1e10
dict = set of integers
n, j = integers
read n
arr = array of length 6 initialized to 0
for i = 0 to n exclusive read arr[i]
for i = 0 to n exclusive
if arr[i] is greater than 0 then insert arr[i] into dict
set the first n elements of arr to 0
set j to 0
for it = the first element of dict until the last element of dict exclusive set arr[j] to be the value of it then add 1 to j
print arr[n/2]
a = array of 10 integers
n=integer
Read n
Read n values into array a
sort array elements of a in ascending order
print a[n / 2] and a new line
n =integer
Read n
a = array of n + 2 integers
set a[0] to 0
Read n values into array a
sort array elements of a in ascending order
k = integer, set to n / 2
if n modulo 2, then increment k
print a[k] and a new line
y = array of integers of length 10
let n be a integer
read n
for i = 1 to n inclusive , read y[i]
sort the values y + 1 and y + n + 1
print y[n / 2 + 1] and newline
create int n
read n
create int ara[n]
for i=0 to n exclusive, read ara[i]
sort elements between ara and ara + n
if n=1
print ara[0]
else if n=3
print ara[1]
else
print ara[2]
print a new line
declare new constant integer M with value 2e5 + 5
create new constant integer inf with value 1e9 + 5
n is a new integer variable
create new vector of integers v
read variable n from the input
for i from 0 to n exclusive
create new integer variable t
read variable t from the input
add new element = t after the last element of v
sort v from start to end
print v[n / 2]
n =integer and y = array of 10 integers
Read n
Read n values into array y
sort array elements of y in ascending order
print y[n / 2] and a new line
create variable n with type size_t
read input to n
create new vector year with n elements of type of size_t
read n elements into year in a loop
sort year
print year[(n - 1) / 2]
n=int
read n
arr=array of 10 int
for i=1 to n exclusive read arr[i]
sort arr from position 1 to n+1
if n is 1
print arr[1]
else if n is 3
print arr[2]
else
print arr[3]
declare long long unsigned variables n and k
read n and k
declare long long unsigned variable mid = n / 2
if n modulo 2 is 1, increment mid
if k <= mid
print (k * 2) - 1
else
print ((k - (mid + 1)) * 2) + 2
n, k, p, o =integers
Read n and k
if n is even
set p to n / 2
else do the following
set p to n / 2 + 1
if k is less than or equal to p
set o to (k * 2) - 1
else do the following
set o to (k - p) * 2
print o and a new line
n, k, half = long long int
read n and k
if n modulo 2 is 0
half = n / 2
else if n modulo 2 is 1
half = (n + 1) / 2
if k <= half
print 2 * k - 1
else if k > half
print (k - half) * 2
declare long longs n, k, c, l and d
read n and k
if n is even
l = n / 2
else
l = n / 2 + 1
if k <= l
print 2 * k - 1
else
if n is odd
print 2 * k - n - 1
else
print 2 * k - n
create long long n, k
read n, k
if n is even
if k is greater than n/2
print (k - (n / 2)) * 2
else do the following
print k * 2 - 1
else do the following
if k is greater than (n) / 2 + 1
print (k - (n / 2 + 1)) * 2
else do the following
print k * 2 - 1
create long long integers n and k
read n and k
if k <= (n + 1) / 2
print 2 * k - 1
else
print 2 * (k - (n + 1) / 2)
create long long integer number
declare long long integer variable position
read number
read position
declare long long integer x
if number is even
if position <= number / 2
x = (position * 2) - 1
else if position is greater than number / 2
x = (position - (number / 2)) * 2
else if number is odd
if position <= (number + 1) / 2
x = (position * 2) - 1
else if position is greater than (number + 1) / 2
x = (position - ((number + 1) / 2)) * 2
print x
declare long long integer variables n and k = 0
loop reading n and k from the input
declare long long integer a = 0
if n is odd
if k is greater than (n + 1) / 2
a = (k - (n + 1) / 2) * 2
else
a = 2 * k - 1
else
if k is greater than n / 2
a = (k - n / 2) * 2
else
a = 2 * k - 1
print a
n, k, p, o = long long int
read n and k
if n modulo 2 is 0
p = n / 2
else
p = (n / 2) + 1
if k <= p
o = (2 * k) - 1
else
o = (k - p) * 2
print o
n, k = long long
read n then k
if n is uneven
if k is less or equal to n / 2 + 1
print 2 * k - 1
else
print (k - n / 2 - 1) * 2
else
if k is less or equal to n / 2
print 2 * k - 1
else
print (k - n / 2) * 2
n, k = long long
read n, k
if k <= (n + 1) / 2
print k * 2 - 1
else
print (k - (n + 1) / 2) * 2
create long long int n, k and mid
read n and k
assign ceil of n/2.0 to mid
if k is less than or equal to mid
print (k * 2) - 1
else do the following
print (k - mid) * 2
declare unsigned long longs a, b and c
read a and b
if a is even
c = a / 2
else
c = a / 2 + 1
if b is greater than c
b = (b - c) * 2
else if b <= c
b = 2 * b - 1
print b
a,b=long long int, sum=0
read a,b
sum=(a+1)/2
if sum >= b
print b*2-1
else
print (b-sum)*2
declare long long variables n and k
read n and k
if k <= (n + 1) / 2
print k * 2 - 1
else
print (k - (n + 1) / 2) * 2
create long long n and k
let j be long long
read n and k
if k<= (n+1)/2
print 2*k-1
else
assign (k - (n + 1) / 2) * 2 to j
print j
create long long n, k, i, num
read n and k
set i = (n + 1) / 2
id k<= i
assign 2*k-1 to num
else
k=k-i
set num to 2*k
print num
n, k =integers
Read n and k
if k is less than or equal to (n + 1) / 2
print (k * 2) - 1 and a new line
else do the following
print (k - (n + 1) / 2) * 2 and a new line
declare long longs n and k
read n and k
if n is even
if k <= n / 2
print 2 * k - 1
else
print 2 * (k - n / 2)
else
if k <= (n + 1) / 2
print 2 * k - 1
else
print 2 * (k - ((n + 1) / 2))
create variables n and k with type long long
input n and k
if k > (n/2 + n mod 2)
print (k - n / 2 - n % 2) * 2
otherwise
print k * 2 - 1
create long long n and k
read n, k
if k<= (n+1)/2
print k*2-1
else
print (k - (n + 1) / 2) * 2 and a newline
n, k =integers
Read n and k
if n is even
if k is less than or equal to n / 2
print 2 * k - 1 and a new line
else do the following
print 2 * (k - n / 2) and a new line
else do the following
if k is less than or equal to (n + 1) / 2
print 2 * k - 1 and a new line
else do the following
print 2 * (k - (n + 1) / 2) and a new line
declare long long n
create long long k
read n and k and keep looping
if n is odd
if k <= n / 2 + 1
print 2 * k - 1
else
print 2 * k - n - 1
else
if k <= n / 2
print 2 * k - 1
else
print 2 * k - n
declare long long variables n and k
loop, reading n and k from the input
if k <= (n + 1)>>1
assign k << 1 - 1 to k
else{
decrease k by n + 1 >> 1
k = k << 1
print k
create long long n and k
read n, k
if n is odd
if k greater than ((n - 1) / 2) + 1)
k = k - ((n - 1) / 2) - 1
assign 2*k to k
esle
set k to 2*k -1
else
k greater than n/2
k = k - (n / 2)
set k to 2*k
else
set k = 2 * k - 1
print k
declare long long variables n and k
read n and k
set n to (n + 1) / 2
print 2 * (k - n) if k > n, else 2 * k - 1
create long longs n, k
read n read k
if k is less than or equal to ( n + 1 ) / 2
print k * 2 - 1 print newline
else
print ( k - ( n + 1 ) / 2 * 2 print newline
n, k = long long
read n and k
part = long long with part = 0
if n modulo 2 is 0
part = n / 2
else
part = (n / 2) + 1
if k <= part
print (k * 2) - 1
else
print (k - part) * 2
let n, k, odd, ans be long long ints
read n and k
if n is even
set odd to n / 2
else
set odd to n / 2 + 1
if k <= odd
set ans to k*2 - 1
else
set ans to (k - odd) * 2
print empty string, then print ans
create unsigned int n
k=integer
read n
for i=1 to 4 inclusive
if n mod i = 1 or n mod i = 2, set k to 1
if n mod 1 = 0 or n mod i = 3, k=0
print k
n=integer
read n
if n is even
if n/2 is even
print 0
otherwise
print 1
else
set n=n-1
if n/2 is even
print 1
else
print 0 and a newline
set maxn to 2e5 + 5
create long long a[maxn]
create long long b[maxn]
create int n
read n
print ((n + 1) / 2) % 2
declare integer variable m
read m
print m + 1 >> 1 & 1 if m & 1, else print m >> 1 & 1; then print '\n'
n = long long int
read n
if (n * (n + 1) / 2) modulo 2 is 0
print 0
else
print 1
create constant long long N = 1e8 + 3
create constant long long MN = 1e9 + 7
create constant long long MX = -1e9 - 7
create long longs n, l, a, t, l1, cnt, c and q
create string variables s1 and s
create array of pairs of long longs called pr, with 1001 element
create vector of long longs called v
create a map from characters to long longs with name mp
create set of long longs st
create set iterator it for a set of long longs
read n
n %= 4
if n = 0 or n = 3
print 0
else if n = 1 or n = 2
print 1
print "\n"
create int n
read n
set (n * (n + 1)) / 2 to y
if y mod 2
print 1
otherwise
print 0 and a new line
set constant integer N = 5005
n = integer
read n
if n modulo 4 equal to 0 or n modulo 4 = 3
print 0
otherwise
print 1
create long long n, set sum = 0
read n
assign n * (n + 1) / 2 to sum
if sum is even
print 0
otherwise
print 1 and a newline
create long long n
read n
if n modulo 4 equal to 0 or n modulo 4 = 3
print 0
otherwise
print 1 and a new line
declare power with long longs x, y, m as arguments, returning long long
if y is 1, return x % m from function
if y is 0, return 1 from function
if y bitwise and 1, return (x * result of run power with ( (x * x) % m, (y - 1) / 2, m ) as arguments ) % m from function
return result of run power with ( (x*x) % m, y / 2, m ) as arguments % m from function
declare modinv with long longs x, mod with mod = 1000000007
return result of run power with x, mod - 2, mod as arguments
declare solve
create long long n
read n
if (n * (n + 1) / 2) & 1
print 1 print newline
else
print 0 print newline
run solve
declare integer variables n, x and y
read n
n = (n * (n + 1)) / 2
x = n / 2
y = n - x
print absolute value of x - y
create long long n
set ans = 0
read n
set ans = n * (1 + n) / 2
if ans is even
print 0
otherwise
print 1 and a newline
create long long int T and n
create int array a of length 100010 + 5
set M = 1e9 + 7
read n
n=n%4
if n is equal to 0 or n is equal to 3
print 0
otherwise
print 1 and a newline
n =integer
Read n
tmp = integer with n modulo 4
if tmp is equal to 1 OR tmp is equal to 2
print 1 and a new line
else do the following
print 0 and a new line
create int n
read n
if n mod 4 = 0
print 0
else if n mod 4 is equal to 1
print 1 and a new line
otherwise if n modulo 4 = 2
print 1
else
print 0 and a new line
let n be a long integer
read n
if (n is equal to 3 or n % 4 is equal to 0 or n % 4 is equal to 3)
print 0 and newline
else do the following
print 1 and newline
n, s = long longs
read n
set s to ((n + 1) * n) / 2
if s % 2 is equal to 0
print 0
else
print 1
declare integer variable n
read n
if n modulo 4 = 3 || n modulo 4 = 0
print 0
else
print 1
print '\n'
n = integer
read n
print ((n + 1) / 2) modulo 2
n = integer
read n
print ((n + 1) / 2) modulo 2
create integer n
create long longs a and b
read n
if n is even and n % 4 = 0
print 0 and '\n'
else if n is even and n % 4 != 0
print 1 and '\n'
else if n is odd and (n - 1) % 4 = 0
print 1 and '\n'
else if n is odd and (n - 1) % 4 != 0
print 0 and '\n'
create long long n
read n
create long long sum with sum = n * ( n + 1 )
set sum to sum / 2
create long long p with p = sum / n
print p % 2 print newline
declare long long n
read n
print n * (n + 1) / 2 modulo 2
create long long integer n
read n
if n is even
if n % 4 = 0
print 0
else
print 1
else
if (n - 1) % 4 = 0
print 1
else
print 0
A = integer array of length 10000
B = integer array of length 10000
n, ans = integers with ans value of 0
read n
if n mod 4 equals 1 or n mod 4 equals 2
print 1
else
print 0
n = integer
read n
if n modulo 4 equal to 0
print 0
otherwise if n modulo 4 = 1
print 1
otherwise if n modulo 4 equal to 2
print 1
otherwise
print 0
print a new line
INF = const int with INF = 0x3f3f3f3f
MAXN = const int with MAXN = 2e5 + 5
n = long long
read n
print n * (n + 1) / 2 modulo 2
create long long i, n and sum
read n
if n is even, set sum to n / 2 * (n + 1)
if n mod 2 is different from 0, assign n / 2 * (n + 1) + (n / 2 + 1) to sum
if sum modulo 2 is different from 0
print 1
otherwise
print 0 and a new line
create long long n
read n
if n modulo 2 is = 0
set m = n/2
if m modulo 2 equal to 0
print 0
otherwise
print 1
otherwise
set m= (n-1)/2
if m mod 2 = 0
print 1
other
print 0 and a new line
arr = long long array of size 200001
n, i, sum = long long with sum = 0
read n
set sum to (n * (n + 1)) / 2
if sum is even
print 0
else if sum is uneven
print 1
x = long long int
read x
print ((x * (x + 1) / 2) modulo 2)
mxaN = const int with maxN = 2012345678
n = int
read n
sum = long long int with sum = (n * (n + 1)) / 2
if sum is even
print 0
else
print 1
create integer a
read a
print ((a + 1) / 2) % 2 print "\n"
create int n
read n
n = n mod 4
if n=0 or n=3
print 0
otherwise
print 1 and a newline
n,m=int
read n,m
mn=n if n<m else m
fact=1
for i=2 to mn inclusive multiply fact by i
print fact
declare new integer variables a and b
read input to a and b
new integer ans with value 1
for i from 1 to (min of a and b) inclusive, multiply ans by i
print ans
declare integer variables a, b and ans with ans = 1
read a and b
if a is greater than b, change a to b
in a for loop, change i from 1 to a inclusive, multiplying ans by i on every loop
print ans to the standard output
in function fact which accepts integer n and returns long long integer
if n <= 0
return 1
else
return n * fact(n - 1)
a, b = long long integers
read a and b
x = long long integer set to min(a, b)
print fact(x)
let a, b, c be long integers
read a, b
if a is greater than b
c is equal to a
a is equal to b
b is equal to c
c is equal to 1
while a is true
c is equal to c * a
decrement a by 1
print c and newline
a, b = integer
sum = long long = 1
read a, b
min = integer = a if a < b else min = b
for i = 2 to min inclusive, then sum = sum * i
print sum
new array of integers dx with values 0, 0, -1, 1
new array of integers dy with values 1, -1, 0, 0
create new ints x and y
read x and y from the input
g is a new integer with value min of x and y
create new integer called ans = 1
loop through i from 1 while i < g + 1, multiplying ans by i on each iteration
print ans and '\n'
function factorial with long argument A that returns long
declare long variable with name ans = 1
for i from 1 to A inclusive, multiply ans by i
return ans
declare longs A and B
read A and B from the user input
print factorial(min of A and B) and "\n" to the standard output
function fact (get long long n, return long long)
if n is 0 or 1
return 1
else
return n*fact(n-1)
function gcd (get long long a and b, return long long)
if b is 0
return a
else
return gcd(b, a modulo b)
a,b=long long
read a,b
c=min(a,b)
print fact(c)
declare long longs t, i, j, n, m, k, ans, ck, cnt = 0, sum = 0, c = 0
declare strings s, s1, s2, tmp
read n and m
let ck be minimum of n and m
declare long long face = 1
for i = 1 to ck inclusive, let fact be fact * i
print face and newline
declare function factorial which takes integer a
if a is equal to 1 then return 1
return a * factorial(a - 1)
create integers a and b
read a and b
if a is greater than b
print factorial of b
else
print factorial of a
a, b, x, i, k = long long int with k = 1
read a then b
set x to min of a, b
for i = 1 to x inclusive set k to k * i
print k
create new vector of integers called divisor with 1000000+1 elements filled with 0
integer function bigmod with long long arguments a, b and c
create long long variable with name x
if b is equal to 0, return 1 modulo c
change x to bigmod(a, b / 2, c)
set x to x squared % c
if b & 1 is true, assign the new value = (x * a) % c to x
return x
ulong long function factorial with long long argument n
new ulong long fact = 1
in a for loop, change i from 2 to n inclusive, multiplying fact by i
return fact
declare int variables x and y
loop, reading x and y from the input
new integer variable mn with value min of x and y
new ulong long A = result of factorial(mn)
print the result of __gcd(A, A)
in the function fac that takes long long n and returns long long
ans = long long with ans = 1
for i = 1 to n, ans = ans * i
return ans
a, b = long long
read a, b
print fac(min(a, b))
long long function gcd with long long arguments a and b
if b != 0, return a
return gcd(b, (a % b))
declare long long variables n, m, a and b with a and b = 1
read input to n and m
if n is greater than m, swap n and m
in a for loop, change i from 1 to n inclusive, multiplying a by i on each iteration
start for loop from i = 1 to n + 1 inclusive, multiply b by i on each loop
print gcd(a, b) and "\n" to the standard output
a, b, i, ans, x = int with ans = 1
read a then b
set x to min of a, b
for i = 1 to x inclusive set ans to ans * i
print ans
declare ints a and b
create long long variable sum = 1
read a and b and keep looping
create new integer variable cnt with value min of a and b
loop through i from 1 to cnt inclusive, multiplying sum byi on each iteration
print sum
a, b = integers
read a and b
mn, ans = integers with mn having value of the minimum of a and b, and ans having value of 1
for i = 2 to mn inclusive set ans to ans * i
print ans
declare long longs a, b, c, v and e
read input to a and b
if a <= b
assign the new value = a to v
else
set v to b
change the values of a and b to 1
while v > 0
change the value of b to b multiplied by a
increment a by one
decrement v by one
print b
create long long int fact(long int x)
if x=0 or 1, return 1
return x * fact(x - 1)
create long int a, b
read a
read b
if a > b
print fact(b) and a newline
else
print fact(a) and a newline
function fact (get int n, return int)
if n is 1 return 1
return n*fact(n-1)
a,b=int
read a,b
output=fact(int(min(a,b)))
print output
maxn = 1e5 + 7
create int a and b
read a, b
set c to min of a and b
ans = 1
for i=1 to c inclusive, set ans to ans *i
print ans
define function fact with long long as argument and returns a long long
if x less than or equal to 1 then
return 1 to the calling statement
else do the following
return x * return value of fact(x-1) to the calling statement
create long long a, b
read a, b
if a greater than b then
call fact(b) and print the return value
else do the following
call fact(a) and print the return value
in function fact with argument integer n that returns an unsigned long long
ans = unsigned long long = 1
while . >= 1
ans = ans * n
decrease n by 1
return ans
a, b = integer
read a, b
print call fact with argument of the lower value between a and b
ll = long long with value of 1
a, b = integers
read a and b
if a is greater than b then set a to b
for i = 2 to a inclusive set ll to ll * i
print ll
let a, b, x, i, k be long integers with k = 1
read a, b
x is equal to minimum of a and b
for i = 1 to x inclusive , k is equal to k * i
print k and newline
a,b=long long
read a,b
c=min(a,b)
ans=1
for i=1 to c inclusive multiply ans by i
print ans
a, b, c, d =integers with c = 1
Read a, b
set d to minimum value of a and b
for i = 1 to d exclusive, then set c to c * i
print c and a new line
a, b = long long
read a and b
if a is less than b then set a to a otherwise set a to b
set b to 1
for i = 2 to a inclusive set b to b * i
print b
declare integers a, b
while read a, b
declare integer t
let t be a
if b is less than a, let t be b
declare integer i
declare integer k = 1
for i = 1 to t inclusive, let k be k * i
print k and newline
create long long ints a and b
read a and b
let i and f = 1 be long long integers
loop until break
f = f * i
if i is equal to a or i is equal to b
print f
break
in long long function factorial taking n = long long
if n > 1
return n * factorial of n-1
else
return 1
a, b, ans = long long
read a and b
set ans to min of a and b
print factorial of ans
declare facto with long long n as argument, returning long long
if n is 0 or n is 1, return 1 from function
declare long long array fact size 18 = {0}
let fact[0] be 1
for i = 1 to n inclusive, let fact[i] be fact[i-1] * i
return fact[n] from function
declare long longs a, b
read a and b
print result of run facto with minimum of a and b as argument, "\n"
t, a, b, c, i, d, k =integers with i = 0, d = 1, k = 1
Read a, c
set i to minimum value of a and c
for t = 1 to i exclusive
print d and a new line
create integer n
while read n is true
create long long answ with answ = n
for i = 1, a to n inclusive, incrementing i
read a
increment answ by long long casted i * ( a - 1 )
print answ print newline
function Fast_Read_Out
define function Random
define unsigned long long seed
call asm with arguments "rdtsc" : "=A"(seed)
initialze random number generator with seed
unsigned long long function Time
unsigned long long time = clock() / 1000.00
return time
create constant long long inf with value (1e9) + 123
a is an array of long longs with size 101
dp is an long long array with size 101
invoke function Random
invoke function Fast_Read_Out
create long long n
read n
for i = 1 to n inclusive read a[i]
for i = 1 to n inclusive set dp[i] = to (a[i] - 1) * i + 1
create long long sum = 0
for i = 1 to n inclusive increase sum by dp[i]
print sum and a new line
create integer n
read n
create long long array arr with size n
for i = 0 to n exclusive, read arr[i]
create long long ans with ans = 0
for i = 0 to n exclusive, set ans to ans + ( i + 1 ) * arr[i] - i
print ans print newline
n is long long
read n
declare long long called tot = 0
declare long long called input
for integer i = 1 to n inclusive
read input
increase tot by i * (input - 1)
increase tot by n
print tot and a new line
create long long integers n, s, m with s = 0
read n
for i = 0 to n exclusive
read m
increment s by m + i * ( m - 1 )
print s print newline
n and ans are long longs with ans = 0
read n
for i = 1 to n inclusive
declare long long a
read a
increase ans by (a - 1) * (i - 1) + a
print ans and a new line
declare integer n
create long longs a and Ans and long long array ara with size 101
read n
read a
assign value of a to Ans
for integer i = 1 to n exclusive
read ara[i]
increase Ans by (ara[i] - 1) * (i + 1) + 1
print Ans
n = long long, a = array of 101 long long filled with 0, ans = 0
read n
for i=1 to n inclusive read a[i]
for i=1 to n inclusive sum (a[i]-1])*i+1 to ans
print ans
desperate_optimization is a void function with integer argument precision
cout.setf(ios::fixed)
cout.setf(ios::showpoint)
cout.precision(precision)
in the function hora with integer argument tc
create integer n
read n
declare long long variable tot = 0
for long long i = 1 to n inclusive
create long long x
read x
increase tot by (i) * (x - 1) + 1
print tot and '\n'
call desperate_optimization with 10 as an argument
declare integer variable ntc = 1
for integer tc = 1 to ntc inclusive, call hora of tc
create long long n
read n
declare long long ans = 0
for integer i = 0 to n exclusive
declare long long variable a
read a
increase ans by (i + 1) * (a - 1) + 1
print ans and a new line
create constant integer M with M = 100 + 10
create long long integer a with size M
create integer n
read n
for i = 1 to n inclusive, read a[i]
create long long integer ans with ans = 0
for i = 1 to n inclusive, set ans to ans + (i - 1) * (a[i] - 1) + a[i]
print ans print newline
declare long long variables a, b, i and k where b = 0
read a
for i = 1 to a inclusive
read k
if i = 1 || k = 1
increase b by k
else
multiply k by i
decrease k by i - 1
increase b by k
print b and a new line
create long longs ans, n create long long array a with size 101
read n
for i = 1 to n inclusive, read a[i]
for i = 1 to n inclusive, set ans to ans + a[i] * i + 1 - i
print ans print newline
create integer n
create long long array arr with size 102
read n
for i = 1 to n inclusive, read arr[i]
create long long sum with sum = 0
for i = 1 to n inclusive, increment sum by (arr[i]-1)*i
increment sum by n
print sum print newline
create long longs, n, ans, cnt, create long long array a with size 105
read n
for i = 0 to n exclusive, read a[i]
set ans to a[n-1]
for i = n - 2 to 0 inclusive, decrementing i, increment a[i] by a[i + 1] - 1, increment ans by a[i]
print ans print newline
create long longs n and a
read n
create long long ans = 0
for long long i = 1 to n inclusive
read a
increase ans by (a - 1) * i + 1
print ans
create long longs a, b, i, k, with b = 0
read a
for i = 1 to a inclusive
read k
if i is 1 or k is 1
increment b by k
else
set k to k * i
decrement k by i - 1
increment b by k
print b print newline
let a,i,k,n be unsigned long integers
read n
for i=1 to n inclusive
read a
k is equal to k + (a - 1) * i
increase k by 1
print k and endline
declare long longs n, a and ans
read n and a
set ans to a
for i = 2 to n inclusive
read a
increase ans by 1 + (a - 1) * i
print ans and a new line
create interger t
create long integer a
create long integer sum
while(t value is entered)
set sum to 0
for(int i=0 to t(exclusive))
read a
add (a-1) * i +a to sum
print out sum
let n be a long integer
read n
let total(0) be a long type integer
for ( long integer p=0 to n exclusive )
let m be a long integer
read m
let the value of total is equal to total + (m - 1) * (p + 1) + 1
print total and newline
create long longs ans, n, create long long array a with size 105
read n
for i = 1 to n inclusive, read a[i]
for i = 1 to n inclusive, set ans to ans + a[i] * i + 1 - i
print ans print '\n'
declare long long variable n
read n
long long total = 0
for long = 0 to n exclusive
create long long m
read m
increase total by (m - 1) * (p + 1) + 1
print total
create long long n
create long long sum
while reading n
set sum to 0
for integer i = 1 to n inclusive
declare long long m
read m
increase sum by i * (m - 1) + 1
print sum
declare abs with long long, long long as arguments, returning long long
declare solve with no arguments, returning void
create long longs n, a, t, with t = 0
read n
for i = 1 to n + 1 exclusive
read a
increment t by ((a - 1) * i + 1)
print t print "\n"
create long long TESTS with TESTS = 1
while decrement TESTS is true, run solve
declare abs with long longs a, b as arguments, returning long long
if a is greater than b
return a - b from function
else
return b - a from function
create constant integer INF with value 0x3f3f3f3f
create integer array a with 105 elements
declare long long variables i, j, k and l where l = 0
create long longs n and m
read n
for i = 0 to n exclusive read a[i] and decrement it
create long long s = n
for i = 0 to n exclusive
if a[i], increment s by a[i] + a[i] * i
print s
create integer n
declare long long integer array a with size 150
declare long long integer variable sum = 0
while reading n
assign value of 0 to sum
for i = 1 to n inclusive read a[i]
for i = 1 to n inclusive
if i = 1
increase sum by a[1]
else
increase sum by (a[i] - 1) * i + 1
print sum
declare integer n
read n
declare long long array a with size n
read a[i] n times
declare long long variable sum = 0
for i = 0 to n exclusive
increase sum by a[i]
increase sum by (a[i] - 1) * i
print sum
declare integer n and integer array a with size 101
read n
declare long long ans = 0
for i = 1 to n inclusive
read a[i]
increase ans by 1LL * (a[i] - 1) * (i - 1) + a[i]
print ans
assign value 0x3f3f3f3f to constant integer inf
assign value 10005 to constant integer MAXN
assign value 19260817 to constant integer mod
assign value 0x7fffffff to constant integer INF
ans is an long long array with size 101
create integers n and x
read n
for i = 1 to n inclusive write input to ans[i]
declare long long variable sum = 0
for i = 1 to n inclusive, increase sum by ans[i] * i - i + 1
print sum and a new line
arr is a new array of integers with size 3 by 1005
define integers n and s
read standard input to n and s
in a for loop, change i from 0 to 2 exclusive incrementing i
change j from 1 to n inclusive in a loop and read input to arr[i][j] on each iteration
create integer variable with name cek
if arr[0][1] != 0 and (arr[0][s] != 0 or arr[1][s] != 0 )
change the value of cek to 1
if arr[0][s] is equal to 0
assign 0 to cek
for i from s + 1 to n inclusive incrementing i
if arr[0][i] and arr[1][i] are both not 0, change the value of cek to 1
else
change the value of cek to 0
print "YES" if cek is not 0, otherwise print "NO"
define new integers n and m, and arrays a and b with 1111 element
read from the input to n and m
read standard input to n elements of a, starting from the index 1
read from the input to n items of b, starting from the index 1
if a[1] is equal to 0
print "NO" to the standard output
flag is a new integer variable with value 0
if a[m] is not 0
print "YES"
else
if b[m] is 0
print "NO"
else
for integer i = m + 1 to n inclusive
if both a[i] and b[i] are not 0
assign 1 to flag
print "YES"
if flag is false, print "NO"
let n, s be integers
read n, s
a = array of integers of length n , b = array of integers of length n
for i = 0 to n exclusive , read a[i]
for i = 0 to n exclusive , read b[i]
if a[0] equals 0
print NO and newline
else if a[s - 1] equals 0 and b[s - 1] equals 0
print NO and newline
else if a[s - 1] equals 1
print YES and newline
else if a[s - 1] equals 0 and b[s - 1] equals 1
the integer value of k = 0
for i = s to n exclusive
if a[i] equals 1 and b[i] equals 1
k is equal to 1
print YES and newline
if k equals 0
print NO and newline
n, s = int
a, b = bool array of size 1111 ach
read n then s
for i = 1 to n inclusive read a[i]
for i = 1 to n inclusive read b[i]
if not a[1]
print "NO"
else if a[1] and a[s]
print "YES"
else
flag = int with flag = =
for i = s + 1 to n inclusive
if a[i]
if b[i] and b[s]
set flag to 1
break
if flag
print "YES"
else
print "NO"
let N and S be integers
read in N and S
decrement S
let a and b be arrays of integers of size N
read in N values into a
read in N values into b
if a[0] and a[S] are true
print YES
for k = S + 1 to k < N
if a[0] and a[k] and b[k] and b[S] are true
print YES
print NO
declare an arrays of ints a and b with 1005 elements
declare new int variables n and m
read n and m from the input
read n elements into array a from the input, starting from the index 1
read n elements into b, starting from the index 1
if a[1] is equal to 0
print "NO"
else if a[1] and a[m] are both equal to 1
print "YES"
else
if b[m] = 0
print "NO" to the output stream
else
declare new integer variable bj with value 0
in a for loop, change i from m + 1 to n inclusive
set the value of bj to 1 if a[i] and b[i] are both = 1
if bj is not 0
print "YES" to the standard output
else
print "NO"
create constant integer mx = 1000
define new integers n and s
create bool arrays a and b with size mx
in the function solve
read input to n and s
declare new int variables t1 and t2 = 0
read n elements to the a
read n elements into items of b
if a[0] = 1, change the value of t1 to 1
if a[s - 1] = 1 or b[s - 1] = 1
in a for loop, change i from s - 1 to n exclusive incrementing i
if values of a[i] and b[i] are both = 1
set the value of t2 to 1
break
if t1 = 1 and (t2 = 1 or a[s - 1] = 1)
print "YES\n"
else
print "NO\n"
call method solve()
let maxn be a constant integer 1e5 + 5
let a, b be integer arrays of size maxn
n, m be integers
read n, m
for integer i = 0 to n inclusive, read a[i]
for integer j = 0 to n inclusive, read b[j]
if a[1] equal 0
print NO and newline
if a[m] equal 1
print YES and endline
for integer i = m to n inclusive
if a[i] ,b[i] ,b[m] all equal 1
print YES and endline
print NO and newline
create function solve
long long integer as n,s
read n,s
long long integer as a[n],b[n]
input a[i]
input b[i]
if a[0] is 1 then do the following
if a[s - 1] is 1 then do the following
output YES\n
else
long long integer as ng long h = 0
for s to less than n do the following
if a[i] and b[i] is 1 then do the following
set h to 2
break
if h is 2 and b[s - 1] is 1 then do the following
output YES\n
else
output NO\n
else
output NO\n
long long integer as t = 1
if t is true then run solve function
let n, s be long integers , a = array of integers of length 1001, b = array of integers of length 1001
read n , s
for long integer i = 1 to n inclusive , read a[i]
for long integer i = 1 to n inclusive, read b[i]
if a[1] equals 0
print NO and newline
if a[s] equals 1
print YES and newline
the boolean value of flag = false
for long integer i = s + 1 to n inclusive
if a[i] equals 1 and b[i] equals 1
flag is equal to true
stop
if flag is equal to false
print NO and newline
if b[s] equals 1
print YES and newline
print NO and newline
make ints n and s
read n and s
create integer array a of size n + 1 with {0}
make int array b of size n + 1 with {0}
for i = 1 to n, read a[i]
for i = 1 to n, read b[i]
if a[1] is equal to 0
print "NO\n"
if a[s] is equal to 1
show "YES\n"
for i = s + 1 to n
if a[i] is equal to 1 and b[i] is equal to 1 and b[s] is equal to 1
show "YES\n"
display "NO\n"
define new integers n and s
read n and s from the input
new vector of integers forward with size = n + 1, filled with 0
declare vector of integers called backward with n + 1 element filled with 0
for integer i = 1 to n inclusive, read input to forward[i]
read n elements to backward, starting from the index 1
if forward[1] = 0
print "NO"
else
if forward[s] = 1
print "YES"
else
if backward[s] is equal to 1
declare boolean variable with name availabe and value false
for i from s + 1 to n inclusive incrementing i
if forward[i] and backward[i] = 1
assign true to availabe
break the loop
print "YES" if availabe is true, print "NO" otherwise
else
print "NO"
make integer arrays a of size 10000 and b of size 10000
create bool ab = 0
make ints n, s, i, z = 1, x, and c
read n and s
set x to n + 1
for i = 1 to n, read a[i]
for i = 1 to n, read b[i]
if a[s] is equal to 1 and a[1] is equal to 1
set ab to 1
else do
for i = n to 1 by decreasing by 1
if a[i] is equal to 1 and b[i] is equal to 1
if i is greater than s and b[s] is equal to 1, set ab to 1
if a[1] is 0, set ab to 0
if ab is equal to 1
display "YES"
otherwise
output "NO"
n, s =integers
t1, t2 = array of 100000 integers each
Read n, s
Read n values into array t1
Read n values into array t2
if t1[0] is equal to 1
if t1[s - 1] is equal to 1
print YES and a new line
if t2t[s - 1] is equal to 1
for i = s to n exclusive
if t1[i] is 1 and t2[i] is 1
print YES and a new line
print NO and a new line
let n and s be integers
read in n and s
let a be an array of integers of size n + 1, let b be an array of integers of size n + 1
read in n values into array a
read in n values into array b
if a[1] is equal to 1
if a[s] is equal to 1
print YES
else if b[s] is equal to 1
for i = s + 1 to i <= n
if a[i] is equal to 1 and b[i] is equal to 1
print YES
print NO
or else
print NO
or else
print NO
let n be a integer
the integer value of ans = -1
the integer value of res = 0
read n
a = array of integers of length n
for i = 0 to n exclusive
read a[i]
if a[i] is equal to 1 , increment res by 1
if res is equal to n
print n - 1 and newline
if n is equal to 1 and a[0] is equal to 1
print 0 and newline
for j = 0 to n exclusive
for k = 0 to n exclusive
the integer value of cnt = 0
for l = 0 to n exclusive
if l >= k and l <= j
increment cnt by (1 - a[l])
else do the following
increment cnt by a[l]
ans is equal to maximum of ans and cnt
print ans and newline
create n
ans = -1
res=0
read n
create int a[n]
for i=0 to n exclusive
read a[i]
if a[i] = 1, increment res
if res=n
print n-1
if n = 1 and a[0] = 1
print 0
for j=0 to n exclusive
for k=0 to n inclusive
cnt=0
for l=0 to n exclusive
if l >= k and l <= j
cnt = cnt + !a[l]
else
set cnt = cnt + a[l]
set ans to max of ans and cnt
print ans
let max = 0, n, i, sum = 0, a[105], p be ints
read n
set p to 0
for i = 0 to n exclusive
read a at i
increment sum by a at i
if sum = n
print sum - 1
for i = 0 to n exclusive
if a [i] = 0
increment p
else if a[i] = 1 and p < 0
reset p to 0
else if a[i] = 1 and p > 0
decrement p
if max < p then set max to p
increment sum by max
print sum
make ints n, a, cnt_1 = 0, cnt_0 = 0, and cnt_max0 = -1
read n
while n-- is truthy
read a
if a is equal to 1
add 1 to cnt_1
if cnt_0 is greater than 0, subtract 1 from cnt_0
if a is equal to 0
add 1 to cnt_0
if cnt_0 is greater than cnt_max0, set cnt_max0 is equal to cnt_0
make integer ans = cnt_1 + cnt_max0
display ans
cnt1, cnt0 = int array of size 105 each
n = int
read n
a = int array of size n + 1
for i = 1 to n inclusive read a[i]
set cnt1[0] to 0
set cnt0[0] to 0
maxv = int with maxv = -100
for i = 1 to n inclusive
set cnt1[i] to cnt1[i - 1] + a[i]
set cnt0[i] to i - cnt1[i]
for i = 1 to n inclusive
for j = i to n inclusive
if (cnt0[j] - cnt0[i - 1]) - (cnt1[j] - cnt1[i - 1]) + cnt1[n] > maxv set maxv to (cnt0[j] - cnt0[i - 1]) - (cnt1[j] - cnt1[i - 1]) + cnt1[n]
print maxv
n = integer
read n
arr = array of integers of size n
set cnt = 0
set def = -1
for i = 0 to n exclusive
read arr[i]
a, b = integers set a and b = 0
for j = i to 0 inclusive
if arr[j] = 0
increment a
else
increment b
set d = max of def and a-b
if arr[i] = 1 increment cnt
print cnt + def
the 1001th element of array a is equal to 0
let n, c be integers with c = 0
read n
for i = 0 to n exclusive
read a[i]
if a[i] is equal to 1
a[i] = -1
increment c by 1
else do the following
a[i] is equal to 1
let ans, maxx be integers with ans = a[0], maxx = a[0]
for i = 1 to n inclusive
maxx = maximum of a[i] and maxx + a[i]
ans = maximum of ans and maxx
print c + ans and newline
let n, a, count1(0), extra0(0), extra0max(-1) be integers
read n
while n is decremented by 1
read a
if a is equal to 1
increment count1 by 1
if extra0 is greater than 0 , decrement extra0 by 1
else do the following
increment extra0 by 1
if extra0 is greater than extra0max , extra0max is equal to extra0
print count1 + extra0max and newline
create int a[105], n, ans, set ans =0
read n
for i=0 to n exclusive, read a[i]
for i=0 to n exclusive
for j=0 to i inclusive
v=0
for k=0 to n exclusive
if k >=j and k<= i
set v=v+a[k]=0
else
v= v+a[k]
set ans to max of ans and v
print ans and a newline
a = int array of size 105
n, ans = int with ans = 0
read n
read n values into a
for i = 0 to n
for j = 0 to i inclusive
v = int with v = 0
for k = 0 to n
if k >= j and k <= i
increment v by not a[k]
else
increment v by a[k]
set ans to max of ans, v
print ans
create int n
read n
create vector int a(n)
cnt =0
for i=0 to n exclusive
read a[i]
if a[i] = 1
a[i] = -1
increment cnt
if a[i] = 0, a[i] = 1
set gmax = INT_MIN, lmax = 0
for i=0 to n exclusive
set lmax to lmax + a[i]
set gmax = max(gmax, lmax)
if lmax <0, lmax =0
print cnt + gmax
create ints n, a, count1(0), extra0(0), and extra0max(-1)
read n
while n-- is truthy
read a
if a is equal to 1
add 1 to count1
if extra0 is greater than 0, subtract 1 from extra0
else do
add 1 to extra0
if extra0 is greater than extra0max, set extra0max to extra0
show result of count1 + extra0max
declare constant integer N = 1e6+7
declare integer n
declare integer cnt = 0
declare integer ans = 0
read n
declare integer array a size n
for i = 0 to integer casted ( n - 1 ) inclusive
read a[i]
if a[i] is true
let a[i] be -1, increment cnt
else
let a[i] be 1
declare integer mx = INT_MIN
for i = 0 to integer casted ( n - 1 ) inclusive
increment ans by a[i]
if ans is greater than mx, let mx be ans
if ans less than 0, let ans be 0
print mx + cnt and '\n'
create ints n, a, count1(0), extra0(0), and extra0max(-1)
read n
while n-- is truthy
read a
if a is equal to 1
add 1 to count1
if extra0 is greater than 0, set extra0 to extra0 - 1
else do
set extra0 to extra0 + 1
if extra0 is greater than extra0max, set extra0max to extra0
display the result of count1 + extra0max
let a be an integer of arrays of size 1000
define function flip with takes in integers n, i, and j as arguments
let b be an integer of arrays of size 1000
iterate for n times, set b[i] to a[i] n times
let count be an integer and set its value to 0
for k = i iterate until k is less than or equal to j
if b[k] is equal to 0
set b[k] to 1
or else
set b[k] to 0
iterate for n times
if b[k] is equal to 1, increment count
return the value of count from the function
let n be an integer
read in n
read in a[i] n times
let max be an integer and set its value to -1
iterate for n times
for j = i iterate while j is less than n
let count be an integer and set its value to flip(n, i, j)
if count is greater than max, set max to count
print max
create ints n, x, one_cnt = 0, len_max = 0, and len_cur = 0
read n
for i = 0 to n exclusive
read x
if x is equal to 0
if ++len_cur is greater than len_max, set len_max is equal to len_cur
else do
if --len_cur is less than 0, set len_cur to 0
add 1 to one_cnt
display (one_cnt + (len_max == 0 ? -1 : len_max))
declare new ints n, x and mx where mx = 0, and an int array a with size 101
change a[0] to 0
read n
change i from 1 to n inclusive in a for loop
read input to x
assign a[i - 1] + x to a[i]
for integer i = 1 to n inclusive
in a for loop, change j from i to n inclusive, assigning the new value = max of a[n] + j - i + 1 - 2 * (a[j] - a[i - 1]) and mx to mx on each iteration
print mx
declare integer n
declare integer array num size 100
declare integer array a size 100
read n
declare integer count = 0
for i = 0 to n exclusive
read num[i]
if num[i] is 1
let a[i] be -1
increment count
else
let a[i] be 1
declare integer max = -2
declare integer sum = 0
for i = 0 to n exclusive
increment sum by a[i]
if sum is greater than max, let max be sum
if sum is less than 0, let sum be 0
print max + count and newline
let n, k be long integers
read n, k
let t be a long integer with t = n / k
if t modulo 2 is true
print YES and newline
else do the following
print NO and newline
declare long longs n and m
read n and m
if n / m % 2 != 0
print "YES\n"
else
print "NO\n"
create long long n, k
print n, k
if n/k is even
print NO
else
print YES
n, k, x = long long
read n then k
set x to n / k
if x is even
print "NO"
else
print "YES"
n, k = long long
read n, k
if n / k is odd
print YES
else
print NO
declare long long int variable n
create long long int k
read n
read input to k
if (n / k) is odd
print "YES"
else
print "NO"
create long longs n and k
read n and k
if (n / k) is even
print "NO"
else
print "YES"
n, k = long long
read n, k
if the result of n / k ends in a 1 in binary
print YES
else
print NO
n, k = long long
read n, k
print YES if the last bit of n / k ends in 1 else print NO
n, x =integers
Read n and x
if (n / x) modulo 2 is 0
print NO and a new line
else do the following
print YES and a new line
create long longs n and k
read input to n and k
if n / k is odd
print "YES\n"
else
print "NO\n"
n, k =integers
Read n and k
if (n / k) modulo 2 is 0
print NO and a new line
else do the following
print YES and a new line
n, k =integers
Read n and k
th = integer, set to n / k
if th is odd
print YES and a new line
else do the following
print NO and a new line
let st, cross, t_turn be long integers
read st , cross
the value of t_turn is equal to st / cross
if not t_turn & 1
print NO and newline
else do the following
print YES and newline
declare long long variables n and k
read n and k
declare long long variable count = n / k
if count is even
print "NO"
else
print "YES"
declare unsigned long long int variables k and n
read n and k
if (n / k) & 1 is not 0
print "YES"
else
print "NO"
create long long variables n and k
read n and k
print the result of ((n / k) & 1 ? "YES" : "NO")
n, k, x = long long
read n then k
set x to n / k
if x is even
print "NO"
else
print "YES"
n,k,s=long long int
while read n,k
s=n/k
if s is even
print "NO"
else
print "YES"
create long longs n, k and x
read input to n and k
assign n / k to x
if x is even
print "NO"
else
print "YES"
create long longs n, k
read n read k
if ( n / k ) % 2 is 0
print "NO" print newline
else
print "YES" print newline
n, k, x = integers
Read n and k
set x to n / k
if x is even
print NO and a new line
else do the following
print YES and a new line
declare long longs n and m
read n and m
if n / m is odd
print "YES\n"
else
print "NO\n"
declare READ with strings INPUT, OUTPUT with INPUT default "NO", OUTPUT default "NO" as arguments, returning void
if INPUT is not "NO", resuse stream stdin to open c string of INPUT in read mode
if OUTPUT is not "NO", reuse stream stdout to open c string of OUTPUT in write mode
create long longs n, k
read n read k
print "YES" if ( n / k ) % 2 is true, else "NO", print "\n"
n, k =integers
Read n and k
if (n / k) modulo 2 is 0
print NO and a new line
else do the following
print YES and a new line
create long long integers n, k, m
read n read m
set m to 2 * k
if n % m is greater than or equal to k
print "YES" print newline
else
print "NO" print newline
n, k =integers
Read n and k
if (n / k) modulo 2 is 0
print NO and a new line
else do the following
print YES and a new line
declare long longs n and k
read n and k
print "NO\n" if (((n / k) & 1LL) == 0 or "YES\n" otherwise
define integers n, k
read n, k
define integer h
set h to quotient of n, k
if h is even
print "NO" and a newline
else
print "YES" and newline
in function solve
n, k = long long int
read n then k
pre = long long int with pre = n / k
if pre is not even
print "YES"
else
print "NO"
t = long long int with t = 1
loop t times call solve
create long long n and k
read n, k
if n/k is even
print NO
else
print YES and a newline
create constant integer N = 1e5 + 10 and INF = 1e9 + 7
create long long integers n and k
read n and k
print "YES" if (n / k) % 2 is true or "NO" if not
create unsigned long longs n, k and res
read n and k
assign n / k to res
if res & 1 = 1
print "YES\n"
else
print "NO\n"
declare long long variables n, k and x
read n and k
set x to n / k
if x is even
print "NO"
else
print "YES"
n, k =integers
Read n and k
print YES if n / k bitwise and 1 is true, if ok is false print NO and a new line
declare long long int variables x, a and b
read input to a and b
change x to a / b
if x is even
print "NO"
else
print "YES"
create long longs n and m
read n and m
if n / m % 2 is true
print "YES\n"
else
print "NO\n"
create long long n, k
print n, k
set turnsDone = n / k
assign n mod k to remaining
if turnsDone mod 2 = 1
print YES and a newline
else
print NO and a newline+
create long longs n, k
read n read k
if ( n / k ) % 2 is not 0
print "YES" print newline
else
print "NO" print newline
let long long ints n and k
read n and k
if n / k modulo 2 is not equal to 0
print "YES\n"
else
print "NO\n"
create long longs n, m, green, blue, yellow, foo, foobar
read n read m read yellow read green read blue
set foobar to ( blue * 3 ) + green
set foo to ( yellow * 2 ) + green
print maximum of ( 0LL and foobar - m ) + maximum of ( 0LL and foo - n ) print newline
create long longs yc, bc, yb, gb, bb
read yc read bc
read yb read gb read bb
create long long yelo, blu
set yelo to yb * 2 + gb
set blu to 3 * bb + gb
set yelo to yelo - yc
set blu to blu - bc
if yelo is greater than or equal to 0 and blu is greater than or equal to 0
print yelo + blu print newline
else if yelo is less than 0 and blu is greater than or equal to 0
print blu print newline
else if yelo is greater than or equal to 0 and blu is less than 0
print yelo print newline
else
print 0 print newline
create long long integers y, b, ye, gr, bl, a, c, ans with ans = 0
read y read b read ye read gr read bl
set a to ( 2 * ye ) + gr
set c to ( 3 * bl ) + gr
if y - a is less than 0, increment ans by a - y
if b - c is less than 0, increment ans by c - b
print ans print newline
set a, b = 0 as large integer
read a and b
set x, y, z = 0 as large integer
read x y x
set Y, B, t = 0 as large integer
set Y = (2*x) + (1*y)
set B = (1*Y) + (3*z)
if Y > a
Y = Y - a
else
Y = 0
if B > b
B = B - b
else
B = 0
t = Y + B
print t
let a, b, x, y, z = long long
read a,b,x,y,z
let yellow = long long = 2*x+y
let blue = long long = y+3*z
res = long long = 0
if a is less than yellow, res = res + yellow - a
if b is less than blue, res = res + blue - b
print res
declare long long integer variables n, t, m and k
declare long long integer variables x, y and z
declare long long integer variables a and b
read a and b
read x, y and z
declare long long integer variables yn and bn
yn = (x * 2 + y)
declare long long integer variable dif = yn - a
declare long long integer need = 0
if dif >= 0, add dif to need
bn = (y + z * 3)
assign value of (bn - b) to dif
if dif >= 0, add dif to need
print need
let N be a constant integer set to 1e6 + 10
let mod be a constant integer set to 998244353
a, b, x, y, z, q, p, r = long longs
read a, b, x, y and z
increment q by 2 * x
increment q by y
increment p by y
increment p by 3 * z
print max(r, q - a) + max(r, p - b)
let n, m, a, b, c be long integers
let Yellow, Blue, ans be long integers
read n,m,a,b,c
Yellow is equal to a * 2 + b
Blue is equal to b + c * 3
if (Yellow is greater than n) , ans = ans + Yellow - n
if (Blue is greater than m) , ans = ans + Blue - m
print ans and newline
create long long integers a, b, x, y, z, c, d, sum
read a read b
read x read y read z
set x to x * 2 + y
set z to z * 3 + y
if a is greater than x
set c to 0
else
set c to x - a
if b is greater than z
set d to 0
else
set d to z - b
print c + d print newline
create long long a, b, x, y, z, na, nb, zer with zer = 0
read a read b read x read y read z
set na to x * 2 + y
set nb to z * 3 + y
print maximum of ( maximum of ( na - a and zer ) + maximum of ( nb - b and zer ) and zer ) print '\n'
declare long longs n and m
read n and m
let a, b and c be long longs
read a, b and c
create long long ans with value = max of 0 and b + (2 * a) - n
increase ans by max of 0 and b + (3 * c) - m
print ans and a new line
create long longs a, b
read a read b
create long longs x, y, z
read x read y read z
create long long ans with ans = 0
if y is greater than a
increment ans by y - a
set a to 0
else
decrement a by y
if y is greater than b
increment ans by y - b
set b to 0
else
decrement b by y
if x * 2 is greater than a, increment ans by x * 2 - a
if x * 3 is greater than b, increment ans by z * 3 - b
print ans print newline
create long longs a, b
read a read b
create long longs x, y, z
read x read y read z
create long longs reala, realb with reala = 2 * x + y, realb = y + 3 * z
print maximum of ( reala - a and 0ll ) + maximum of ( realb - b and 0ll ) print newline
create long longs a, b and ans, with ans = 0
read a and b
let a1, a2 and a3 be long longs
read a1, a2 and a3
decrease a by a1 * 2
decrease a by a2
decrease b by a2
decrease b by 3 * a3
if a is less than 0, increase ans by a
if b is less than 0, increase ans by b
print negative ans and a new line
;
n, m, a, b and c are long longs
declare long longs Yellow, Blue and ans
read n, m, a, b and c
Yellow = a * 2 + b
Blue = b + c * 3
if Yellow >= n and Blue >= m
increase ans by Yellow + Blue - n - m
else if Yellow < n and Blue is greater than m
increase ans by Blue - m
else if Yellow > n and Blue is less than m
increase ans by Yellow - n
print ans and a new line
create long longs i, c, a, b, x, y, z, with c = 0
read a read b read x read y read z
decrement a by x * 2
decrement a by y
decrement b by y
decrement b by 3 * z
if a is less than 0, increment c by absolute value of a
if b is less than 0, increment c by absolute value of b
print c print newline
a, b, x, y and z are long longs
read a, b, x, y and z
create long long ans = 0
if y <= a
decrease a by y
else
increase ans by y - a
assign value of 0 to a
if y <= b
decrease b by y
else
increase ans by y - b
set value of b to 0
if x * 2 <= a
decrease a by x * 2
else
increase ans by 2 * x - a
a = 0
if z * 3 <= b
decrease b by z * 3
else
increase ans by z * 3 - b
set value of b to 0
print ans and a new line
create long long integers n, m
read n read m
create long long integers x, y, z
read x read y read z
create long long integer ans with ans = 0
if n is greater than or equal to 2 * x
set n to n - 2 * x
else
increment ans by 2 * x - n
set n to 0
if m is greater than or equal to 3 * z
set m to m - 3 * z
else
increment ans by 3 * z - m
set m to 0
if n is less than y, increment ans by y - n
if m is less than y, increment ans by y - m
print ans print newline
create long longs a, b, x, y, z
read a read b read x read y read z
create long long ans with ans = 0
create long longs sy, sb
set sy to 2 * x + y - a
if sy is less than 0, set sy to 0
set sb to 3 * z + y - b
if sb is less than 0, set sb to 0
increment ans by sy + sb
print ans print '\n'
let i, c, a, v, x, y, z be long long with c = 0
read a, b, x, y and z
let a = a - x*2
let a = a - y
let b = b - y
let b = b - 3*z
if a is less than 0 set c = c+ absolute value of a
if b is less than 0 set c = c+ absolute value of b
print c and new line
a, b, ans = long longs
read a and b
x, y, z = long longs
read x, y and z
ye = long long integer set to (2 * x) + y
bl = long long integer set to y + (3 * z)
n = long long integer set to ye - a
m = long long integer set to (bl - b
if n is less than 0 set n to 0
if m is less than 0 set m to 0
set ans to n + m
print ans
declare long long variables a, b, c, d, e and ans, with ans = 0
read a, b, c, d and e
if c * 2 + d - a is greater than 0, add (c * 2 + d) - a to ans
if d + e * 3 - b is greater than 0, add (d + e * 3) - b to ans
print ans and a new line
A,B =integers
x, y, z = integers
Read A and B
Read x, y, z
yello, green, bule = integers and all set to 0
set yello to x * 2 + y
set bule to z * 3 + y
set sum1 to yello - A
set sum2 to bule - B
if sum1 is less than 0, then set sum1 to 0
if sum2 is less than 0, then set sum2 to 0
print sum1 + sum2 and a new line
declar longs A, B, x, y, z, and e to be zero
input A, B, x, y, and z
if A is less than double x plus y, increment a by x * 2 + y - A
if B is less than y plus z times 3, increment a by y + 3 * z - B
print a and endline
create long longs n, m, a, b, c, ans1, ans2 and sum, with ans1, ans2 and sum = 0
read n and m
read a, b and c
ans1 = a * 2 + b * 1
ans2 = b * 1 + c * 3
sum = ans1 - n if ans1 > n, or 0 if it is not
increase sum by ans2 - m if ans2 > m
print sum and a new line
create constant integer N with N = 1 bitshift left 20
create long longs a, b
read a read b
create long longs ye, bl, g
read ye read g read bl
create long long y1 with y1 = 2 * ye
create long long y2 with y2 = g
create long long b1 with b1 = g
create long long b2 with b2 = 3 * bl
create long longs ans1, ans2
if a is greater than or equal to y1 + y2
set ans1 to 0
else
set ans1 to absolute value of ( a - ( y1 + y2 ) )
if b is greater than b1 + b2
set ans2 to 0
else
set ans2 to absolute value of ( b - ( b1 + b2) )
print ans1 + ans2 print newline
create long longs a, b, x, y, z, q, w, with q = 0, w = 0
read a read b
read x read y read z
set q to 2 * x + y
set w to y + 3 * z
create long long ans with ans = 0
if q - a is greater than 0, set ans to q - a
if w - b is greater than 0, increment ans by w - b
print ans print '\n'
let const int maxn = 1e5 + 10
create ints a, b, c, and n
while cin >> a >> b >> c >> n is truthy
if a is less than c or b is less than c
print -1
else
let int num = (a - c) + (b - c) + c
if num is greater than or equal to n
print -1
else
print n - num
a, b, c, n = integers
read a, b, c, n
d = integer with d = a - c
e = integer with e = b - c
f = integer with f = n - d - e - c
if d >= 0 and e >= 0 and c >= 0 and f > 0
print f
else
print -1
declare long long ints a, b, c and n
read a, b, c and n
create integer temp = min of a and b
if c is greater than temp
print "-1\n"
if (a + b) - c is less than n
print n - ((a + b) - c)
else
print "-1\n"
a, b, c, n = integers
while read a, b, c, n
res = integer with res = -1
if (a <= n) and (b <= n) and (c <= n)
onlyA = integer with onlyA = a - c
onlyB = integer with onlyB = b - c
if (onlyA >= 0 and onlyB >= 0) and (onlyA + onlyB < n), res = n - onlyA - onlyB - c
if res is 0, res = -1
print res
let a, b, c, d be ints
read a, b, c, d
if a + b - c >= d or c > a or c > b
print -1
else
print d - (a + b - c)
create integers a, b, c, n, i
read a read b read c read n
if a + b - c + 1 is greater than n or c is greater than a or c is greater than b or c is greater than a + b or c is greater than n
print -1 print newline
else
print n + c - a - b print newline
let A, B, C, N be ints
read A, B, C, N
let con be a false bool
if A > N or B > N or C > N then change con to true
if C > A or C > B then set con to true
let T = A + B - C = int
if T >= N, change con to true
if con is true print -1 else print N - T
create integers a, b, c, n and sum
read a, b, c and n and loop further
set sum to a + b - c
if sum >= n or a < c or b < c
print "-1"
skip the rest of the loop
else
print n - sum
declare integers a, b, c and n
read input to a, b, c and n
declare integer x = n - (a - c + b)
if x < 1 or a < c or b < c or a > n or b > n or c > n
print "-1\n"
else
print x
flag =0
create long long ans
res = long long
create int a, b, c and n
read a, b, c and n
if c>a or c>b
set flag to 1
else
assign a + b - c to res
set ans to n - res
if flag equal to 1
print -1
else
if ans <= 0
print -1
else
print ans and a newline
create integer a, b, c, n
get a, b, c, n
if a+b-c less than n and c less than or equal to a and b then
print n+c-a-b
else do the following
print "-1\n"
create integers n, a, b, c
read a, b, c and n
if a<c or b<c
print -1
set ans to n - (a + b - c)
if ans >= 1
print ans
else
print -1
declare int variables A, B, C and N
read input to A, B, C and N
if ((A + B - C) < N) and (A >= C) and (B >= C)
print N - (A + B - C)
else
print "-1"
set INF to 0x3f3f3f3f
create int i, j, k
let n, m, t be int
create integers a, b, c, d
read a, b, c, d
if c>b or c>a
print -1
set a to a + b - c
set d = d-a
if d<1 or a<0
print -1
otherwise
print d and a newline
a, b, c, n = integers
read a, b, c, n
num = integer with num = a + b - c
t = integer with t = n - 1
if t >= num and num >= 0 and a >= c and b >= c
print t - num + 1
else
print -1
create integers a, b, c, n
read a read b read c read n
if a is greater than n or c is greater than b or c is greater than a or ( a + b - c is greater than or equal to n )
print -1 print newline
if n - a - b + c is greater than or equal to 1
print n - a - b + c print newline
else
print -1 print newline
create ints a, b, c and n
function solve that returns integer
declare int variable k = a + b - c
if c is greater than min of a and b, return -1
if k is less than 0, return -1
if n - k is less than 1, return -1
return n - k
read a, b, c and n
print the result of solve() and "\n"
a, b, c, d = int
read a then b then c then d
temp = int with temp = d - (a + b - c)
if c is greater than a or c is greater than b or a + b - c is greater or equal to d
print -1
else
print temp
create integers A, B, C and N
read A, B, C and N
if (A + B - C<= N - 1) and (A < N and B < N and C <= A and C <=B )
print N - (A + B - C)
else
print -1
create constant integer MAX with MAX = 2e5 + 5
create constant integer INF with INF = 0x3f3f3f3f
create map mp from character to integer
create map iterator it from character to integer
create integers i, j, k, n, m, a, b, c
read a read b read c read n
if a + b - c is greater than or equal to n or c is greater than a or c is greater than b
print "-1"
print n - ( a + b - c ) print newline
create long longs a, b, c and d
read a, b, c and d and loop further
declare long long ans = d - a - b + c
if ans > 0 and a >= c and b >= c
print ans
else
print -1
create integers a, b, c, n, output
read a read b read c read n
set output to n - (a + b - c)
if (a + b - c) is greater than or equal to n or c is greater than a or c is greater than b
print -1 print newline
else
print output print newline
a, b, c, n = integers
read a, b, c, n
if a < c or b < c
print -1
all = integer with all = a + b - c
if all <= n - 1
print n - all
else
print -1
a, b, c, n = int
read a then b then c then n
if (a + b - c) >= n or a < c or b < c
print "-1"
else
print n - a - b + c
create constant int N = 400000 + 10
let ints x, y, z, and n
read x, y, z, and n and while x, y, z, and n are truthy
set x to x - z
set y to y - z
let int ans = n - x - y - z
if x is less than 0 or y is less than 0 or ans is less than or equal to 0
print -1
else
print ans
declare integer variables a, b, c and n
declare integers x, y and z
read a, b, c and n and loop further
assign a - c to x
assign b - c to y
change z to x + y + c
if z >= n or a < c or b < c
print "-1"
else
print n - z
create integers a, b, c and n
loop, reading a, b, c and n from the input
create int ans = a + b - c
change ans to n - ans
if ans <= 0 or a < c or b < c
print -1
else
print ans
create integers a, b, c and n
read input to a, b, c and n
declare integer sum = a + b - c
if sum >= n or a > n or b > n or c > n or n = 0 or c > a or c > b
print -1
else
print n - sum
create int a, b, c, n
read a, b, c, n
if a less than c or b <c
print -1 and a newline
set ans to n - (a + b - c)
if ans less than 1
print -1 and a newline
else
print ans
create long long ints a, b, c, n, k
read a, b, c, and n
set k to a + b - c
set k to n - k
if k is greater than or equal to 1 and c is less than or equal to a and c is less than or equal to b
print k
else
print -1
declare ints a, b, c and d
read a, b, c and d
if a + b - c >= d or c > a or c > b
print "-1"
else
print d - (a + b - c)
create int n
read n
create vector in a(n)
mx = 0
for i=0 to n exclusive
read a[i]
mx = max of mx and a[i]
ans = 1e9
for k=mx to 1e5 inclusive
create int x and y
set x and y to 0
for i=0 to n exclusive
assign x + a[i] to x
set y = t + k - a[i]
if y greater than x
print k and a newline
declare int n
read n
sum, x and mx are integers with sum and mx = 0
for i = 0 to n exclusive
read x
add x to sum
assign max of mx and x to mx
multiply sum by 2
increment sum
print max of sum / n rounded up and mx
create integers n, ans, ma and sum, and integer array a with 105 elements
define function gets
create integer v with value 0
assign value 0 to boolean f
ch = character
read ch from the input and continue the loop if ch is not a digit
if ch = '-', set f to 1
assign value of ch - 48 to v
read ch from the input and continue the loop if ch is a digit, changing v to v * 10 + ch - 48
return -v if f is true, or v otherwise
assign result of gets() to n
for i = 1 to n inclusive, set a[i] to the result of gets(), ma to max of ma and a[i], and increase sum by a[i]
ans = sum * 2 / n + 1
ans = max of ans and ma
print ans
declare integer variable n
read n
create integer pointer a pointed to new array of integers with n elements
declare int sum = 0
declare int max
loop i from 0 to n exclusive
read input to a[i]
set sum to sum + a[i]
if i is equal to 0
set max to a[i]
else
if a[i] is greater than max, change max to a[i]
create integer f = (2 * sum / n) + 1
if f is greater than max
print f
else
print max
create int n
set mx to 0
assign 0 to sum
read n
create int a
for i=1 to n inclusive
read a
set mx to max of mx and a
assign sum + a to sum
set sum to sum*2
set sum = sum+n
sum = sum / n
print max of sum and mx
declare int variables n, i and j and int array a with 100002 elements
read n
declare int sum = 0
declare integer variable mx = - 1
for i from 0 to n exclusive
read a[i]
increase sum by a[i]
assign max of mx and a[i] to mx
looping infinitely
if mx * n - sum is greater than sum
print mx
else
increment mx
create integer n
read n
create integers sum, temp, Max with sum = 0, Max = 0
for i = 0 to n exclusive
read temp
if temp is greater than Max, set Max to temp
increment sum by temp
print maximum of ( Max and sum * 2 / n + 1 ) print newline
create int n
read input to n
create integers ans, mayor and a with ans and mayor = 0
for integer i = 0 to n exclusive
read a
set ans to ans + a
set mayor to max of mayor and a
change ans to max of (ans * 2) / n + 1 and mayor
print ans
declare long long variable n
read n
let a be long long array with size n
declare long long variable maxi = 0
declare long long sum = 0
for i = 0 and _n = n while i < _n, incrementing i
read input to a[i]
assign max of maxi and a[i] to maxi
set sum to sum + a[i]
declare long long variable k = 0
increment k while n * k <= 2 * sum
if k is less than maxi, set k to maxi
print k
let n, sum, sum1 and ans be integers with sum and sum1 = 0
read n
let ar be an array of integers of size n
for integer i = 0 to n exclusive
read ar[i]
increase sum by ar[i]
sort ar
for i = ar[n - 1], incrementing i
assign value of 0 to sum1
for j = 0 to n exclusive, increase sum1 by i - ar[j]
if sum1 is greater than sum
set value of ans to i
stop the loop
print ans
declare int variable n
read n
declare int array a with size n
create integer sum = 0
for integer i = 0 to n exclusive
read input to a[i]
add a[i] to sum
create int k = (2 * sum) / n + 1
sort a
if k >= a[n - 1]
print k
else
print a[n - 1]
n = integer
read n
arr = integer vector of size n
max = maximum integer value, sum = integer = 0
for i = 0 to n exclusive
read arr[i]
sum = sum + arr[i]
if max < arr[i], then max = arr[i]
if n * max > 2 * sum
print max
else
if (2 * sum) modulo n is 0
print the result of (2 * n) / n + 1
else
print the result of (2 * sum) / n rounded up to the next whole number
n = integer
read n
pointer location of d = integer array of size n
k = integer = 0, s = integer = 0
for i = 0 to n exclusive
read d[i]
s = s + d[i]
k = the highest value betweek k and d[i]
sum = integer = 0
do
sum = 0
for i = 0 to n exclusive
increase k by 1
while sum <= s
print the result of k - 1
create integers n, s, k with s = 0, k = 0
read n
for i = 1 to n inclusive
create integer a
read a
set k to maximum of k and a
increment s by a
for n * k is less than or equal to 2 * s, incrementing k
end statement
print k print '\n'
n, sum, ans = int with sum = 0 and ans = 0
read n
arr = int array of size n
for i = 0 to n
read arr[i]
increment sum by arr[i]
sort arr
for i = 0 to n - 1 increment ans by -arr[i] + arr[n - 1]
loop infinitely
if ans is greater than sum then break
increment ans by n
increment arr[n - 1]
print arr[n - 1]
create integer n
read n
create integer vector arr initialized with ( n + 5 )
create integer max_val with max_val = 0
create long long sum with sum = 0
for i = 0 to n exclusive
read arr[i]
set max_val to maximum of ( max_val and arr[i] )
increment sum by arr[i]
create integer i with i = max_val
for i is less than 10000, incrementing i
create long long val with val = i * n - sum
if val is greater than sum, break loop
print i print newline
define integers n, i, sum, max1, ans, sum1, i1, and j, setting sum and max1 to 0
read into n
define integer array a to be of n + 2 elements
for i from 0 to n (exclusive) by 1
read into a[i]
increment sum by a[i]
set max1 to max. of max1, a[i]
for j from max1 to max1 * 2 + 2 by 1
zero sum1
for i1 from 0 to n (exclusive) by 1, increment sum1 by j - a[i1]
if sum1 > sum
assign j to ans
break out
print ans and newline
n, i, j, k1, k, suma, sumb = int with k = 0 and suma = 0 and sumb = 0
read n
a = int array of size n
for i = 0 to n
read a[i]
if a[i] is greater than k then set k to a[i]
increment suma by a[i]
for i = 0 to n increment sumb by k - a[i]
for i = 0
if sumb is less or equal to suma
set sumb to 0
increment k
for j = 0 to n increment sumb by k - a[j]
else
break
print k
declare an array of integers value with size 101
declare integers n, k and sum where sum = 0 and k = -1
read input to n
for integer i = 0 to n exclusive
read value[i]
add value[i] to sum
if value[i] is greater than k, set k to value[i]
while k * n - sum <= sum, increment k
print k
create integer n
read n
create integer array a with size n, create integer sum with sum = 0
for i = 0 to n exclusive
create integer k
read k
set a[i] to k
set sum to sum + a[i]
create integer lar with lar = a[0]
for i = 1 to n exclusive
if lar is less than a[i], set lar to a[i]
for j = lar, incrementing j
if j * n is greater than ( 2 * sum )
print j print newline
break loop
create integer n, create integer array a with size 200
read n
create integers sum1, k, with sum1 = 0, k = 0
for i = 0 to n exclusive
read a[i]
increment sum1 by a[i]
set k to maximum of k and a[i]
create integer flag with flag = 0
while not flag
create integer sum2 with sum2 = 0
for i = 0 to n exclusive, increment sum2 by k - a[i]
if sum2 is greater than sum1
set flag to 1
else
increment k
print k print newline
declare long long const mod = 1e9 + 7
power is a long long function with long long arguments x, y and mod
declare long long variable ans = 1
x = x modulo mod
while y
if y & 1 != 0, assign (x * ans) % mod to ans
set x to (x * x) % mod
y = y >> 1
return ans
gcd is a long long function with long long arguments a and b
if a = 0, return b
return gcd(b % a, a)
declare long long variables n, id1 and id2
read n, id1 and id2
create string second
read input to second
if second[id1 - 1] is equal to second[id2 - 1]
print 0
else
print 1
create integers n, a, b
create string s
create integer ans
read n read a read b read s
if s[a-1] is s[b-1]
set ans to 0
else
set ans to 1
print ans print '\n'
create const int inf = 0x3f3f3f3f
let ints n, a, and b
read n, a, and b
create string s
read s
if s[a - 1] is equal to s[b - 1]
print 0
create int set st
let char ch = ' '
create int pos = 0
for i = 0 to size of s exclusive
if ch is equal to ' '
set ch to s[i]
continue to next loop iteration
if s[i] is equal to ch
set pos to i
else
insert i - pos into set st
set pos to i
set char to s[i]
print *st.end()
declare an array of booleans vis with size 200005
declare int arrays cnt and freq with 200005 elements
declare integers n, a and b
read input to n, a and b
declare string s
read s
if s[a - 1] = s[b - 1]
print "0"
else
print "1"
declare integers n, a and b
create string s
read n, a, b and s
decrement a
decrement b
if s[a] != s[b]
print 1
else
print 0
create integers n, a and b
read n, a and b
declare an array of chars arr with size n + 2
read n elements into arr
if arr[a - 1] = arr[b - 1]
print 0
else
print 1
create string s
create int n, a and b
read n, a, b and s
if a equal to b or s[a - 1] = s[b - 1]
print 0
else
print 1 and a newline
n, a, b = integers
s = string
read n, a, b
decrement a, decrement b
read s
if s[a] is s[b]
print 0
else
print 1
declare ints n, ans, a and b; create arrays of ints be and af with 100001 elements
declare string s with value
read variables n, a, b and s from the input
if s[a - 1] is equal to s[b - 1]
print 0
else
print 1
declare integers n, a and b
read input to n, a and b
declare character array aN with size 100000
read aN
if aN[a - 1] != aN[b - 1]
print 1
else
print 0
create integer array num with size 1000000 with num = {0}
declare fx with character array a as argument, returning void
create integers n, a, b
create character array z with size 1000000
read n read a read b
read z
if z[a-1] is z[b-1]
print "0" print newline
else
print "1" print newline
create integers n, a and b
create string s
declare int variable ans
read n, a, b and s
if s[a - 1] = s[b - 1]
set ans to 0
else
set ans to 1
print ans and '\n'
declare const int maxn = 1e6 + 6
create ints n, a and b
declare an array of integers arr with size maxn
declare int variable len = 0
declare string variable str
read input to n, a and b
read input to str
loop i from 1 to n inclusive, assign str[i - 1] to arr[i]
if arr[a] is equal to arr[b]
print "0"
else
print "1"
define vector VI, VI2, VI3, VI4
define n, m, f, t, a, b as integers
define s as string
read n, a, b, s
print abs(s[--a] - s[--b])
create integers n, a, b
create string s
read n read a read b read s
if s[a-1] is s[b-1]
print 0 print "\n"
else
print 1 print "\n"
s = string
n, m, k = int
read n then m then k
read s
prepend '#' to s
print 1 if s[m] is not s[k] else print 0
define integral constant maxn to be 1e6 + 6
define integers n, a, b
define maxn-element int array arr
define int len, set to zero
define string str
read n, a, and then b
read str
for int i from i to n by 1, assign str[i - 1] to arr[i]
if arr[a] is arr[b]
print "0" and newline
otherwise
print "1" and a newline
create string s
create integers n, a, b
read n read a read b read s
if a is b or s[a-1] is s[b-1]
print "0" print newline
else
pirnt "1" print newline
create integers a, b, n
create string s
read n read a read b read s
decrement a
decrement b
print ((s[a] - '0') ^ (s[b] - '0')) print newline
create constant long long int mod = 998244353
create const long long int inf = 2e18
let const int maxn = 200005
let const int maxa = 300005
declare gcd taking in long long ints a and b and returning long long
return gcd(b, a % b) if b is truthy or a if not
declare powmod taking in long long ints a and b and returning long long
let long long in res = 1
set a to a % mod
if b is less than 0, return -1
loop until b is falsy
if b & 1 is truthy, set res to res * a % mod
set a to a * a % mod
return res
let int INF = 10000000
let int T
create ints n, m, l, r
create int ans = 0
create string str
read n, l, and r
create str
let int array a of size maxn
for i = 0 to n exclusive, set a[i + 1] to str[i] - '0'
if a[l] is equal to a[r], return the result of 0 * puts("0")
print "1"
let n, a, b be integers
let str be a string
read n, a and b
read str
print the absolute value of str[a-]-'0' - str[b-1]+'0'
locale loc
declare int variables n, s and e
read input to n, s and e
declare string variable str
read str
if str[s - 1] = str[e - 1]
print 0 and "\n"
else
print 1 and "\n"
declare ints n, a and b
read n, a and b
declare integer variables i and val
declare vector of integers called v with size n + 1
declare string variable s
read input to s
for i from 0 to n exclusive
if s[i] is equal to '1'
set v[i + 1] to 1
else
assign 0 to v[i + 1]
declare int variable aa = min of a and b
declare int variable bb = max of a and b
declare int j
create int count = 0
loop i from aa while i <= bb
if v[i] = 0
declare integer variable index = i
for j = i to bb inclusive
if v[j] = 0, set index to j
if index = bb, break the loop
if index != bb
change i to index + 1
increment count by one
else
create integer index = i
for j from i to bb inclusive
if v[j] is equal to 1, assign j to index
if index is equal to bb, break
if index != bb
set i to index + 1
increment count by one
print count
declare ints n, a and b
read input to n, a and b
declare string s
read input to s
if s[a - 1] is equal to s[b - 1]
print 0
else
print 1
let n, a, b be integers
let s be a string
read n, a, b
read s
if s[a - 1] is equal to s[b - 1]
print 0 and newline
else do the following
print 1 and newline
let a be a string
let n be a integer
read a
read n
the 26th element of integer array kiek is equal to 0
if length of a is less than n
print impossible and newline
for i = 0 to length of a exclusive , increment kiek[a[i] - a] by 1
let k be a integer with k = 0
for i = 0 to 26 exclusive
if kiek[i] >= 1 , increment k by 1
if k is less than n
print n - k and newline
else do the following
print 0 and newline
semicolumn
declare new string s
read input to s
k is a new integer
read input to k
create new integer called cnt with value 0
if k is greater than length of s
print "impossible"
else
create new integer exrt
create new array of integers freq with size 30 filled with 0
for i from 0 to length of s exclusive incrementing i
assign the new value = (s[i]) - 96 to exrt
increment freq[exrt] by one
in a for loop, change i from 0 to 30 exclusive
increment cnt if freq[i] != 0
if k <= cnt
print "0" to the standard output
else
print k - cnt
create constant long long integer INF = (1LL << 60) - 1
new const long long integer MAX = 998244353
fast_exp is a long long int function with long long int arguments base, exp and m
declare long long integer variable res = 1
while exp > 0
if exp is odd, assign (res * base) % m to res
change the value of base to base squared % m
divide exp by 2
return res modulo m
s is a new string
declare integers k and cnt with cnt = 0
read variables s and k from the input
freq is a new array of integers with 26 elements filled with 0
declare integer n with value length of s
start for loop from i = 0 to n exclusive, incrementing freq[s[i] - 'a']
in a for loop, change i from 0 to 26 exclusive incrementing i
if freq[i] is not 0, increment cnt by one
if cnt >= k
print 0
if n is less than k
print "impossible"
print k - cnt
declare string s
read s
declare integer n
read n
if n is greater than integer casted size of s
print "impossible\n"
else
print maximum of ( o and n - size of integer casted character set initialized with ( beginning of s to end of s )), '\n'
create string a
create int s, num, p[1001]
read a and s
if size of a < s
print impossible
for i=0 to size of s exclusive
if p[a[i]]=0, increment ans
set p[a[i]] = 1
print max of 0 and s-m
str = string
read str
k = long long integer
read k
freq = long long integer array of size 27, freq[0] = 0
if k > size of str
print impossible
else
for i = 0 to size of str exclusive, then increase by 1 freq[str[i] - a + 1]
count = long long integer = 0
for i = 1 to 26 inclusive
if freq[i] is not 0, then increase count by 1
if count >= k
print 0
else
print k - count
print endline
declare constant integer maxn = 3e5 + 5
declare integer array a size 50 = {}
declare string s
declare integer k
read s and k
for i = 0 to length of s exclusive, increment a[s[i]-'a']
declare integers sum = 0, cnt = 0
for i = 0 to 30 exclusive
if a[i] is greater than 0, increment cnt
increment sum by a[i]
if sum is less than k, return print "impossible", 0
if cnt is greater than or equal to k, return print "0", 0
print k - cnt and newline
declare constant integer inf = 0x3f3f3f3f
declare constant integer mod = integer casted 1e9 + 7
declare constant integer maxn = integer casted 1e5 + 5
declare integer array vis size 30
declare string s
read s
declare integer len = size of s
declare integer n
read n
if n is greater than len, return 0 * print "impossible"
for i = 0 to len exclusive, increment vis[s[i] - 'a']
declare integer cnt = 0
for i = 0 to 26 exclusive
if vis[i], increment cnt
if cnt is greater than or equal to n
print "0"
else
print n - cnt and newline
s=string
k=int, cnt=array of 26 int filled with 0
read s,k
if length of s < k
print "impossibile"
print newline
else
for i=0 to length of s exclusive increment cnt[s[i]-97]
res=0
for i=0 to 26 exclusive
if cnt[i] increment res
print max(0, k-res)
declare integer k
declare string s
read s and k
if size of s is less than k, return print "impossible\n", 0
sort from beginning of s to end of s
resize s to size ( remove all duplicates but one from ( beginning of s to end of s ) - beginning of s )
print maximum of ( k - integer casted size of s and 0 ) and newline
declare integers n, num, ans
declare string str
read str
read n
if size of str is less than n
print "impossible\n"
for i = 0 to 26 exclusive
if first index of 'a' + i in str is not -1, increment num
print maximum of ( n - num and 0 ) and "\n"
create constant integer N with value 2e6 + 5
long long function power with long long arguments x and p and unsigned long long argument y
create new long long variable res with value 1
assign x modulo p to x
while y > 0
if y & 1 is not 0, change res to (res * x) % p
assign the new value = y to y
change x to (x * x) % p
return res
declare new long long variables i and j
declare string variable with name s
create new long long k
read s and k from the input
if k is greater than length of s
print "impossible" and '\n' to the standard output
else
temp is a set of unique characters
for i = 0 to length of s exclusive
insert s[i] into temp
if length of temp = k
print 0 and '\n'
print k - length of temp and '\n'
declare string s
declare integer k
read s and k
if k is greater than size of s
print "impossible\n"
sort from beginning of s to end of s
remove from ( remove all but first of ( beginning of s to end of s ) ) to end of s from s
print maximum of ( k - integer casted size of s and 0 ) and newline
let N, K, ans , val, x, y be integers with ans = 2e9 , A = array of integers of length 26
let T, S be strings
read S, N
if length of S is less than N
print impossible and newline
for integer i = 0 to length of S exclusive
increment A[S[i] - a] by 1
if A[S[i] - a is equal to 1 , increment val by 1
print maximum of 0, N - val and newline
create new int k and an array of ints haSh with 30 elements
declare string variable s
read standard input to s and k
if k is greater than length of s
print "impossible"
start for loop from i = 0 to length of s exclusive
if haSh[(s[i] - 'a')] is false
change haSh[s[i] - 'a'] to 1
decrement k by one
if k <= 0
print 0
else
print k
declare string variable with name s
k is a new integer
read standard input to s and k
ms is a set of unique characters
insert all elements of s into ms
if length of s is less than k
print "impossible"
else
if length of ms is less than k
print k - length of ms
else
print 0 to the standard output
create new constant integer INF = 0x3f3f3f3f
declare integer constant mod with value 998244353
create new string s
declare integers k and cnt and an integer array vis with 26 elements
read s and k from the input
if length of s is less than k
return puts("impossible"), 0
else
in a for loop, change i from 0 to length of s exclusive
if vis[s[i] - 'a'] is equal to 0
set the value of vis[s[i] - 'a'] to 1
increment cnt
if cnt >= k
print 0
else
print k - cnt
create new strings input and insertion
create new integers unique and inputLength with inputLength = 0
read input and unique from the input
assign the new value = length of input to inputLength
if inputLength is less than unique
print "impossible"
else
create new set of unique strings called inputs
start for loop from i = 0 to inputLength exclusive
change the value of insertion to input[i]
insert insertion to the inputs
if unique is greater than length of inputs
print unique - length of inputs
else
print 0
maxn = constant integer = 3e5 + 5
a = integer array of size 50
s = string
k = integer
read s, k
for i = 0 to length of s, then increase a[s[i] - a] by 1
sum = integer = 0, cnt = integer = 0
for i = 0 to 30 exclusive
if a[i] > 0, then increase cnt by 1
sum = sum + a[i]
if sum < k, then print impossible then end execution of code
if cnt >= k print 0 then end execution of code
print k - cnt
let n, pre, cur, nex, sum be integers, let sum = 0
read n
if n equals 1 or 2, return and print 0
read pre, cur
subract 2 from n
while n > 0
read nex
if cur > pre && cur > nex or cur < pre && cur < nex, add one to sum
let pre = cur
let cur = nex
print sum
declare integer variable n
read n
create vector of integers a with size n
read n elements from the user input and out them into a
ans is a new integer with value 0
start a loop from i = 1 to n - 1 exclusive
if (a[i] - a[i - 1]) * (a[i] - a[i + 1]) is greater than 0, increment ans
print ans
declare integers n, c = 0
declare integer vector v
read n
for i = 0 to n exclusive
declare integer a
read a
add a to end of v
for i = 1 to n - 1 exclusive
if v[i] is greater than v[i+1] and v[i] is greater than v[i-1]
increment c
else if v[i] is less than v[1+i] and v[i] is less than v[i-1]
increment c
print c and newline
create int a[1005]
create int n, set ans to 0
read n
for i=0 to n exclusive, read a[i]
for i=1 to n-1 exclusive
if a[i] > a[i - 1] and a[i] > a[i + 1], increment ans
if a[i] < a[i - 1] and a[i] < a[i + 1], increment ans
print ans
create int n, a[1001]
read n
for i=1 to n inclusive, read a[i]
ans=0
for i=2 to n exclusive
if a[i] > a[i + 1] and a[i] > a[i - 1]
increment ans
continue
if a[i] < a[i + 1] and a[i] < a[i - 1], increment ans
print ans
maxsum, minsum, a, n = integers with a = array of size 1005
read n
for i = 1 to n, read a[i]
foe i = 2 to n exclusive
if (a[i] > a[i - 1] and a[i] > a[i + 1]), increment maxsum
if (a[i] < a[i - 1] and a[i] < a[i + 1]), increment minsum
print maxsum + minsum
declare long long integer n
read n
declare long long integer array a size n + 1 = {0}
for i = 1 to n inclusive, read a[i]
declare long long integers c = 0, d = 0
for i = 2 to n exclusive
if a[i] is greater than a[i-1] and a[i] is greater than a[i+1] or a[i] is less than a[i-1] and a[i] is less than a[i+1], increment c
print c and newline
g = 9.8
set mod = 1000000007
create int n, i, j, k, ans
set x = 1e5
create long long a[x]
create int i, j, k, m, n, t
read t
for i=0 to t exclusive, read a[i]
num=0
for i=1 to t-1 exclusive
if a[i] > a[i - 1] and a[i] > a[i + 1], increment num
if a[i] < a[i - 1] and a[i] < a[i + 1], add 1 to num
print num
make constant integer maxn = 1e5 + 5
make const double esp = 1e-8
declare inline read returning integer
make int X = 0 and w = 0
let char ch = 0
while ch is not a digit
set w to w | ch == '-'
read ch
while ch is a digit, set X to X << 3) + (X << 1) + (ch ^ 48) and ch to getchar()
return -X if w is truthy or X if not
make long long int array a of size maxn
make integer n
read n
for i = 1 to n, read a[i]
create integer num = 0
for i = 1 to n - 1
if a[i] is greater than a[i + 1] and a[i] is greater than a[i - 1] or a[i] is less than a[i - 1] or a[i] is less than a[i - 1] and a[i] is less than a[i + 1], increment num
output num
create ints n, l, mid, r, and now
read n
make integer ans = 0
read l
if n is greater than or equal to 1
end statement
if n is greater than or equal to 2, read mid
if n is greater than or equal to 3
set n to n - 2
while n-- is truthy
read r
if mid is less than 1 and mid is less than r
set ans to ans + 1
else if mid is greater than 1 and mid is greater than r
set ans to ans + 1
set l to mid
set mid to r
output ans
create int a[1002], n, i, set ans to 0
read n
for i=1 to n inclusive, read a[i]
for i=2 to n exclusive
if a[i] > a[i + 1] and a[i] > a[i - 1]
increment ans
else if a[i] < a[i + 1] and a[i] < a[i - 1]
increment ans
print ans
a = long long array length 1001
let n, ans = 0 be long long
read n
read the first n elements of a
for long long i = 1 to n-1 exclusive
if a[i] > a[i-1] and a[i] > a[i+1] then increment ans
if a[i] < a[i-1] and a[i] < a[i+1] then increment ans
print ans
let n and ans be integers, set ans to 0
read in n
let a be an array of integers of size n
read in n values into a
for i = 1 to n -1
if a[i] > a[i - 1] and a[i] > a[i + 1] or a[i] < a[i - 1] and a[i] < a[i + 1], increment a
print ans and a newline
read in n
create int n, set c to 0
read n
create int a[n + 2]
for i=0 to n exclusive, read a[i]
for i=1 to n-1 exclusive
if a[i] < a[i - 1] and a[i] < a[i + 1]
increment c
else if a[i] > a[i - 1] and a[i] > a[i + 1]
increment c
print c
let gcd be a function which accepts long integers a and b and returns a long integer
return a if (not b) else return gcd of b and a modulo b
let lcm be a function which accepts long integers a and b and returns a long integer
return the value of (a / gcd of a and b) * b
let dix be an integer array with elements as 1, -1, 0, 0, 1, 1, -1, -1
let diy be an integer array with elements as 0, 0, 1, -1, 1, -1, 1, -1
let n be a integer
read n
create a vector of integers v and size n
the integer value of res = 0
for i = 0 to n exclusive , read v[i]
for i = 1 to n - 1 exclusive
if v[i] is greater than v[i - 1] and v[i] is greater than v[i + 1] , increment res by 1
for i = 1 to n - 1 exclusive
if v[i] is less than v[i - 1] and v[i] is less than v[i + 1] , increment res by 1
print res and newline
semicolumn
n = integer
while read n
a = integer array of size 1005
for i = 0 to n exclusive, read a[i]
num = integer with num = 0
for i = 1 to n - 1 exclusive
if (a[i] > a[i - 1] and a[i] > a[i + 1]), increment num
if (a[i] < a[i - 1] and a[i] < a[i + 1]), increment num
print num
n = int
read n
arr = int array length n
read the first n elements of arr
sol = 0 = int
for i = 1 to n - 1exclusive
if ((arr[i] - arr[i - 1]) * (arr[i] - arr[i + 1])) is stricly positive then increment sol
print sol
r =integer
while reading values r
sum = integer with 0
a = array of 1001 integers with 0 elements
Read r values into array a
for i = 1 to r - 1 exclusive
if a[i] is less than a[i - 1]
if a[i] is less than a[i + 1]
increment sum
else do the following
do nothing
else if a[i] is greater than a[i - 1]
if a[i] is less than a[i + 1], then increment sum
print sum and new line
let n, i, extrema = 0, arr[1000 + 5] be ints
read n
for i = 0 to n exclusive increment i first, read arr[i]
for i = 1 to n-1 increment i first
if arr[i] > arr[i-1] and arr[i] > arr[i+1]
increment first extrema
else if arr[i] < arr[i - 1] and arr[i] < arr[i + 1]
increment first extrema
print extrema
return 0
let n be a integer
read n
let *elements be a integer with *elements = new int[n]
for i = 0 to n exclusive , read elements[i]
the integer value of count = 0
for i = 1 to n - 1 exclusive
the integer value of prev = elements[i - 1]
the integer value of cur = elements[i]
the integer value of next = elements[i + 1]
if (cur is less than prev and cur is less than next) or (cur is greater than prev and cur is greater than next) , increment count by 1
print count and newline
declare new ints n and k and an int array a with size 1005
read n and loop further
change k to 0
read n elements into a in a loop
for i from 1 to n - 1 exclusive incrementing i
increment k if a[i] > a[i - 1] and a[i] > a[i + 1] or a[i] < a[i - 1] and a[i] < a[i + 1]
print k to the standard output
n, a = ints with a an int array of length 1020
i = int
read n
read the first n elements of a
cnt = 0 = int
for i = 1 to n - 1 exclusive
if a at i > a at i - 1 and a at i > a at i + 1 then increment cnt
if a[i] < a[i - 1] and a[i + 1] > a[i] then increment cnt
print cnt
make ints n and c = 0
make integer vector a of size 1000
read n
for i = 0 to n exclusive, read a[i]
for i = 1 to n - 2
if a[i - 1] is greater than a[i] and a[i + 1] is greater than a[i], add 1 to c
if a[i - 1] is less than a[i] and a[i + 1] is less than a[i], increment c
show c
create integer n
read n
v = array of integers of size n
read n integers into array v
create integer ans = 0
for q=1 to n-1 exclusive
if v[q] > v[q-1] and v[q] > v[q+1] then
increment ans
else if v[q] < v[q-1] and v[q] < v[q+1] then
increment ans
print ans and newline
declare constant integer maxn = 1e4 + 10
a is a new array of integers with size maxn
create integer variable n
declare new integer cnt = 0
read variable n from the input
start a loop from i = 1 to n inclusive, and read a[i] from the input on each loop
in a for loop, change i from 2 to n - 1 inclusive incrementing i
if a[i] > a[i - 1] and a[i] > a[i + 1] or a[i] < a[i - 1] and a[i] < a[i + 1], increment cnt
print cnt
create string s
read s
create character stack st
for i = 0 to size of s exclusive
if st is empty
add element s[i] to top of st
else if top of st is s[i]
remove element from top of st
else
add element s[i] to top of st
create string tmp with tmp = ""
while st is not empty
increment tmp by top of st
remove element from top of st
reverse element order between beginning of tmp and end of tmp
print tmp print "\n"
create character stack chars
create string str
read str
create character ch
for i = 0 to str[i] is not '\0', iincrementing i
set ch to str[i]
if chars is not empty
if top of chars is ch
remove element from top of chars
else
add element ch to top of chars
else
add element ch to top of chars
create character vector result
while chars is not empty
add element top of chars to end of result
remove element from top of chars
for i = size of result - 1 to 0 inclusive, decrementing i, print result[i]
print "\n"
OO = const long long with OO = 1e8
o_o = const integer with o_o = 0
EPS = double with EPS = double epsilon numeric_limits
MAX = integer const with MAX = 2 * 100000 + 9
ar = character array of size MAX
co = integer with co = -1
in the function inzlition
for i = 0 to MAX exclusive, ar[i] = 0
text = string
read text
call inzlition
co = -1
for i = 0 to text.size() exclusive
if co is -1
increment co
ar[co] = text[i]
else if text[i] is ar[co]
ar[co] = 0
decrement co
else
increment co
ar[co] = text[i]
for j = 0 to co, print ar[j]
print next line
declare string s
create vector of characters a
read input to s
declare long int n = length of s
loop i from 0 to n exclusive
if a is empty
push s[i] into a
else if last element of a is not s[i]
push s[i] into a
else
remove last element from a
for i = 0 to length of a exclusive print a[i]
print a new line
create string s
read s
create integer i with i = size of s - 1
while i is greater than 0
if s[i] is s[i-1], erase from i - 1 to length 2 from s
decrement i
print s print "\n"
x = integer with x = 0
s2 = string
read s2
for i = s2.length() - 2 down to 0
if s2[i] is s2[i + 1], erase(i, 2) from s2
print s2
Let s be a string
Read s
Create integer l and set it to length of s
for i = 1 to l exclusive
if s[i] equals s[i - 1]
erase characters i-1 and i from s
set i = i - 2
Print s
str = string
read str
size = int with size = size of str
s = char stack
push str[0] to s
for i = 1 to size if s is not empty and str[i] is top of s then pop s else push str[i] to s
ans = string with ans = ""
loop while s is not empty
append top of s to ans
pop s
reverse ans
print ans
create constant integer maxn with maxn = 2 * 1e5 + 10
create character stack s
create string array maxn
while s is not empty, remove element from top of s
create integer len
read string into str + 1
set len to string length of str + 1
for i = len to 1 inclusive, decrementing i
if not size of s
add element str[i] to top of s
else
if top of s is str[i]
remove element from top of s
else
add str[i] to top of s
while s is not empty
print top of s
remove element from top of s
print newline
create characters stack s
declare string f
read input to f
for i from 0 to length of f exclusive
if s is empty
push f[i] to s
else
if f[i] = top element of s
remove top element of s
else
push f[i] to s
declare string variable t = ""
while s is not empty
add top element of s to t
remove top element of s
loop i from length of t - 1 to 0 inclusive counting down, print t[i]
print
create string s
read s
create character stack c
for i = 0 to size of s exclusive
if c is not empty and top of c is s[i]
remove element from top of c
else
add element s[i] to top of c
create string a
create integer y with y = size of c
while c is not empty
increment a by top of c
remove element from top of c
for i = y - 1 to 0 inclusive, decrementing i, print a[i]
print newline
create constant integer N with N = 1e5 + 5
create constant integer inf with inf = 1e9
create constant long long INF with INF = 1e18
create constant double PI with PI = acosign of -1.0
create constant double EPS with EPS = 1e-8
create constant integer MOD with MOD = 1000000007
create string s
read s
create character stack st
for i = 0 to size of s exclusive
if st is empty
add element s[i] to top of st
else
if st is not empty and top of st is s[i]
while st is not empty and top of st is s[i], remove top of st
else
add element s[i] to top of st
create string ans with ans = ""
while st is not emtpy, increment and by top of st, remove top element from st
reverse element order from beginning of and to end of ans
prnt ans print newline
declare string a
create int i
read a
loop i from length of a to 0 inclusive decrementing i
if a[i] = a[i + 1], remove 2 elements at the index i of a
print a
create string s
get s
create character array stack with size of s
create long integer j with j=0
for integer i=0 to size of s exclusive
if j is equal to 0 then
set stack[j] to s[i] and increment j
else if stack[j-1] not equal to s[i] then
set stack[j] to s[i] and increment j
else do the following
decrement j
for i=0 to j exclusive print stack[i]
print a new line
maxn = const int with maxn = 200010
str = char array of size maxn
loop while reading str
j, len = int with j = 1 and len = strlen of str
for i = 1 to len
if str[i] is str[j - 1]
decrement j
set str[j] to '\0'
else
set str[j] to str[i] then increment j
set str[j] to '\0'
print str
create stack of chars st
declare string s
read input to s
for i = 0 to length of s exclusive
if st is not empty and top element of st is not s[i]
remove top element of st
else
push s[i] into st
set s to ""
while st is not emptu
increase s by top element of st
remove top element of st
loop i from length of s - 1 to 0 inclusive decrementing i, printing s[i]
print a new line
s = string
read s
for i = s.size() - 2 down to 0
if s[i] is s[i + 1], erase(i, 2) from s
print s
s = string array
read s
for i = (s.length() - 1) to greater than or equal to 0 do the following
if s[i] is s[i + 1] then do the following s.erase(i, 2)
output s
declare const int INF = 1e9 + 7 casted to int
create string s
read s
p is a stack of chars
loop a from 0 to length of s exclusive
if p is empty
push s[a] into p
else
if top element of p = s[a]
remove top element from p
else
push s[a] into p
assign "" to s
while p is not empty
append top element of p to s
remove top element from p
reverse s
print s
create string s
read s
create character stack st
for i = 0 to size of s exclusive
if st is not empty and s[i] is top of st
remove element from top of st
else
add element s[i] to top of st
set s to ""
while st is not empty
increment s by top of st
remove top element from st
for i = size of s - 1 to 0 inclusive, decrementing i, print s[i]
print newline
make string str
read str
let ints pearls = 0 and links = 0
for i = 0 to str.size() exclusive
if str[i] is equal to 'o'
increment pearls
else do
add 1 to links
if pearls is equal to 0 or links is equal to 0
print "YES"
if (links % pearls) is not equal to 0
show "NO"
otherwise
display "YES"
maxn=110
inf=3fffffff in exadecimal
s=array of maxn char
s = string
read s
cnt1,cnt2=0
for i=0 to size of s exclusive
if s[i] is 'o'
increment cnt1
else
increment cnt2
if cnt1 is 0
print YES
else
if cnt2 modulo cnt1 is 0
print YES
else
print NO
declare character array s size 106
while read string into s
declare integers a = 0, b = 0, ll = string length of s
for i = 0 to ll exclusive
if s[i] is '-'
increment a
else if s[i] is 'o'
increment b
if b is 0 or a % b is 0
print "YES"
else
print "NO"
declare string s
read s
declare integers z = 0, x = 0
for i = 0 to length of s exclusive
if s[i] is 'o', increment z
if s[i] is '-', increment x
if z is 0 or x is 0 or x % z is 0
print "YES" and newline
else
print "NO" and newline
create chars zhu and xian and char array s of size 243554
read s
make int len = strlen(s)
for i = 0 to len exclusive
if s[i] is equal to '0'
increment zhu
else do
increase xian by 1
if zhu is equal to 0
print "YES"
else if xian modulo zhu is 0
print "YES"
else
print "NO"
maxn = 110 = int const
inf = 0x3f3f3f3f = const int
s = char array of length maxn
s = string
read s
cnt1 = cnt2 = 0 = int
for i = 0 to size of s
if s at i is 'o'
increment cnt1
else
increment cnt2
if cnt1 = 0
print YES
else
if cnt2 mod cnt1 is 0
print YES
else
print NO
s = string
read s
x = 0 = int
for i = 0 to length of s
if s[i] = 'o' then increment x
if x = 0
print YES and new line
else
if length of s mod x = 0
print YES
else
print NO
declare new string called s
create ints p and l = 0
read from the input to s
for integer i = 0 to length of s exclusive
if s[i] = '-'
increment l by one
else
increment p
if p = 0 or l % p = 0
print "YES"
else
print "NO"
s = string
j, k =integers, both set to 0
Read s
for i = 0 to length of string s exclusive
if s[i] is -
increment j
else do the following
increment k
if k is equal to 0
print Yes and a new line
else if j modulo k is 0
print Yes and a new line
else do the following
print NO and new line
set INF to 0x3f3f3f3f
create char s[1005]
create int i, j and k
create int n and m
read s
set cou and co to 0
for i=0 to length of s exclusive
if s[i] = o
increment cou
else
increment co
if cou =0
print YES
if co < cou and > 0
print NO
else
if co mod cou =0
print YES
else
print NO
x , o =integers with x = 0, o = 0
n =string
Read n
for i = 0 to length of string t exclusive
if n[i] is o
increment o
else do the following
increment x
if o is greater than 0
if x modulo o is 0
print YES and a new line
else do the following
print NO and a new line
else do the following
print YES and a new line
set char to S[101]
set pearls and dash to 0
read S
for i=0 to S[i]
if S[i] = -
increment dash
else
increment pearls
if pearls=0 or dash mod pearls =0
print YES and a newline
else
print NO and a newline
len, n1, n2 = long long integers
s = array of 105 characters
Read s
set len to length of string s
for i = 0 to len exclusive
if s[i] is o
increment n1
else if s[i] is -
increment n2
if n1 is 0
print YES and a new line
else if n2 modulo n1 is 0
print YES and a new line
else do the following
print NO and a new line
count , p, i, n =integers with count = 0, p = 0
a =string
Read a
set n to length of string a
for i = 0 to n exclusive
if a[i] is -
increment count
else do the following
increment p
if count is 0 OR p is 0
print YES and a new line
else if count modulo p is 0
print YES and a new line
else do the following
print NO and a new line
declare string variable with name cad
read cad from the input
declare new int variables guiones and perlas = 0
for integer i = 0 to length of cad exclusive incrementing i
if cad[i] is equal to '-'
increment guiones by one
else
increment perlas
if guiones or perlas is equal to 0
print "YES\n" to the standard output
else
if guiones is less than perlas
print "NO\n"
else
if guiones = perlas
print "YES\n" to the standard output
else
if guiones % perlas = 0
print "YES\n"
else
print "NO\n"
link, pearl = integers with link = 0, pearl = 0
str = string
read str
for i = 0 to str.length() exclusive
if (str[i] is -)
increment link
else
increment pearl
if (pearl is 0)
print YES
if (link % pearl == 0)
print YES
else
print NO
s = string
read s
bul = integer = 0, ris = integer = 0
for i = 0 to length of s exclusive
if s[i] is -
ris = ris + 1
else
bul = bul + 1
if bul is 0
print YES
else if ris modulo bul is 0
print YES
else
print NO
a=array of 1001 char
n,m=int
while read a
n,m=0
for i=0 to length of s exclusive
if a[i] is '-'
increment n
else if a[i] is 'o'
increment m
if n is 0 or m is 0 or n modulo m is 0
print YES
else
print NO
s = string
a, b = integers
Read s
for i = 0 to length of string s exclusive
if s[i] is -
increment b
else do the following
increment a
if a is 0 OR b modulo a is 0
print YES and a new line
else do the following
print NO and a new line
Create constant integer maxN with value 10^5
n, x, y = integers
read n, x, and y
create double t and set it to ceil of n * y * 1.0 / 100.0
call max on (int) t - x and 0 and print the result
declare const int M = 100 + 5
declare ints n, x and y
read n, x and y
declare integer variable tmp = n * y / 100 + ((n * y) % 100 !=0) - x
declare integer ans = max of tmp and 0
print ans
define ints n, x, and y
read n, x, and y
define integer z and set it to the ceiling of ( (double) n * y / 100)
if z is greater than x
print z - x followed by a newline
else
print 0 followed by a newline
create long longs n, x, y, ans and xx
read n, x and y
change xx to n * y / 100
while xx * 100 < n * y
set ans to max of 0LL and xx - x
print ans and "\n"
create integers n, x, y
create integer p with p = 1
read n
read x
read y
set p to n * y
if p % 100 is not 0
set p to p / 100 + 1
else
set p to p / 100
if p is less than or equal to x
print 0 print newline
else
print p - x print newline
create doubles size_n, size_x, size_y
create double result
create doubles man, have_now
read size_n read size_x read size_y
set man to size_n * 0.01
set have_now to size_x / man
if have_now is less than size_y
set result to (size_y - have_now) * man
if double casted ( integer casted ( result ) ) is not result, increment result by 1
else
set result to 0
print integer casted result print newline
define doubles n, x, and y
read n, x, y
define int r, setting it to the ceiling of (y / 100 * n)
if x >= r...
print 0 and a newline
otherwise...
print the difference of r and x, followed by a newline
declare long long int variables x, y and n
read n, x and y
create double m = (n * y) / 100
declare long long int dem = m rounded up
if x >= dem
print 0
else
print dem - x
n, x, y = integers
read n, x, y
print max(0, (n * y + 99) / 100 - x)
create constant long long mod with mod = 1e9 + 7
create constant integer N with N = 1e5 + 5
declare gcd with long longs a, b as arguments, returning long long
return result of run gcd with b, a % b as arguments if b is true, else a
declare pwr with long longs x, y as arguments, returning long long
declare isprime with long long x as argument, returning boolean
create integers n, x, y
read n read x read y
create integer ans with ans = ((n * y ) / 100 + boolean casted ((n * y ) % 100 )
if x is greater than ans
print 0 print newline
print ans - x print newline
declare pwr with long longs x, y as arguments, returning long long
create long long ans with ans = 1
set x to x % mod
while y is greater than 0
if y bitwise and 1, set ans to (x * ans) % mod
set x to ( x * x ) % mod
set y to y / 2
return ans from function
declare isprime with long long x as argument, returning boolean
if x is less than 2, return false from function
if x is less than 4, return true from function
if x % 2 is 0 or x % 3 is 0 , return false from fucntion
for i = 5 to i * i is less than or equal to x, increment i by 6
if x % i is 0 or x % ( i + 2 ) is 0, return false from function
return true from function
integers = n,x,y
read n,x,y
ans is the rounding up of ((double)y / 100 * n)
if ans - x is greater than 0 then do the following
output ans - x
else
output 0
create long long array spf with size 100001
declare gcd with long longs a, b as arguments, returning long long
declare palindrome with string s as argument, returning long long
declare modexp with long longs a, b, m as arguments, returning long long
declare sieve with no arguments, returning void
declare ceil with long longs a, b as arguments, returning long long
declare getFactorization with long long x as argument, returning long long vector
declare getZarr with string str, long long array Z as arguments, returning void
declare prefix_function with string s as argument, returning long long vector
create long doubles n, x, y
read n read x read y
create long double ans with ans = (n * y) / 100 - x
if ans is less than 0, set ans to 0
print result of run ceil with ans as argument print newline
declare gcd with long longs a, b as arguments, returning long long
if a is 0, return b from function
if b is 0, return a from function
if a is b, return a from function
if a is greater than b, return result of run gcd with a % b, b as arguments, from function
return result of run gcd with a, b % a as arguments, from function
declare palindrome with string s as argument, returning long long
create long long l with l = 0
create long long h with h = length of s - 1
while h is greater than l
if s[increment l] is not s[decrement h], return 0 from function
return 1 from function
declare modexp with long longs a, b, m as arguments, returning long long
if b is 0, return 1 from function
create long long temp with temp = result of run modexp with a, b / 2, m as arguments
set temp to ( temp * temp ) % m
if b bitwise and 1, return (temp * (a % m)) % m from function
return temp from function
declare sieve with no arguments, returning void
set spf[1] to 1
for i = 2 to 100001 exclusive, set spf[i] to i
for i = 4 to 100001 exclusive, incrementing i by 2, set spf[i] to 2
for i = 3 to i * i is less than 100001, incrementing i
if spf[i] is i
for j = i * i to 100001 exclusive, incrementing j by i
if spf[j] is j, set spf[j] to i
declare getFactorization with long long x as argument, returning long long vector
create long long vector ret
while x is not 1
add element spf[x] to end of ret
set x to x / spf[x]
return ret from function
declare ceil with long longs a, b as arguments, returning long long
return a / b + ( a % b is not 0 )
declare getZarr with string str, long long array Z as arguments, returning void
create long long n with n = length of str
create long longs L, R, K
set L to R to 0
for i = 1 to n exclusive
if i is greater than R
set L to R to i
while R is less than n and str[R-L] is str[R], increment R
set Z[i] to R - L
decrement R
else
set k to i - L
if Z[k] is less than R - i + 1
set Z[i] to Z[k]
else
set L to i
while R is less than n and str[R-L] is str[R], increment R
set Z[i] to R - L
decrement R
declare prefix_function with string s as argument, returning long long vector
create long long n with n = long long casted length of s
create long long vector pi initialized with n
for i = 1 to n exclusive
create long long j with j = pi[i-1]
while j is greater than 0 and s[i] is not s[j], set j to pi[j-1]
if s[i] is s[j], increment j
set pi[i] to j
return pi from function
declare doubles n, x and y
read n, x and y
declare integer variable temp = x
while (x / n) * 100 < y
print x - temp
declare integers n, x and y
read n, x and y
create int res = ((y / 100.0) * n) rounded up - x
if res is less than 0
print 0
else
print res
create constant integer MOD with MOD = 1e9 + 7
declare gcd with doubles a, b as arguments, returning double
return b if a is less than 0.01, else result of run gcd with ( (floating point remainder of b/a), a ) as arguments from function
declare max with long long integers a, b as arguments, returning long long integer
return a if a is greater than b, else b from function
declare max with long long integers a, b, c as arguments, returning long long integer
return maximum of ( a and maximum of ( b and c ) ) from function
declare min with long long integers a, b as arguments, returning long long integer
return a if a is less than b, else b from function
declare min with long long integers a, b, c as arguments, returning long long integer
return minimum of ( a and minimum of ( b and c ) ) from function
declare power with long long integers x, y as arguments, returning long long integer
declare long long integer res with res = 1
set x to x % MOD
while y is greater than 0
if y bitwise and 1, set res to ( res * x ) % MOD
set y to y bitshift right 1
set x to ( x * x ) % MOD
return res from function
declare swap with character pointers x, y as arguments, returning void
create character temp
set temp to value of y
set value of y to value of x
set value of x to temp
declare mod with long long integer a as argument, returning long long integer
if a is greater than 0
return a
else
return -a
create integers n, x, y
read n read x read y
create integer r with r = round up ( (n*y) / 100.0 )
print r - x if ( r - x ) is greater than or equal to 0, else 0 print newline
n, x, y = int
read n then x then y
temp = int with temp = (y * n / 100) + 1 if (y * n % 100) is not 0
decrement temp by x
if temp is less or equal to 0
print "0"
else
print temp
Create x, y, and z as double precision number
Set x to the first input, y to the second input, and z to the third input
Create ans as an integer and set to the next bigger integer of (x*z)/100 then subtract y
If ans is negative
Output 0
Otherwise
Output ans
create doubles n, x, y
read n read x read y
create long long z with z = round up ( ( y / 100 ) * n )
create long long ans with ans = 0
if z is greater than x, set ans to z - x
print ans print newline
let n, x, y be ints
read n, x, and y
print (y*n - min(y*n, x*100) + 99)/100
create int n, x and y
read n, x, y
set p to (x * 100.0) / (n * 1.0)
if p >= y
print 0
S=0
for i= x+1 to 1000010 inclusive
increment S
if (i * 100.0) / (n * 1.0) >= y, break the loop
print S
define ints n, x, y
read n, x, and y
define int clones set to (n y + 99) / 100 - x
if clones is negative, then set clones to 0
print clones and newline
N, K, ans, A, val, x, y = integers with A = array of size 10
T, S, P = string
cek = bool
read N, x, y
print max(0, (N * y - 1) / 100 + 1 - x)
create integers x, y, z, t1, t2, t3
read x read y read z read t1 read t2 read t3
create integers el, st
set el to absolute value of ( x - z ) * t2 + 3 * t3 + absolute value of ( y - x ) * t2
set st to absolute value of ( x - y ) * t1
if st is less than el
print "NO\n"
else
print "YES\n"
x, y, z, t1, t2, t3 = integers
read x and y and z and t1 and t2 and t3
set k = x - y
if k < 0 set k = k * -1
set l = z - x
if l < 0 then l = l * -1
set stairs = k * t1
set elevator = 1 * t2 + k * t2 + 3 * t3
if stairs < elevator
print NO
else
print YES
create integers x, y, z, t1, t2, t3, st, el
read x read y read z read t1 read t2 read t3
set st to absolute value of (x - y) * t1
set el to (absolute value of (x-z) + absolute value of(x-y)) * t2 + t3 * 3
if el is less than or equal to st
print "YES" print newline
else
print "NO" print newline
create integers x, y, z, t1, t2, t3
read x read y read z read t1 read t2 read t3
if ( ( absolute value of ( z - x ) + absolute value of ( x - y ) ) * t2 + 3 * t3 is less than or equal to absolute value of ( x - y ) * t1
print "YES" print newline
else
print "NO" print newline
x, y, z, t1, t2, t3 =integers
Read x, y, z, t1, t2, t3
masha_time = integer, set to absolute value of x - y * t1
elevator_time = integer, set to absolute value of x - z * t2 + absolute value of x - y * t2 + t3 + t3 + t3
if elevator_time is less than or equal to masha_time
print YES and a new line
else do the following
print NO and a new line
let x, y, z, t1, t2 and t3 be integers
read x, y, z, t1, t2 and t3
if abs(x - z) * t2 + abs(x - y) * t2 + t3 * 3 <= abs(x - y) * t1
print "YES" and '\n'
else
print "NO" and '\n'
create constant integer INF with INF = 0x3f3f3f3f
create integers x, y, z, t1, t2, t3
read x read y read z read t1 read t2 read t3
create integers tv, ts with tv = 0, ts = 0
set ts to t1 * absolute value of ( y - x )
set tv to t2 * absolute value of ( z - x ) + t2 * absolute value of ( y - x ) + t3 * 3
if tv is less than or equal to ts
print "YES"
else
print "NO"
create integers x, y, z, t1, t2, t3
read x read y read z read t1 read t2 read t3
create integer str_dif with str_dif = x - y
create integer elv_dif with elv_dif = x - z
if str_dif is less than 0 or elv_dif is less than 0
if str_dif is less than 0, set str_dif to str_dif * -1
if elv_dif is less than 0, set elv_dif to elv_dif * -1
create integer str_time with str_time = str_dif * t1
create integer elv_time with elv_time = elv_dif * t2 + str_dif * t2 + 3 * t3
if str_time is less than elv_time
print "NO" print newline
else
print "YES" print newline
x, y, z, t1, t2, t3 = integers
read x, y, z, t1, t2, t3
set stairs to abs(y - x) * t1
elevator = abs(z - x) * t2 + abs(y - x) * t2 + 3 * t3
if elevator <= stairs
print YES
else
print NO
x , y, z , t1 ,t2 ,t3 = integers
read x , y, z , t1 ,t2 and t3
if (((abs(x - y) + abs(x - z)) * t2) + (3 * t3) <= ((abs(x - y)) * t1)))
print YES
else
print NO
declare integer variables x, y, z, t1, t2 and t3
read x, y, z, t1, t2 and t3
declare integer variables ans1 and ans2 with ans2 = (absolute value of x - y) * t1
ans1 = (absolute value of z - x) * t2 + t3 * 3 + (absolute value of x - y) * t2
if ans1 <= ans2
print "YES" and a new line
else
print "NO" and a new line
let a, b, c, d, e, f, g, m, s, l, n, t be integers
read a,b,c,d,e and f
s is equal to (a - b) * d
if (s is less than 0) , s is equal to -1 * s
l is equal to ((c - a) * e);
if (l is less than 0) , l is equal to -l;
t is equal to (a - b) * e
if (t is less than 0) , t is equal to -t
m is equal to t + l + 3 * f
if (m is less than or equal to s)
print YES and endline
else do something
print NO and endline
x, y, z, t1, t2, t3=integers
read x, y, z, t1, t2 and t3
a,b,c,d = long integers
if(x>y) execute
set a to y-x
else execute
set a to x-y
set c to a*t1
if(z is greater than x) execute
b=z-x
else execute
b=x-z
set d to (b + a) * t2 + 3 * t3
if(c is greater than or equal to d)
Print out YES
else
Print out NO
declare long long integer variables x, y, z, t1, t2, t3, s and e
read x, y, z, t1, t2 and t3
if x is greater than y
s = (x - y) * t1
else
s = (y - x) * t1
if x >= y && x >= z
e = ((x - y) * t2) + ((x - z) * t2) + (3 * t3)
if e <= s
print "YES" and a new line
else
print "NO" and a new line
else if x <= y && x >= z
e = ((y - x) * t2) + ((x - z) * t2) + (3 * t3)
if e <= s
print "YES" and a new line
else
print "NO" and a new line
else if x <= y && x <= z
e = ((y - x) * t2) + ((z - x) * t2) + (3 * t3)
if e <= s
print "YES" and a new line
else
print "NO" and a new line
else if x >= y && x <= z
e = ((x - y) * t2) + ((z - x) * t2) + (3 * t3)
if e <= s
print "YES" and a new line
else
print "NO" and a new line
assign value 4 to constant integer MAX
let x, y, z, t1, t2 and t3 be integers
read x, y, z, t1, t2 and t3
let a and b be integers
a = abs(z - x) * t2 + t3 * 3 + abs(x - y) * t2
b = abs(x - y) * t1
if a <= b
print "YES" and a new line
else
print "NO" and a new line
declare integers x, y, z, a, b, c
read x, y, z, a, b, c
declare integer stair as (absolute value of x-y) times a
declare integer lift as (absolute value (x - z) + absolute value (x - y)) * b + (3 * c)
if lift is less than or equal to stair
print "YES" and a new line
else
print "NO" and a new line
create integers x, y, z, t1, t2, t3
read x read y read z read t1 read t2 read t3
create integer tot1 with tot1 = absolute value of ( z - x ) * t2 + t3 * 3 + absolute value of ( y - x ) * t2
create integer tot2 with tot2 = absolute value of ( y - x ) * t1
if tot1 is greater than tot2
print "NO" print newline
else
print "YES" print newline
let x, y, z, t1, t2, t3, e be long integers
read the values x, y, z, t1, t2, t3
let the value of e is equal to abs(z - x) * t2
let the value of e is equal to e + t3 * 3
let the value of e is equal to e +abs(y - x) * t2
let the value of t1 is equal to t1 * abs(y - x)
if ( t1 is greater than or equal to e )
print YES and newline
else , do the following
print NO and newline
let mod is a long integer with value 1e9 + 7
do map<int, int> mp
let a is an array of size 200001 which is a long integer
let b is an array of size 200001 which is a long integer
let c is an array of size 11 which is a long integer
let u is an array of size 151 which is a long integer
let n, m, mn , l, t1, t2, t3 be long integers with mn is equal to 0
initialize the long integers cnt and ans to 0
read the values n,m and l
read the values t1,t2 and t3
let the value of long integer res = abs(n - l) * t2 + t3 + t3 + abs(n - m) * t2 + t3;
let the value of long integer oi is equal to abs(n - m) * t1
if (res is greater than oi)
print NO and newline
else do the following
print YES and endline
declare abs with integer x as argument, returning integer
if x is less than 0, return -x
return x
declare solve with no arguments, returning void
create integers x, y, z, t1, t2, t3
read x read y read z read t1 read t2 read t3
create integer timeWalk with timeWalk = absolute value of ( y - x ) * t1
create integer timeTakeElevator with timeTakeElevator = t3 * 3
increment timeTakeElevator by absolute value of ( x - z ) * t2
increment timeTakeElevator by absolute value of ( y - x ) * t2
if timeTakeElevator is greater than timeWalk
print "NO\n"
else
print "YES\n"
run solve
x,y,z,t1,t2,t3 = int
read x,y,z,t1,t2,t3
fd = absolute value of x-y
cd = absolute value of x-z
stt, lift_t = int
stt = fd*t1
nw = int
nw = fd+cd
lift_t = (nw*t2)+(3*t3)
mn = int
if lift_t <= stt
print "YES"
else
print "NO"
x, y, z, t1, t2 and t3 are integers
read x, y, z, t1, t2 and t3
walk_time is integer = asbolute value of(x - y) * t1
lift_time = asbolute value of( x - z ) * t2 + asbolute value of( x - y ) * t2
increase lift_time by (t3 * 3)
if lift_time <= walk_time
print "YES" and a new line
else
print "NO" and a new line
create integers x, y, z, a, b, c
read x read y read z read a read b read c
create integer r with r = absolute value of ( x - y ) * a
create integer s with s = absolute value of ( x - z ) * b + 3 * c + absolute value of ( x - y ) * b
if r is less than s
print "NO\n"
else
print "YES\n"
function absu with integer argument q that returns integer
if q is greater than 0
return q
else
return -q
create integers x, y, z, t1, t2, t3, a and b
read x, y, z, t1, t2 and t3
a = absu(x - y) * t1
b = absu(x - z) * t2 + absu(x - y) * t2 + 3 * t3
if a is less than b
print "NO" and a new line
else
print "YES" and a new line
MOD = 998244353
N, M, K, H, W, L, R = long long integers
a, b, c, d, e, f = integers
read a, b, c, d, e and f
N = absolute value of (a - b) * d
M = absolute value of (a - c) * e
M = M + absolute value of (b - a) * e
M = M + 3 * f
if N is greater or equal than M
print YES
else
print NO
a = array of integers of length 100
let n, count, ans be integers with ans = 0
read n
for i = 0 to n exclusive, read a[i]
for i = 0 to n inclusive
count is equal to 0
for j = i to n exclusive
if a[j] is equal to 1, increment count by 1
for k = 0 to i exclusive
if a[k] is equal to 0, increment count by 1
ans = maximum of ans, count
print ans and newline
create int n, a[105], temp, ans, i and j, set ans to 1
read n
for i=0 to n exclusive, read a[i]
for i=0 to n exclusive
temp=0
for j=0 to i exclusive
if a[j]=0, increment temp
for j=i to n exclusive
if a[j] different from 0, increment temp
set ans to max of ans and temp
print ans
inf = const int with inf = 0x3f3f3f3f
s, dp = int array of size 105 each and n = int
read n
for i = 1 to n inclusive read s[i]
set dp[1] to s[1]
len = int with len = 1
for i = 2 to n inclusive
if s[i] >= dp[len]
increment lent then set dp[len] to s[i]
else
index = int with index = upper_bound of (dp + 1, dp + 1 + len, s[i]) - dp
set dp[index] to s[i]
print len
n = integer
read n
a = integer array of size 200
one, zero = integers with one = 0, zero = 0
for i = 0 to n exclusive
read a[i]
if (a[i]) increment one
ans = integer with ans = 0
for i = 0 to n exclusive
if (a[i] is 0) increment zero
ans = max ans and one + zero
if (a[i] is 1) decrement one
print ans
create integer array cont of size 1005
make int n
read n
for i = 0 to n exclusive, read cont[i]
let integer ans = 0
let int now = 0
for i = 0 to n exclusive
if cont[i] is 0
add 1 to now
set ans to max of ans and now
else do
create int tmp = now
for j = i to n exclusive
if cont[j] is truthy, add 1 to tmp
set ans to max of ans and temp
display ans
declare new constant integer MAXN with value 100+5
create constant integer called INF = 0x3f3f3f3f
create new integer called n
read standard input to n
data is a new array of integers with MAXN elements
read n elements to data from the user input
let cnt and ans be integers where ans = n
start for loop from i = 1 to n exclusive incrementing i
change the value of cnt to 0
if data[i - 1] = data[i], go to the start of the loop
for j = 0 to i exclusive
if data[j] != 0, increment cnt
for j from i to n exclusive incrementing j
if data[j] != 1, increment cnt
assign min of ans and cnt to ans
set cnt to 0
in a for loop, change i from 0 to n exclusive incrementing i
if data[i] != 0, increment cnt by one
assign min of ans and cnt to ans
change the value of cnt to 0
start for loop from i = 0 to n exclusive incrementing i
if data[i] != 1, add 1 to cnt
set ans to min of ans and cnt
print n - ans and '\n' to the standard output
create int n
while read n
create int game[n]
for i=0 to n exclusive, read game[i]
set large and prezero =0
for i=0 to n exclusive
if game[i] =0
increment prezero
set large to max of large and prezero
else
set cur to prezero
for j=i to n exclusive
if game[j] =1, increment cur
set large to max of cur and large
print large and a newline
make const integer maxn = 100005
make int arrays s of size maxn and dp of size maxn
create int n
read n
for i = 1 to n, read s[i]
set dp[1] to s[1]
create int len = 1
for i = 2 to n
if s[i] is greater than or equal to dp[len]
set dp[++len] to s[i]
otherwise
create int index = upper_bound(dp + 1, dp + len + 1, s[i]) - dp
set dp[index] to s[i]
print len
i,j,n,t=int, a=1, s=array of 10000 int
read n
for i=0 to n exclusive read s[i]
for i=0 to n exclusive
t=0
for j=0 to i inclusive
if not s[j] increment t
for j=i to n exclusive
if s[j] increment t
a=max(a,t)
print a
a, d = integer array of size 4005
n = integer
read n
for i = 1 to n, read a[i]
d[1] = a[1]
len = integer with len = 1
for i = 2 to n
if (a[i] >= d[len])
d[increment len] = a[i]
else
j = integer with j = upper_bound(d + 1, d + len + 1, a[i]) - d
d[j] = a[i]
print len
create ints n, p = 1, and cnt = 0 and int array a of size 1000
read n
for i = 1 to n, read a[i]
for i = 1 to n
create int t = 0
for j = 1 to i
if a[j] is equal to 0, increment t
for j = i to n
if a[j] is equal to 1, increment t
set cnt to max of cnt and t
print cnt
declare new constant integer called N = 105
create new ints n and ans; declare int arrays s and dp with N elements
read user input to n
read input to s[i] from the index 1 to n inclusive
for integer i = 1 to n inclusive
set dp[i] to 1
for j from i - 1 to 1 inclusive decrementing j
if s[i] is equal to 0
if s[j] = 0, change the value of dp[i] to max of dp[i] and 1 + dp[j]
else
change the value of dp[i] to max of dp[i] and 1 + dp[j]
assign max of dp[i] and ans to ans
print ans and "\n"
size = const integer with size = 105
suf, pre = integers with pre, suf = integer array of size size = {0}
n = integer
read n
arr = integer array of size n + 1 = {0}
for i = 1 to n, read arr[i], suf[i] = (arr[i]), pre[i] = (not arr[i])
for i = n down to 1, suf[i] = suf[i] + suf[i + 1]
for i = 1 to n, pre[i] = pre[i] + pre[i - 1]
ans = integer with ans = 0
for i = 1 to n, ans = max(ans, pre[i] + suf[i])
print ans
n = integer
read n
a = integer array of size 200
one, zero = integers with one = 0, zero = 0
for i = 0 to n exclusive
read a[i]
if (a[i]) increment one
ans = integer with ans = 0
for i = 0 to n
if (a[i] is 0), increment zero
ans = max of ans and one + zero
if (a[i] is 1), decrement one
print ans
create const integer maxn = 10005
create integer array s of size maxn
make int array dp of size dp
create int len = 0
create int n
read n
for i = 0 to n exclusive, read s[i]
for i = 0 to n exclusive
set dp[i] to 1
for j = 0 to i exclusive
if s[i] is greater than or equal to s[j] and dp[j] + 1 is greater than dp[i], set dp[i] to dp[j] + 1
set len to max of dp[i] and len
print len
make long long integer a of size 204
create long long integer n, i, j, k, x, y, t, and m
read n
for i = 1 to n, read a[i]
make long long integer mx = 0 and cnt1 = 0
for i = 1 to n
create long long integer cnt = 0
if a[i] is 1, increment cnt1
if a[i] is 0
for j = 1 to i
if a[j] is 0, increment cnt
for j = i + 1 to n
if a[j] is 1, add 1 to cnt
set mx to max of mx and cnt
print max of mx and cnt1
n = int
read n
game = int vector of size n
numOf0 = int with numOf0 = 0
for i = 0 to n
read game[i]
if game[i] is 0 increment numOf0
if numOf0 is 0 or n
print n
last0 = int with last0 = n - 1
loop while last0 >= 0 and game[last0] is 1 decrement last0
numOf1 = int with numOf1 = n - 1 - last0
ans = int with ans = numOf0 + numOf1
for i = last0 to 0 inclusive decrementing i
if game[i] is 1
increment numOf1
continue
else
set ans to max of ans, numOf0 + numOf1
decrement numOf0
print max of ans, numOf1
create integers n, res, one and zero, all except n with value 0
read from the input to n
a is a new array of integers with n elements
for integer i = 0 to n exclusive incrementing i
read a[i]
if a[i] is true
set one to max of one and zero
increment one by one
else
increment zero
change the value of res to max of one and zero
print res and "\n" to the standard output
n,i,j=int, s,max=0, a and b=array of 105 int
read n
for i=0 to n exclusive
read a[i]
if a[i] is 0 increment s
b[i]=s
for i=0 to n exclusive
if a[i] is 0
if 2*b[i]+n-1-i-s > max max=2*b[i]+n-1-i-s
if a[i] is 1
if 2*b[i]+n-i-s > max max=2*b[i]+n-i-s
print max
x=long long
read x
if x is even
print 2
else
print 1
create new long long variable a
read user input to a
if a is even
print 2
else
print 1 to stdout
create long long int k, n, a[100000]
read n
if n is even
print 2
else
print 1
declare n as long long
read n
if n bitwise and 1
print 1, newline
else
print 2 and newline
create long longs x and y
read from the input to x
assign x % 2 to y
if y = 0
print 2 to the standard output
else
print 1
create string s
read s
reverse s
id s[0]=0, 2, 4, 6 or 8
print 2
else
print 1 and a newline
create long long n
read n
if n mod 2 = 1
print 1
else
print 2
declare new long long called n
read n from the user input
print 2 - n % 2
declare long long variables n, mid and f
set decimal precision of the output to 30 and change notation to floating-point
read standard input to n
print 2 - n % 2 and '\n' to the standard output
create long long int n
read n
if n modulo 2 is 1
print 1
else
print 2
create new unsigned long long variable n
read from the input to n
print 2 if n is even and 1 if n is odd
end statement
declare constant long long INT64M = 0X3F3F3F3F3F3F3F3F
declare constant integer INT32M = 0x3F3F3F3F
declare constant integer mod = 1e9 + 7
declare n as long long
read n
if n bitwise and 1
print 1, newline
else
print 2, newline
MAX = n, a[1005], sum = 0, m, cmp
create long long n
read n
if n is even
print 2
else
print 1 and a newline
let n be a long integer
read n
if n modulo 2 is equal to 0
print 2 and newline
else do the following
print 1 and newline
n = long long int
read n
if n is uneven
print 1
else
print 2
v is a new vector of long long integers
create new long long integer variable n
read n from the input
if n is even
print 2 to the standard output
else
print 1
create new long long variable called n
read the value of n from the input
if n modulo 2 is not 0
print "1" to the output
else
print "2" to stdout
create new unsigned long long integer called n
read n
if n is even
print 2
else
print 1
create constant integer inf with value 0x3f3f3f
create new long long n
read n and loop further
if n is even
print 2
else
print 1 to the standard output
a = long long
read a
if a is uneven print 1 else print 2
create constant int INF = 0x3f3f3f3f
let long long integer mod = 10000000000LL
declare cheng taking in long long integers a, b, and c and returning long long integer
make long long int ret = 0
while b is truthy
if b & 1 are truthy
set ret to ret + a
if ret is greater than or equal to c, set ret to ret - c
set a to a + a
if a is greater than or equal to c, set a to a - c
move bits of b 1 place to right
return ret
create long long int n
read n
make long long integer ans = cheng(n, n, mod)
if ans modulo 2 is 0
print 2
else
print 1
create constant long long MAX = 1000
declare long long variable n
read input to n
if n is odd
print 1
else
print 2 to the output
n=long long
read n
print 1 if n is odd else 2
create constant int MAX = 1e5 + 5
let long long n
read n
if n modulo 2 is 0
print 2
else
print 1
declare long long n
read n from the input
print 2 - (n modulo 2) to the standard output
n is a new long long variable
declare new long long called a = 1
create new long long called b with value 2
read user input to n
if n is even
print b to the standard output
else
print a
let n = long long
read n
if n is even
print 2
else
print 1
create long long n
read n
if n is odd
print 1
else
print 2
make long long integers a, b, c, e, and f
read a
if a modulo 2 is truthy
print 1
otherwise do
print 2
create long long int n
read n
if n and 1 different from 0
print 1\n
else
print 2\n
create long long int n
read n and while n is truthy
if n modulo 2 is 1
print "1"
else
print "2"
print new line
n = unsigned long long
read n
if n is even then print 2 else print 1
declare constant integer maxn = 1e5 + 5
declare long long n as argument
read n
if n % 2
print "1", newline
else
print "2", newline
declare n as long long
read n
if n % 2 is 0
print "2", newline
else
print "1', newline
declare long long x
read x
if x % 2 is 0
print 2 and newline
else
print 1 and newline
declare new long long n
read n and keep looping
if n is even
print "2" to the otuput stream
else
print "1"
create long long n
read n
print 2 - (n % 2)
a_i, b_i, n = long long
read n
if n is even
print 2
else
print 1
declare constant integer maxn = 1e5 + 10
declare constant integer maxm = 1e6 + 10
declare constant integer INF = 0x3f3f3f3f
declare long longs casn, n, m, k
declare long long array num size maxn
declare cal with long long x as argument, returning lon glong
declare long long ans = 1
for i = 1 to x inclusive, let ans be ans * i
return ans from function
read n
print 1 + ( n % 2 is 0 ), newline
let n be a integer
read n
let count be a vector of integers
for integer i = 0 to n exclusive
read x
read x
increase count[x] by 1
print *max_element from beginning to end of count and endline
let n, ans = 0, a[111], vis[100010] be long long
in inline long long function read
x = long long = 0
bool = 0 = f
ch = char = get char
for , until not ch is digit set ch to get char, f bit exclusive or (ch == '-')
for , is digit of ch = false, set ch = get char; set x to (x << 3) + (x << 1) + (ch ^ 48)
is f not 0 ? then return -x else return x
n = read()
for resgister int i = 1 to n inclusive, set a[i] to read, increment vis at a[i]
for register int i = 1 to n inclusive
if ans < vis at a[i]
then set ans to vis at a[i]
max_elemento is a integer function with vector of integers argument coins_array
create integer max_element with value 0
for i from 0 to length of coins_array exclusive incrementing i
if coins_array[i] is greater than max_element, set max_element to coins_array[i]
return max_element
create integer coins_nro
create new integer variable coin_value
create vector of integers coins_array with size 105 filled with 0
result is a new integer variable
read variable coins_nro from the input
in a for loop, change i from 0 to coins_nro exclusive incrementing i
read from the input to coin_value
increment coins_array[coin_value] by one
assign the new value = max_elemento(coins_array) to result
print result and '\n'
declare integer array a size 10005
declare integers n, m, d = 0
read n
for i = 1 to n inclusive
read m
increment a[m]
for j = 0 to 10000 exclusive
if a[j] is greater than d, let d be a[j]
print d and newline
create long long integer n
read n
make long long int array a of size and long long c = 0
let long long int array x of size 101 containing {0}
for i = 0 to n exclusive
read a[i]
increment x[a[i]]
display *max_element(x, x + 101)
declare integer array a size 250, integers ans, sum = 1
declare integer n
read n
if n is 1
print "1" and newline
for i = 0 to n inclusive, read a[i]
sort from a + 1 to a + n + 1
for i = 2 to n inclusive
if a[i] is a[i-1], increment sum
let ans be maximum of ans and sum
if a[i] is not a[i-1], let sum be 1
print ans and newline
integer as n,a[1000],i,j
create memset with pointer a, value of 0, and byte size of a
read n
for = 0 to less than n do the following
read j
add one to a[j]
integer as m = -999
for = 0 to less than 1000 do the following
if a[i] is greater than m then do the following m = a[i]
output m
let INF be a constant integer with INF = 0x3f3f3f3f
let v be an integer array of size 105
let i, j, k be integers
let n, m, x be integers
read n
for i = 0 to n exclusive, read x and increase v[x] by 1
sort the values v and v + 101
print v[100] and endline
let n be a integer
read n
arr = array of integers of length n
for i = 0 to n exclusive , read arr[i]
count = array of integers of length 101
for i = 0 to 101 exclusive , count[i] is equal to 0
for i = 0 to n exclusive , increment count[arr[i]] by 1
the integer value of answer = 0
for i = 0 to 101 exclusive
if count[i] is greater than answer , answer is equal to count[i]
print answer and newline
arr is a vector of integers
n,x be integers
read n
for integer i = 0 to n exclusive
read x
increase arr[x] by 1
print *max_element(arr.begin(), arr.end()) and endline
declare cmp with integers a, b as arguments, returning boolean
return a is greater than b
declare integer n
read n
declare integer array a size 200 = {0}
for i = 0 to n exclusive
declare integer mid
read mid
increment a[mid]
sort from a to a + 105 using cmp to compare
print a[0] and newline
integer as array a of size 10005
integer as n,m,b = 0
read n
for i = 1 to less than or equal to n do the following
read m
add one to a[m]
for i = 0 to less than or equal to 10000 do the following
if a[i] is greater than b then b = a[i]
output b
create long long n
read n
make long long vector coins
for i = 0 to n exclusive
create long long aux
read aux
append aux to coins
sort coins
create long long ints cont = 1 and resp = 1
for i = 0 to n exclusive
if coins[i] is equal to coins[i - 1]
increment cont
else do
if cont is greater than resp, set resp to cont
set cont to 1
if cont is greater than resp, set resp to cont
display resp
declare integers n, max = -1, cnt, integer array arr size 105
read n
for i = 0 to n exclusive, read arr[i]
for i = 0 to n exclusive
let cnt be 0
if arr[i] is -5000000, end loop iteration
declare integer tmp = arr[i]
for j = 0 to n exclusive
if tmp is arr[j]
increment cnt
let arr[j] be -5000000
if cnt is greater than or equal to max, let max be cnt
print max, newline
create integer n
read n
make integer ma = 0
make integer array a of size 110
set all content of a to 0
for i = 0 to n exclusive
make integer num
read num
add 1 to a[num]
set ma to max of a[num] and ma
print ma
integer as n
read n
create integer vector of v(101, 0)
for i = 0 to less than n do the following
integer as x
read x
add one to v[x]
integer as MAX = value pointed to by max_element within v
output MAX
create long long ints n and i
read n
make long long array a of size n and long long max = 0
make map m of long long ints to long long ints
for i = 0 to n exclusive
read a[i]
increment m[a[i]]
if m[a[i]] is greater than max, set max to m[a[i]]
print max
n is a new integer
loop, reading n from the input
declare integer ans with value 0
let p be a map from integers to integers
increment i in a loop from 0 to n exclusive
new integer val
read val
increment p[val]
assign the new value = max of p[val] and ans to ans
print ans
let cont be a long integer array
n is a long integer
read n
for long integer i = 0 to n exclusive
num is a long integer
read num
increase cont[num] by 1
maxi is a long integer 0
for long integer i = 1 to 100 inclusive, maxi = max(maxi, cont[i]
print maxi and endline
integer as n,i,j,maxx
read n
integer as a[n]
integer as freq[101] = 0
for i = 0 to less than n do the following
read array a[i]
add one to freq[a[i]]
do nothing
set maxx to INT_MIN
for i = 0 to less than 101 do the following
if freq[i] is greater than or equal to maxx then do the following maxx = freq[i]
output maxx
n, m, c = int with m = 0 and c = 0 and arr = int array of size 101
read n
read n values into arr
sort arr from index 0 to n
for i = 1 to n
if arr[i - 1] is arr[i]
increment c
else
set c to 0
set m to max of m, c
if m is 0
print 1
else
print m + 1
create integers n, i, t and max = 0
read user input to n
f is a new vector of integers with size 101 filled with 0
start for loop from i = 0 to n exclusive incrementing i
read standard input to t
increment f[t]
in a for loop, change i from 1 to 100 inclusive, changing max to maximum of f[i] and max on each iteration
print max
create long long n
read n
make long long int array c of size n and int max = 1
for i = 0 to n exclusive, read c[i]
for i = 0 to n - 1 exclusive
create long long cnt = 1
for j = i + 1 to n exclusive
if c[j] is equal to c[i], increment cnt
if i is equal to 0, set max to cnt
if cnt is greater than or equal to max, set max to cnt
display max
integer as n
read n
create integer vector of coins 101, 0
for i = 0 to less than n do the following
integer as value
read value
add one to coins[value]
integer as minPockets = -1
for i = 0 to less than 101 then minPockets = maximum of minpockets or coins[i]
output minPockets
p1,p2,p3,p4,a,b=int
read p1,p2,p3,p4,a,b
ans=0
p=min(p1,p2)
p=min(p,p3)
p=min(p,p4)
if b<p
print b-a+1
if p-a>0 ans=p-a
print ans
declare integer array p size 4, integers a, b, ans
for i = 0 to 4 exclusive, read p[i]
read a, b
let ans be b - a + 1
for i = a to b inclusive
for j = 0 to 4 exclusive
if i is less than p[j], end loop iteration
decrement ans
end loop
print ans and newline
declare integers p1, p2, p3, p4, a and b
read input to p1, p2, p3, p4, a and b
declare integer variable with name sum = 0
for i from a to b inclusive
if i % p1 = i and i % p2 = i and i % p3 = i and i % p4 = i, increment sum by one
print sum
p=array of 4 int
for i=0 to 4 exclusive read p[i]
esq,dir=int
read esq,dir
res=0
for i=esq to dir inclusive
sort p
cnt=0
do
x=i
for j=0 to 4 exclusive x=x modulo p[j]
if x is i increment cnt
while next_permutation(p, p+4)
if cnt >= 7 increment res
print res
p1, p2, p3, p4 = int
a, b = int
ans = int with ans = 0
read p1 then p2 then p3 then p4 then a then b
for i = a to b inclusive
if i mod p1 is i and i mod p2 is is and i mod p3 is i and i mod p4 is i increment ans
print ans
create long long ints p1, p2, p3, p4, a, b, and ans = 0
read p1, p2, p3, p4, a, and b
for i = a to b
if i % p1 is equal to i, i % p2 is equal to i, i % p3 is equal to i, and i % p4 is equal to i, increment ans
print ans
p1,p2,p3,p4,a,b,x=int, cnt=0
read p1,p2,p3,p4,a,b
for i=a to b inclusive
x = (((i modulo p1) modulo p2) modulo p3) modulo p4
if x is i increment cnt
print cnt
create integers a, b, c, d, x, y and s where s = 0
read standard input to a, b, c, d, x and y
for i from x to y inclusive
if i % a, i % b, i % c and i % d are all equal to i, increment s
print s
a, b, p, q, r, s = short
read p then q then r then s then a then b
ans = short with ans = 0
for i = a to b inclusive
if ((((i mod p) mod q) mod r) mod s) is i increment ans
print ans
create int p, a, b
set min to 99999999
for i=1 to 4 inclusive
read p
if p < min, min=p
read a and b
if min >=a and <= b
print min-a
else if min < a
print 0
else if min > b
print b - a + 1
ifstream in( txt.in )
ofstream out( txt.out )
print fixed and setprecision(12)
let mx be a long integer with mx = 2e9
for i = 1 to 4 inclusive
let x be a long integer
read x
mx is equal to minimum of mx, x
let a, b be long integers
read a, b
let cnt be a long integer with cnt = 0
for i = a to b inclusive , cnt is equal to cnt + i is less than mx
print cnt and newline
declare integers a, b, integer array p size 4
for i = 0 to 4 exclusive, read p[i]
read a and b
sort between p and p + 4
declare integers x, cnt = 0
for i = a to b inclusive
declare integer match = 0
start loop
let x be i
for i = 0 to 4 exclusive, let x be x % p[i]
if x is i, increment match
while ( re-arrange elements lexicographically p, p + 4 )
if match is greater than or equal to 7, increment cnt
print cnt and '\n'
declare ints a, b, c, d, x, y and cnt
read a, b, c, d, x and y and keep looping
change the value of cnt to 0
for i from x to y inclusive
if i % a % b % c % d is equal to i, increment cnt by one
print cnt
let a, b, s be integers with s = 0 , p = array of integers of length 4
read p[0] , p[1] , p[2] , p[3] , a , b
sort the values p, p + 4
for i = a to b inclusive
if i is less than p[0], increment s by 1
print s and newline
declare integers p1, p2, p3, p4, a, b
read p1, p2, p3, p4, a, b
declare ans = 0 as integer
for i = a to b inclusive
declare integer ans = ((((i % p1) % p2) % p3) % p4)
if ans is i, increment ans
print ans and newline
create int x
read x
for i=0 to 3 exclusive
create int y
read y
x = min of x and y
create int a and b
read a and b
c=0
for i=a to b inclusive and to x, increment c
print c
a, b = int and s = int array of size 4
loop while reading s[0] then s[1] then s[2] then s[3] then a then b
sort s
if s[0] > b
print b - a + 1
else if s[0] > a
print s[0] - a
else
print "0"
call precision of 7 on cout
p1, p2, p3, p4, a, b = int
read p1 then p2 then p3 then p4 then a then b
minP = int with minP = mind of p1, min of p2, min of p3, p4
print max of 0, min of minP - a, b - a + 1
create int a, b, c, d
create int p and m
set p to 1000 and q to 31415
create int ans
read a, b, c and d
read n and m
set p to min of p and a
assign min of p and b to p
set p = min of p and c
p = min(p, d)
if p > m
set ans to m - n + 1
else
set ans = p - n
if ans <0, set ans equal to 0
print ans
declare integers p1, p2, p3, p4
declare integers a, b
read p1, p2, p3, p4, a, b
declare integer ans = 0
for i = a to b inclusive
if i is (((i % p1) % p2) % p3) % p4, increment ans
print ans and newline
declare new array of integers p with size 4
let a and b be new integer variables
create integer variable with name cnt
read input to p[0], p[1], p[2], p[3], a and b
start for loop from i = a to b inclusive incrementing i
sort p
create integer variable s with value 0
start the loop
increment s if (((i % p[0]) % p[1]) % p[2]) % p[3] == i
loop again while next_permutation(p, p + 4) is true
if s >= 7
print cnt
declare long longs p1, p2, p3, p4, a, b, ans = 0
declare inline read with no arguments, returning long long
declare x = 0 as long long
declare f = 0 as boolean
declare ch = read character as character
for ch is not digit, setting ch to read character, let f be f xor ( ch is '0' )
for ch is digit, setting ch to read character, let x be ( x bitshift left 3 ) + ( x bitshift left 1 ) + ( ch bitwise xor 48 )
return -x if f is true, else x
let p1 = result of run read, p2 = result of run read, p3 = result of run read, p4 = result of run read
let a be result of run read, let b be result of run read
for i = a to b inclusive
declare long longs z = i % p1, zz = i % p2, zzz = i % p3, zzzz = i % p4
if zz is zzz and zz is z and zz is zzzz and z is i, increment ans
print ans and newline
p1,p2,p3,p4,a,b=int, p=0
read p1,p2,p3,p4,a,b
for i=a to b inclusive
if i modulo p1 modulo p2 modulo p3 modulo p4 is i increment p
print p
let minn be a integer function which accepts integers a, b, c, d
a is equal to minimum of a and b
c is equal to minimum of c and d
return the value minimum of a and c
let p1, p2, p3, p4, a, b be integers
while read p1, p2, p3, p4, a, b
if p1 <= a or p2 <= a or p3 <= a or p4 <= a
print 0 and newline
proceed to next
let the value of integer p = minn(p1, p2, p3, p4)
if p is greater than b
print b - a + 1 and newline
proceed to next
print p - a and newline
a, b = integer, p = integer array of size 5
ans = integer = 0
read p[1], p[2], p[3], p[4], a, b
Min = integer = the lowest value between p[1], p[2], p[3], p[4]
if a < Min
ans = ans + (Min - a)
if b >= Min
print ans
ans = b = a + 1
print ans
create constant double pi = 3.14159265358979323846
create int array p of size 4
create integers a and b
read p[0], p[1], p[2], p[3], a, and b
let ints i, j, k, l, and m
create integer ctr = 0
make integer ans = 0
for i = a to b + 1 exclusive
for j = 0 to 4 exclusive
for k = 0 to 4 exclusive
if k is equal to j, continue to next loop
if l = 0 to 4 exclusive
if i is equal to j or l is equal to k, continue to next loop iteration
for m = 0 to 4 exclusive
if m is 1 or m is j or m is k, continue loop
if i is equal to (((i % p[j]) % p[k]) % p[l]) % p[m], increment ctr
if ctr is greater than or equal to 7, increment ans
set ctr to 0
print ans
arrA be integer array with 100005 elements
arrB be integer array with 100005 elements
nA, nB, k, m be integer
read nA, nB
read k, m
for integer i = 0 to nA exclusive, read arrA[i]
for integer i = 0 to nA exclusive, read arrB[i]
if arrA[k - 1] is less than arrB[nB - m]
print YES and newline
else
print NO and newline
let n1, n2, k, m be integers
read n1, n2, k, m
decrease k by 1
decrease m by 1
v1, v2 are ineger vectors
for integer i = 1 to n1 inclusive, read v1[i]
for integer i = 1 to n2 inclusive, read v2[i]
sort v1 from begin to end
sort v2 from begin to end
if v1[k] is less than v2[v2.size() - m - 1]
print YES and endline
else
print NO and newline
s=100002
a and b=array of s int
n1,n2=int
read n1,n2
k,m=int
read k,m
for i=0 to n1 exclusive read a[i]
for i=0 to n2 exclusive read b[i]
if a[k-1] < b[n2-m]
print YES
else
print NO
long long integer as a,b,m,n
read a,b
read m,n
integer as array ar size a + 5 and array br with size of b + 5
for i = 0 to less than a do the following
for j = 0 to less than b do the following
if ar[m - 1] is less than br[b - n] then do the following
output YES
else
output NO
a, b, n, k, c, p, i = int with c = 0 and p = 0 and i = 0
read a then b then n then k
A = int array of size a and B = int array of size b
read a values into A
read b values into B
for j = b - 1 to b - 1 - k decrementing j
if A[n - 1] < B[j]
increment c
else
goto jump
goto label jump
if c is k
print "YES"
else
print "NO"
na=int64_t
nb=int64_t
k=int64_t
m=int64_t
i=0
a=int64_t
read na
read nb
read k
read m
an=array of na int64_t
bn=array of nb int64_t
while i<na
read a
an[i]=a
increment i
end of while
i=0
while i<nb
read a
bn[i]=a
increment i
sort an
sort bn
if an[k-1]<bn[nb-m]
print YES
else
print NO
end if
a,b,k,m=int
read a,b,k,m
arr1=array of a+5 int,arr2=array of b+5 int
for i=0 to a exclusive read arr1[i]
sort first a items of arr1
for i=0 to b exclusive read arr2[i]
sort first b items of arr2
if arr1[k-1]<arr2[b-m]
print YES
else
print NO
let n, m, a, b be integers , arr = array of integers of length 100009 , brr = array of integers of length 100009
read n, m, a, b
for i = 1 to n inclusive , read arr[i]
for i = 1 to m inclusive , read brr[i]
if arr[a] is less than brr[m - b + 1]
print YES and newline
else do the following
print NO and newline
na,nb,ka,kb=int
read na,nb,ka,kb
a=vector of na int, b=vector of nb int
for i=0 to na exclusive read a[i]
for i=0 to nb exclusive read b[i]
k=0
for i=nb-1 down to 0 inclusive
if a[ka-1]<b[i]
increment k
else if k<kb and a[ka-1]>=b[i]
print NO
print YES
let a and b be integers
read in a and b
let n and m be integers
read in n and m
let mx and mn be integers
iterate for a times
let x be an integer
read in x
if i + 1 is equal to n, set mx to x
iterate for b times
let x be an integer
read in x
if i is equal to b - m, set mn to x
if mx is less than mn
print YES
or else
print NO
let line1, line2, first, second, i, j be long integers
read line1, line2
read first, second
stud1 = array of integers of length line1 , stud2 = array of integers of length line2
for i = 0 to line1 exclusive , read stud1[i]
for i = 0 to line2 exclusive , read stud2[i]
sort the values of stud1 and stud1 + line1
sort the values of stud2 and stud2 + line2
the integer value of mx = stud2[line2 - (second)]
let tot , y be integers with tot = 0, y = 0
for i = 0 to line1 exclusive
if stud1[i] is less than mx , increment tot by 1
if tot equals first
increment y by 1
stop
if stud1[i] is greater than mx , stop
if y is true
print YES and newline
else do the following
print NO and newline
declare integer vector a
declare integer vector b
declare integers na, nb, counta = 0, countb = 0
read na, nb
declare integers k, m, A, B
read k, m
for i = 0 to na exclusive
read A
add A to end of a
for i = 0 to nb exclusive
read B
add B to end of b
sort from beginning of a to end of a
sort from reverse beginning of b to reverse end of b
if a[k-1] is less than b[m-1]
print "YES\n"
else
print "NO\n"
declare strings n1, n2, k, m
declare integers v1, v2, x
read n1, n2
read k, m
for i = 0 to n1 exclusive
read x
if i is k - 1, let v1 be k
for i = 0 to n2 exclusive
read x
if i is n2 - m, let v2 be x
if v1 is less than v2
print "YES\n"
else
print "NO\n"
let n1, n2 be long integers
a is a long integer array of size 100007
b is a long integer array of size 100007
let k, m be long integers
read n1, n2
read k, m
for long integer i = 0 to n1-1, read a[i]
for long integer i = 0 to n2-1, read b[i]
sort the values a, a + n1
sort the values b, b + n2, greater<long long int>()
if a[k - 1] is less than b[m - 1]
print YES
newline
else
print NO
newline
let r1, r2 be integer array of size 100001
let a, b, c, d, e, f, g, h be integers
let v be a vector of integers
while read a, b
read c, d
for e= 1 to a inclusive, read r1[e]
f equals 0
for e= 1 to b inclusive
read r2[e]
if r2[e] > r1[c], increase f by 1
if f is greater than or equal to d
print YES and newline
else
print NO and newline
a, b be integer arrays of size 100040
let na, nb be integers
let x1, x2, y1, y2 be integers
let i, k, j, m be integers
s is a 2d character array
read na, nb
read k, m
for i = 0 to na exclusive , read a[i]
for j = 0 to nb exclusive , read b[j]
sort from a to a + na
sort from b to b + nb
for i = 0 to nb exclusive
if b[i] is greater than a[k - 1], stop
if i + m is less than or equal to nb
print YES and newline
else
print NO and newline
create integer vector of arr1, arr2
integer as a,b,k,m
read a,b,k,m
if k is greater than a or m is greater than b then do the following
output NO
for i = 0 to less than a do the following
integer as inp
read inp
add new element inp to end of vector arr1
for i = 0 to less than b do the following
integer as inp
read inp
add new element inp to end of vector arr2
if arr1[k - 1] is less than arr2[b - m] then do the following
output YES
else
output NO
declare constant integer MAX = 100001
declare long long arrays An size MAX, Bn size MAX
declare integers n, m, a, b
read n, m, a, b
for i = 1 to n inclusive, read An[i]
for i = 1 to m inclusive, read Bn[i]
sort from An + 1 to An + n + 1
sort from Bn + 1 to Bn + m + 1
if An[a] is less than Bn[m-b+1]
print "YES" and newline
else
print "NO", newline
a,b=int
read a,b
k,m=int
read k,m
ar1=array of a int
ar2=array of b int
for i=0 to a exclusive read ar1[i]
for i=0 to b exclusive read ar2[i]
if ar1[k-1]<ar2[b-m] and k<=a and m<=b
print YES
else
print NO
define integers a, b, c and d
read user input to a and b
if a is less than b
assign a to c
change the value of d to (b - a) / 2
print c, ' ' and d to the standard output
else
change c to b
set the value of d to (a - b) / 2
print c, ' ' and d to the output
a,b,c,d=int
read a,b
d=min(a,b)
c=max(a,b)-d
if c is odd, change sign of c
print d, space, c/2
declare integers a = 0, b = 0
declare integer counter_moda = 0, counter_utility = 0
read a and b
while a is greater than 0 and b is greater than 0
decrement a
decrement b
increment counter_moda
while a is greater than or equal to 2 or b is greater than or equal to 2
increment counter_utility
if a is greater than b
decrement a by 2
else
decrement b by 2
print counter_moda, " ", counter_utility, newline
a,b=int
read a,b
if a>b swap a and b
print a, space, (b-a)/2
declare integers a, b
read a, b
declare m = minimum of a and b as integer
print m, ' '
decrement a by m
decrement b by m
print a/ 2 + b / 2, newline
let a, b be integers
read a, b
the integer value of r1 = minimum of a and b
the integer value of r2 = (max(a, b) - min(a, b)) / 2
print r1 and space and r2 and newline
declare integers a, b
read a, b
declare integer MIN = minimum of a and b
declare integer MAX = maximum of a and b
print MIN and ' ' and (MAX-MIN) / 2 and newline
let a, b, ans be integers with ans = 0
read a, b
ans is equal to mimimum of a, b
print ans and space
ans equals max(a, b) - ans) >> 1
print ans and endline
a,b=int
while read a,b print min(a,b),space,(max(a-b)-min(a,b))/2
declare long long n, a, b, res
declare string s
declare long long array arr size 100005
declare long long array arr1 size 100005
read a, b
print minimum of ( a and b ), " ", absolute value of ( a - b ) / 2
print "\n"
declare integer variables a, b and x
read variables a and b from the input
assign the new value = min of a and b to x
print x and " "
decrease a by x
change b to b - x
print b / 2 if a = 0, or a / 2 if a is not 0
print "\n"
declare integers n, m
read n and m
declare integer a = minimum of n and m
declare integer b = ( maximum of ( n and m ) - a ) / 2
print a and " " and b and newline
a, b = int
read a, b
ds, ss, k = int with ds = 0, ss = 0, k = 0
if (a > b)
ds = b
k = a - b
ss = k / 2
else if (a < b)
ds = a
k = b - a
ss = k / 2
else
ds = a
ss = 0
print ds," ",ss
let a, b be integers
read a , b
if a equals b
print a and space
print 0 and newline
else if a is greater than b
print b and space and (a - b) / 2 and newline
else do the following
print a and space and (b - a) / 2 and newline
declare integer variables a and b
read input to a and b
prazn is a new integer with value min of a and b
create new integer podin = ((max of a and b) - prazn) / 2
print prazn, " " and podin to the standard output
declare ints r and b
read r and b from the user input
if r is less than b
print r, " " and (b - r) / 2
else
print b, " " and (r - b) / 2
let n, m, i and k be integers
while reading in n and m
if n is less than m set i to n, otherwise set i to m
set k to abs(n - m) / 2
print i, ' ', and k
let a, b, count1 , count2 be integers with count1 = 0, count2 = 0
read a , b
for integer i = 0 , the condition is always true , increment i by 1
if (a equals 0 and b equals 1) or (a equals 1 and b equals 0) or (a equals 0 and b equals 0) , stop
decrement a by 1
decrement b by 1
increment count1 by 1
if a equals 0 and b is greater than 1
while b is not equal to 0
decrement b by 2
increment count2 by 1
if b is less than 0 or b equals 1 , stop
stop
if a is greater than 1 and b equals 0
while a is not equal to 0
decrement a by 2
increment count2 by 1
if a is less than 0 or a equals 1 , stop
stop
print count1 and space and count2 and newline
let n, m be integers
read n and m
print min(n, m) and space and (max(n, m) - min(n, m)) / 2 and newline
r,b=int
p,q=int
read r,b
p=min(r,b)
q=abs(r-b)/2
print p, space, q
function prime with int argument n that returns bool
declare integer c with value 0
in a for loop, change i from 1 to n exclusive incrementing i
increment c if n modulo i is 0
if c is equal to 1
return true
else
return false
create ints a, b, a2, b2, a1 and b1 with a1 and b1 = 0
read standard input to a and b
if a is greater than b
set a2 to a
for i = 0 to a2 exclusive
if b != 0
increment a1 by one
decrement b
decrement a by one
if b is equal to 0, set the value of b1 to a / 2
else if a is less than b
change b2 to b
for i from 0 to b2 exclusive incrementing i
if a != 0
increment a1 by one
decrement b
decrement a
if a is equal to 0, set the value of b1 to b / 2
else
set a1 to (a + b) / 2
print a1, " " and b1 to the standard output
a,b=int
read a,b
mn=min(a,b), mx=max(a,b)
print mn, space, (mx-mn)/2
let a , b be integers
read a , b
print min(a, b) and space and (max(a, b) - min(a, b)) / 2 and newline
INF=3f3f3f3f in exadecimal
mod = 1000000007
EPS=0.0000000001
PI=2*acos(0)
maxn=101666
a,b=int
read a,b
c=min(a,b)
print c, space
subtract c from a and from b
if a is 0
print b/2
else
print a/2
a,b=int
read a,b
ans1 and ans2=int
ans1=min(a,b)
ans2=max(a,b)
subtract ans1 from ans2
divide ans2 by 2
print ans1, space, ans2
declare integers a, b
while read a, b
declare integer ans1 = minimum of a and b
declare integer k = maximum of a and b
declare integer ans2 = ( k - ans1 ) / 2
print ans1 and " " ans2 and newline
declare integers a, b, x, y, c = 0
read a, b
let x be absolute value of ( a - b )
print minimum of ( a and b ), " ", x / 2, newline
declare integers a, b
read a, b
print minimum of a and b, " ", ( maximum of ( a and b ) - minimum of ( a and b ) ) / 2, newline
declare integer dx = {1, 0, -1, 0}
declare integer dy = {0, -1, 0, 1}
declare long longs a, b
read a, b
declare long longs Min, s
if a is greater than b
let Min be minimum of a and b
let s be ( a - Min ) / 2
print Min and " " and s and newline
else
let Min be minimum of a and b
let s be ( b - Min ) / 2
print Min and " " and s and newline
a, b = int
read a then b
if a < b swap a and b
print b and a - b
a, b, max, min, ans be integers
read a, b
if a is greater than b
max equals a
min equals b
else
max equals b
min equals a
ans equals (max - min) / 2
print min space ans and endline
create long long ints n, m, a and b
read n, m, a and b
declare long long int variable _s = 0
if n % m is not 0
create long long int x = n / m * m + m
declare long long int variable y = x - m
change _s to min of (x - n) * a and (n - y) * b
print _s and "\n"
n, m, a, b = long long
read n then m then a then b
if n is a multiple of m
print 0
else if n is greater than m
res = long long
if n / m equals 1
set res to 2
else
set res to n / m + 1
print min of (n - n / m * m) * b and (res * m - n) * a
else
print min of n * b and (m - n) * a
create long longs a, b, n, m and ans
read n, m, a and b
if n % m is 0
assign 0 to ans
else if n is less than m
assign min(n * b, (m - n) * a) to ans
else
declare long longs cnt1 and cnt2
set cnt1 to n modulo m
set cnt2 to n / m + 1
assign min((cnt2 * m - n) * a, cnt1 * b) to ans
print ans
S, T = string
M,A,B,sum,x,y,K,ans,val,L,a = long long integer
create character variable C
read N,M,A,B
set x to ((N - 1) / M + 1) * M
set y to N / M * M
output min((x - N) * A, (N - y) * B)
lim = const int with lim = 2e5
inp = int array of size lim + 3
n, m, a, b = long long
read n then m then a then b
ans = long long with ans = min of (n mod m) * b and (m - (n mod m)) * a
print ans
declare long longs n, m, a and b
read n, m, a and b and loop further
declare long long tmp = n / m
declare long long ans = 1e15
set ans to min of ans and (n - tmp * m) * b
set ans to min of ans and (tmp + 1) * m - n) * a
print ans
n, m = long long integers
integers = a,b
read n,m,a,b
set long long x to (n - n / m * m) * b, y =((n / m + 1) * m - n) * a
if x is greater than y then do
output y
else
output x
declare const double pi = acos(-1)
declare const double EPS = 1e-6
declare const int INF = 1e9 + 40
create const long long INF64 = 1e18 + 40
create const double INFd = 1e9 + 40.0
declare const long long MOD = (int)1e18 + 7
declare const long long MODf = 998244353
declare const int N = 1000 * 10 + 15
integer function solve
declare long longs n, m, a and b
read n, m, a and b
print min of n % m * b and (m - n % m) * a; print '\n'
call function solve
define integers n, m, a, b
define ints dem, bui, and tm
read n, m, a, and b
set tm to n / m
assign (n - tm m) b to dem
set bui to ((tm + 1) m - n) a
print min(dem, bui) and a newline
m, n, a, b = integers
Read m, n, a, b
if n modulo m is 0
print 0 and a new line
else do the following
print minimum value of (m * (n / m + 1) - n) * a and n % m * b and a new line
i, j, k, m, n, t, a, b =integers
Read n, m, a, b
if n modulo m is 0
print 0 and a new line
set k to n / m
set i to n - k * m
set j to (k + 1) * m - n
print minimum value of a * j and b * i and a new line
create long long int n, m a and b
print n, m, a and b
let sum, min, ans be long long int
if n mod m = 0
set min = 0
else
sum = a * (((n / m + 1) * m) - n)
assign sum to min
set ans = b * (n - ((n / m) * m))
if ans less than min, min = ans
print min
create constant long long mod with mod = 1e9+7
create constant integer MAX with MAX = 1e6+7
create long longs n, d, a, b
read n read d read a read b
create long long ans with ans = ( n % d ) * b
create long long r with r = ( n / d + 1 ) * d
set ans to minimum of ( ans and ( r - n ) * a )
print ans print "\n"
n,m,a,b = long long integers
read n,m,a,b
output min(b * (n modulo m), a * (((n / m) + 1) * m - n))
create long longs n, m, a, b
while read n read m read a read b, print minimum of ( (m - n % m) * a and n % m * b ) print newline
declare long long variables n and k
create ints a and b
read n, k, a and b
if n % k is 0
print 0
else
declare long long sum1 = n % k * b
declare long long variable sum2 = (k - n % k) * a
print min of sum1 and sum2
n,m,a,b = long long integers
read n,m,a,b
if n modulo m is 0 then do
output 0
else
set long long tmp to n / m
output min((n - tmp * m) * b, ((tmp + 1) * m - n) * a)
n, m, a, b, sum1, sum2 =integers
Read n, m, a, b
if(n modulo m is 0
print 0 and a new line
set sum1 to ((n / m + 1) * m - n) * a
set sum2 to (n - (n / m) * m) * b
if sum1 is greater than sum2
print sum2 and a new line
else do the following
print sum1 and a new line
n, m = long long
a, b = int
read n then m then a then b
plus, minus = long long with plus = 0 and minus = 0
mod = long long with mod = n mod m
div = long long with div = n / m
if n is not a multiple of m
if n is less than m
set plus to m - n
set minus to n
else
set plus to absolute of n - ((div * m) + m)
set minus to mod
else
print 0
print min of plus * a and minus * b
n, m, a, b, r = long long int
read n, m, a, b
r = n modulo m
print min of r * b and (m - r) * a)
n, m, a, b, x =integers
Read n, m, a, b
sum, sum2 =integers, both set to 0
if n is greater than or equal to m
if n modulo m is 0
print 0 and a new line
set x to n modulo m
set sum1 to sum1 + b * x
set sum2 to sum2 + a * (m - x)
print minimum value of sum1 and sum2 and a new line
create long longs n, m, a, b
read n read m read a read b
create long longs resa, resb
create long long mod with mod = n % m
set resb to mod * b
if n is greater than or equal to m
set resa to ( round up ( double casted ( n ) / m ) * m - n ) * a
else
set resa to ( m - n ) * a
print minimum of resa and resb print newline
create constant integer INF with INF = 0x3f3f3f3f
create constant double PI with PI = acosign of -1.0
create long longs n, m, a , b
read n read m read a read b
create long long res with res = minimum of ( (m - (n % m)) * a and (n % m) * b)
print res print newline
n, m , a, b num = long long with num having value of 0
read n, m, a and b
if n mod m equals 0
set num to 0
else if n is less than m
set num to the minimum of (a * (m-n)) and n*b
else
y, z = long long with y value of n mod m and z value of m minus n mod m
set num to the minimum of y*b and z*a
print num
n, m, a, b =integers
Read n, m, a, b
print minimum value of (m - n % m) * a and n % m * b and a new line
declare long longs n and m
declare integers a and b
read from the input to n, m, a and b
print min of n % m * b and (m - n % m) * a
let n, m, a, b = long long
whilte reading new values for n, m, a, and b, print min((m - n modulo m) * a, n modulo m * b)
n, m, a, b = long long
read n, m, a, b
ans = long long
if n > m
ans = min of (m - n modulo m) modulo m * a and (n % m) * b
else
if n modulo m is 0
ans = 0
else
ans = (n + (m - n modulo m) modulo m) / m
ans = min of (ans * m - n) * a and (n - (n / m) * m) * b
print ans
n, m, a, b = long long
read n then m then a then b
s = long long with s = (n + m - 1) / m
t = long long with t = n / m
print min of (s * m - n) * a and (n - t * m) * b
n, m, a, b, x, y =integers
Read n, m, a, b
set x to n modulo m
set y to m - x
set x to x * b
set y to y * a
print minimum value of x and y and a new line
let n, m, a and b be long long
read n, m, a and b
set k= n/m
assign (n - k * m) * b to t1
t2 = (m * (k + 1) - n) * a
if t1 greater than t2
print t2
else
print t1 and a newline
a,b,c=int
read a,b,c
x,y,z=int
z=sqrt((b*c)/a)
y=c/z
x=b/z
print 4*(x+y+z)
di = int vector array of size 3
linha0 = int vector array of size 10010
linha1 = int vector array of size 10010
linha2 = int vector array of size 10010
in function multiplos taking int a, int b, int h
menor = int with menor = a
if a > b set b to menor
for i = 1 to menor inclusive
if a and b are a multiple of i append i to di[h]
a, b, c, s = int
read a then b then c
call multiplos on a, b, 0
call multiplos on a, c, 1
call multiplos on b, c, 2
for i = 0 to size of di[0]
for j = 0 to size of di[1]
if di[0][i] * di[1][j] is a
for u = 0 to size of di[2]
if d[0][i] * di[2][u] is b
if di[1][j] * di[2][u] is c set s to di[2][u] + di[1][j] + di[0][i]
total = int with total = 4 * s
print total
create ints A1, A2 and A3
read standard input to A1, A2 and A3
declare integer variable with name l = square root of (A1 * A2 / A3)
declare integer variable b with value = square root of (A3 * A1 / A2)
create new integer called h = square root of (A3 * A2 / A1)
print 4 * (l + b + h) and "\n"
create ints ab, bc, ca, a, b, c and s
read user input to ab, bc and ca
assign square root of ((ab * ca) / bc) to a
change b to the square root of ((bc * ab) / ca)
set c to the square root of ((ca * bc) / ab)
assign 4 * (a + b + c) to s
print s
create new long longs a, b and c
read from the input to a, b and c
create long long variable with name z with value = sqrt((b * c) / a)
create new long long x = c / z
declare long long y = b / z
print x * 4 + y * 4 + z * 4 and '\n'
l,h,b,a1,a2,a3=int
read a1,a2,a3
l=sqrt((a2*a3)/a1)
b=sqrt((a1*a3)/a2)
h=sqrt((a2*a1)/a3)
print 4*(l+b+h)
u,v,w=long long int
read u,v,w
t1,t2,t3=long long int
t1=sqrt((u*v*w))/u
t2=sqrt((u*v*w))/v
t3=sqrt((u*v*w))/w
print 4*(t1+t2+t3)
a,b,c=int
read a,b,c
print 4*(sqrt(a*c/b)+sqrt(b*c/a)+sqrt(a*b/c))
let a, b, c be double values
read a, b, c
let s be a double value with s = square root of a * b * c
print 4.0 * (s / a + s / b + s / c) and newline
lb,bh,hl,l,b,h=int
read lb,bh,hl
b=sqrt(lb*bh/hl)
l=lb/b
h=hl/l
print 4*(l+b+h)
create ints a, b and c
read user input to a, b and c
create new integer m with value = (max of a and max(b, c))
declare integer r = 0
in a for loop, change i from 1 to m inclusive incrementing i
if a % i = 0 and b % i = 0 and (a / i) * (b / i) = c
change r to a / i + b / i + i
set r to r multiplied by 4
print r to the standard output
in the function gcd that takes integer a,b and returns integer
if b is 0
return a
else
gcd of b and a modulo b
x, y, z = integers
while read x, y, z
c = integer with c = square root of (z * y) / x)
a = integer with a = (x * c) / y
b = integer with b = x / a
print a * 4 + b * 4 + c * 4
a, b, c = int
read a then b then c
print 4 * (sqrt of a * b / c + sqrt of b * c / a + sqrt of a * c / b)
a, b, c, i, j, k = int
read a then b then c
for i = 1 to 10005
for j = 1 to 10005
for k = 1 to 10005
if i * j is a and i * k is b and j * k is c
print 4 * i + 4 * j + 4 * k
if i * k is greater than b or j * k is greater than c break
if i * j is greater than a or j is greater than c break
if i is greater than a or b beak
in function fatora taking int factor, int n and returning pointer to int
f = pointer to int with f = new int of size 2
loop while n mod factor is not 0 increment factor
set f[0] to factor
set f[1] to n / factor
return f
area = int vector
a, f3_1, f3_2, edges_sum = int
factor = pointer to int
for i = 0 to 3
read a
append a to area
for i = 0 to area[0] / 2 + 1
set factor to fatora of i + 1, area[0]
if area[1] mod factor[0] is 0 and area[2] mod factor[1] is 0
set f3_1 to area[1] / factor[0]
set f3_2 to area[2] / factor[1]
if f3_1 is f3_2 break
else if area[2] mod factor[0] is 0 and area[1] mod factor[1] is 0
set f3_1 to area[1] / factor[1]
set f3_2 to area[2] / factor[0]
if f3_1 is f3_2 break
set edges_sum to 4 * (factor[0] + factor[1] + f3_1)
print edges_sum
let di be a vector containing integers with size 3
let linha0 be a vector containing integers with size 10010
let linha1 be a vector containing integers with size 10010
let linha2 be a vector containing integers with size 10010
let multiplos be a void function which accepts int a, int b, int h
let menor be a integer with menor = a
if a is greater than b, b is equal to menor
for i = 1 to menor inclusive
if a modulo i is equal to 0 and b modulo i is equal to 0, push_back i in di[h]
let a, b, c, s be integers
read a, b, c, s
multiplos of a, b, 0
multiplos of a, c, 1
multiplos of b, c, 2
for i = 0 to (int)di[0].size() exclusive
for j = 0 to (int)di[1].size() exclusive
if di[0][i] * di[1][j] is equal to a
for u = 0 to (int)di[2].size() exclusive
if di[0][i] * di[2][u] is equal to b
if di[1][j] * di[2][u] is equal to c , the value of s = di[2][u] + di[1][j] + di[0][i]
let total be a integer with total = 4 * s
print total and newline
declare x, y, z as integers
read x, y, z
declare integers a, b, c
let a be square root of (x * z) / y
let b be square root of (x * y) / z
let c be square root of (y * z) / x
print 4 * ( a + b + c ), newline
a, b, c = int
loop while reading a then b then c
ans = int with ans = 4 * (sqrt of a * b / c + sqrt of a * c / b + sqrt of b * c / a)
print ans
create doubles A, B and C
declare integers a, b and c
read a, b and c
change A to the square root of a * b / c
assign sqrt(b * c / a) to B
assign the square root of c * a / b to C
create new integer variable count = (A + B + C) * 4
print count to the standard output
create long long integers a, b, c, and s
declare solve
read a, b, and c
set s to s + (long long)sqrt(a * b / c)
set s to s + (long long)sqrt(b * c / a)
set s to s + (long long)sqrt(a * c / b)
print s * 4
declare prep
let long long int t = 1
call prep
print fixed and setprecision(12)
while t-- is truthy, call solve
declare three integer variables ab, bc, and ac
read in ab, bc and ac
variable b is equal to the square root of the value of ab * bc divided by ac
variable a is equal to ab divided by b
c is equal to bc divided by b
print the sum of a multiplied by 4, b multiplied by 4 and c multiplied by 4
a,b,c=int
x,y,z=int
read a,b,c
x=sqrt((a*c)/b)
y=sqrt((b*a)/c)
z=sqrt((b*c)/a)
print x*4+y*4+z*4
x, y, z = long long
read x then y then z
abc = long long with abc = (sqrt of x * y * z + 0.00001) as long long
ans = long long with ans = 4 * (abc / x + abc / y + abc / z)
print ans
create long long ints a, b, and c
read a, b, and c
let long long int p = sqrt(a * b * c)
let long long integer res = 0
set res to res + (p / a + p / b + p / c)
print res * 4
create int a, b and c
read a, b, c
sum=0
set sum to square root of (a * b) / c) + sqrt of (b * c) / a) + sqrt((c * a) / b)
print sum*4
declare a, b, c, as integers
read a and b and c
declare x = 0, y = 0, z = 0, flag = 0, as integers
let x be square root of ((b * c) / a)
let y be square root of ((c * a) / b)
let z be square root of ((a * b) / c)
print 4 * ( x + y + z ), newline
m,n,p=int
read m,n,p
a=sqrt(p*m/n)
b=sqrt(m*n/p)
c=sqrt(n*p/m)
sum=4*(a+b+c)
print sum
declare integers m, n, p, sum = 0, a, b, c
read m read n read p
let a be square root of p * m / n
let b be square root of m * n / p
let b be square root of n * p / m
let sum = 4 * (a + b + c)
print sum print newline
declare integers a, b and c
read standard input to a, b and c
declare integer variable with name x with value sqrt((a * b) / c)
declare integer y with value = square root of ((a * c) / b)
z is a new integer = square root of ((b * c) / a)
print 4 * (x + y + z) to the standard output
x1, x2, x3 = integers
read x1, x2, x3
sum = integer with sum = sqrt((x1 * x3) / x2) + sqrt((x2 * x1) / x3) + sqrt((x3 * x2) / x1)
sum = sum * 4
print sum
create integer array arr of size 104
make ints n and k
read n and k
for i = 0 to n exclusive, read arr[i]
make integer total = 0
for i = 0 to n exclusive
for i = 0 to n exclusive
set total to total + arr[i]
subtract min(total, 8) from total
if k is less than or equal to 0
print i + 1
show -1
declare int variables n and k
read from the input to n and k
define new integer a
define integers totalChocolate, days and remain = 0
declare boolean variable with name flag with value false
for integer i = 0 to n exclusive
read standard input to a
change a to the sum of a and remain
if a is greater than 8
assign a - 8 to remain
change totalChocolate to the sum of totalChocolate and 8
else
add a to totalChocolate
assign the new value = 0 to remain
increment days by one
if totalChocolate >= k
assign true to flag
break
if flag is true
print days
else
print "-1" to the standard output
let MAX be a constant integer 100001
An, Bn are integer arrays
n, k are integers
read n, k
for integer i = 1 to n inclusive, print An[i]
sum , flag, coun be integers 0
for integer i = 1 to n inclusive
increase coun by An[i]
if coun is greater than 8
increase sum by 8
decrease coun by 8
else
increase sum by coun
coun is 0
if sum is greater than k
flag is 0
print i and endline
stop
if flag is 0, print -1 and endline
n,k,a=int, c,v=0
read n,k
for i=1 to n inclusive
read a
if a <= 8
if c >= 8-a
add 8 to v
subtract 8-a from c
else
add a+c to v
c=0
else
add 8 to v
add a-8 to c
if v >= k
print i
print -1
create int a, b, c, t, l, i, j, m, set sum and count to 0
read a and b
for i=1 to a inclusive
read c
set sum to sum + c
set m to min of 8 and sum
set sum to sum - m
b= b-m
increment count
if b<=0
if b>0
print -1
else
print count
n,k,ans,sum,aux,candies=int
ans,sum,candies=0
found=false
read n,k
for i=0 to n exclusive
read aux
if found continue
add aux to candies
aux=min(candies, 8)
add aux to sum
increment ans
subtract aux from candies
if sum>=k found=true
if not found
print -1
else
print ans
let n, k, a, b = 1, c = 0, d = 0, e, s be integers
read n. k
for integer i = 1 to n inclusive. read s[i]
while b is less than or equal to n
e equals s[b] + d
if e is less than or equal to 8
c equals c + e
d equals 0
b increased by 1
if c is greater than or equal to k, stop
else if e is greater than 8
increment c by 8
d equals e minus 8
increment b by 1
if c is greater than or equal to k, stop
if c is less than k
print -1 and newline
else
print b - 1 and newline
n, k = integers
a = array of 1007 integers
Read n, k
_d, _c =integers with _d = 0, _c = 0
for i = 1 to n exclusive
Read n values into array a
if k is greater than 0
set _c to _c + a[i]
x = integer, set to minimum value of 8LL,and _c
set k to k - x
set _c to _c - x
set _d to i
if k is less than or equal to 0
print _d and a new line
else do the following
print -1 and a new line
n, k =integers
Read n, k
arr = array of n integers with 0 elements
answer = integer with 0
sum = integer with 0
Read n values into array arr
temp = integer with 0
for i = 0 to n exclusive
set arr[i] to arr[i] + temp
if arr[i] is greater than or equal to 8
set k to k - 8
set temp to arr[i] - 8
increment answer
else do the following
set k to k - arr[i]
set temp to 0
increment answer
if k is less than or equal to 0
print answer and a new line
print -1 and a new line
n, k, a, b, c, d, e = integers and s = array of 117 integers
Read n and k
Read n values into array s
while b is less than or equal to n
set e to s[b] + d
if e is less than or equal to 8
set c to c + e
set d to 0
increment b
if c is greater than or equal to k, then Terminate the loop
else if e is greater than 8
set c to c + 8
set d to e - 8
increment b
if c is greater than or equal to k, then Terminate the loop
if c is less than k
print -1 and a new line
else do the following
print b - 1 and a new line
define integers n and k
read n and k
declare integer variables arya and bran = 0
define new integer called s = 0
for i = 0 to n exclusive
create integer t
read standard input to t
if t + arya >= 8
increase bran by 8
increase arya by t - 8
increase s by 1
else
add t + arya to bran
change arya to 0
increase s by 1
if bran >= k
print s
if bran <= k, print -1 to the standard output
declare solve taking in ints n and k and int array arr and returning integer
create integer t = 0
for i = 0 to n exclusive
set t to t + arr[i]
make integer val = min(8, t)
subtract val from k
set t to t - val
if k is less than or equal to 0, return i + 1
return -1
create ints n and k
read n and k
create int array arr of size n
for i = 0 to n exclusive, read arr[i]
print the result of solve(arr, n, k)
n, i, k, j, t, m =integers with t = 0
Read n and k
for i = 0 to n exclusive
Read j
set j to j + t
set t to 0
if j is greater than or equal to 8
set t to t + j - 8
set j to 8
set k to k - j
if k is greater than or equal to 0, then Terminate the loop
if k is greater than 0
print -1 and new line
else do the following
print i + 1 and a new line
declare new integer variables n and k
read n and k from the input
create vector of integers a with n elements
create new integer called curr = 0
goal is a new integer = k
create integer variable count with value 0
for integer i = 0 to n exclusive incrementing i
read a[i]
set curr to curr + a[i]
declare integer variable with name maxGive = min of 8 and curr
set the value of curr to curr - maxGive
change goal to goal - maxGive
if goal <= 0
else
increment count
if goal is greater than 0, set the value of count to -2
print count + 1
n, k = int
read n, k
c = int array length n
for i = 0 to n exclusive, read c[i]
if k <= n*8
sum = 0 = int
p = 0 = int
for i = 0 to n excluisve
if c[i] <= 8
set c[i] to c[i]
else
a = int = c[i] - 8
set c[i] to 8
set c[i+1] to c[i+1]+a
increment sum by c[i]
if sum >= k
print i + 1
exit loop
else
increment p
if p = n then print -1
else
print -1
declare integers a, b, c = 0
read a, b
while b is true
declare integer d = b % 10
let c be c * 10 + d
let b be b / 10
print a + c and newline
a, b = long long
read a, b
temp = long long with temp = 0
while (b > 0)
temp = (temp * 10) + (b modulo 10)
b = b / 10
print a + temp
a and num are integers with num = 0
b is a new array of characters with 100 elements
read a from the user input
read standard input to b
reverse b
increment i by 1 in a loop, starting from 0 to the length of b, ans change num to (num * 10) + (b[i] - '0') on every loop
print num + a
a,b=int
read a,b
y=array of 30 int
r=b, d=0
while r>0
y[d]=r modulo 10
divide r by 10
increment d
for i=0 to d/2 exclusive swap y[i] and y[d-1-i]
w=0, k=1
for i=0 to d exclusive
add y[i]*k to w
multiply k by 10
print w+a
a, b, c = integers set c = 0
read a and b
while b != 0
set c = c * 10 + b decrement 10
set b = b / 10
print a + c
a, be and eb are integers with eb = 0
read standard input to a and be
while be is not 0
change the value of eb to 10 * eb + be % 10
change the value of be to be divided by 10
print a + eb and '\n'
let a, b and c be integers, set c to 0
read in a and b
while b is not 0
let d be an integer and set it to b % 10
set c to c * 10 + d
set b to b / 10
print a + c
let a, ans , plus be long integers with ans = 0
let b be a string
read a and b
for i = 0 to (length of b) - 1 inclusive
plus = (int)b[i] - 48
for j = 0 to i inclusive , plus is equal to plus * 10
divide plus by 10
increment ans by plus
increment ans by a
print ans and new line
a, b =integers
Read a, b
reversedNumber, remainder = integers with reversedNumber = 0
while b is not equal to 0
set remainder to b modulo 10
set reversedNumber to reversedNumber * 10 + remainder
set b to b / 10
print a + reversedNumber and a new line
in int rever taking n = int
rn = 0 = int
while n
set rn to rn * 10 + n mod 10
divide n by 10
return rn
a,b = int
while reading a and b, print a + rever of b
let ff be the ifstream file.txt
s1, s2 = string
read s1 and s2
reverse s2
while length of s1 is not length of s2
if lenght of s1 is > length of s2
call insert on s2 with args beginning of s2, 1, '0'
else
call insert on s1 with args beginning of s1, 1, '0'
x, y = int
iss of s2 = istringstream
iss >> x
iss1 of s1 = istringstream
iss1 >> y
print x+y
create int int a, b, c, set c to 0
read a and b
while b different from b
set d to b mod 10
set c to c * 10 + d
assign b/10 to b
print a+c
declare rev taking in long long x and returning long long
create long long int ans = 0
while x is truthy
set ans to ans * 10 + (x % 10)
set x to x / 10
return ans
make long long ints a and b
read a and b and while a and b are truthy
set b to return result of rev(b)
output a + b
declare strings a, b, c
read a and b
reverse sort from beginning of a to end of a
while size of a is less than size of b, increment a by "0"
while size of b is less than size of a, increment b by "0"
declare integer vector ans
declare integer sisa = 0
for i = 0 to size of a exclusive
declare integer x = a[i] - '0' + b[i] - '0' + sisa
let sisa be 0
add ( x % 10 ) to end of ans
let sisa be x / 10
while sisa is greater than 0
add (sisa%10) to end of ans
let sisa be sisa / 10
while size of ans is greater than 1 and back of ans is 0, remove last element from ans
for i = size of ans - 1 to 0 inclusive, decrementing i, print ans[i]
print newline
declare long longs n, i, j, ans = 0
declare strings s1, s2
read s1, s2
reverse sort from beginning of s2 to end of s2
declare stringstreams geek initialized with s2, geek1 initialized with s1
declare long long a
read a using geek
declare long long b
read b using geek1
print a + b and newline
declare new string variables a and b
read a and b
reverse b
create new stringstream n1 from the string a
create new stringstream n2 from the string b
define new integers num1 and num2
read num1 from n1
read the new value for num2 from n2
declare long long integer res = num1 + num2
print res to the standard output
let a, b be strings
read a, b
reverse the values of b from beginning to end
stringstream allows you to read n1 from a
stringstream allows you to read n2 from b
let num1, num2 be integers
n1 >> num1
n2 >> num2
the long integer value of res = num1 + num2
print res and newline
create int a, b, c, set c to 0
read a and b
while b different from 0
d= b mod 10
set c = c * 10 + d
b= b/10
print a +c
a1, a2, k, a3 =integers with a3 = 0
Read a1, a2
while a2 is not equal to 0
sett k to a2 modulo 10
set a3 to a3 * 10 + k
set a2 to a2 / 10
print a1 + a3 and a new line
create int a, b, c
read a and b
while b > 0
set d to b mod 10
set c = c * 10 + d
assign b/10 to b
print a + c
declare boolean flag
declare integer arrays a size 71720, dp size 811 by 811, integers n, i, sumend, m, j, k, x, y, b, c
declare long long integer sum
declare boolean cmp with integers a, b as arguments, returning boolean
return a is greater than b
declare gcd with integers a, b as arguments, returning integer
if not b, return a from function
return result of run gcd(b,a%b)
declare maxx with short integers a, b as arguments, returning integer
if a is greater than b, return a
return b from function
declare gqt with integer n as argument, returning integer
if not n or n, return 1 from function
if n is 2, return 0 from function
for i = 3 to square root of n inclusive
if n % i is 0, return 1
read x, y
while y is not 0
let sum be y % 10
let sumend be sumend * 10
increment sumend by sum
let y be y / 10
increment sumend by x
print sumend and newline
declare int variables a and b
read input to a and b
create integers vectors x and y
while a is not 0
push a % 10 after the last element of x
change the value of a to a divided by 10
while b
push b % 10 to the end of y
set b to b divided by 10
reverse y
push 0 to x while size of x < size of y
push 0 to y while size of y < size of x
for i from 0 to length of y exclusive, increase x[i] by y[i]
declare new long long ans = 0
in a loop for i from size of - 1 to 0 inclusive, counting down, change ans to 10 * ans + x[i]
print ans to the standard output
create integers a, b, i, j, and x
read a and b
create integer sum = 0
while b is not 0
set sum to sum * 10
set sum to sum + b % 10
divide b by 10
set sum to sum + a
display sum
let s, ss be strings
read s, ss
reverse the values of ss from beginning to end
let x , y be integers
read a stringstream into sss and read a stringstream into ssss
shift sss to the right by s
shift sss to the left by x
shift ssss to the right by ss
shift ssss to the left by y
print x + y and newline
create string b
create long long a, c, d
read a and b
c=0
for I00 to length of b -1 exclusive, set c = c * 10 + b[i] - 0
d=a+c
print d
n =integer
Read n
print 25 and a new line
n=int
read n
print 25
let n be a long integer
read n
print 25 and newline
declare new int variables a and b
read variable a from the input
print "25"
n = long long
read n
print "25"
let n, a, i be float values
let s be a integer
read n
s is equal to 25
if n is equal to 1 , s is equal to 5
print s and newline
n=long long int
read n
print 25
n =integer
Read n
print 25 and a new line
n = long long
loop while reading n
if n is 1
print 5
else
print 25
n = integer
read n
print 25
create long long int n
read n
if n is equal to 1, print 5
if n equals 0, print 1
if n is greater than or equal to 2, print 25
long long function Q_pow with long long arguments a and b
declare long long variable with name ans = 1
while b > 0
if b is odd
change a to the remainder of a divided by 100
change ans to the ans modulo 100
set ans to ans multiplied by a
change a to a modulo 100
multiply a by a
divide b by 2
return ans % 100
create long long variable n
read n and print the result of Q_pow(5, n)
n =integer
Read n
print 25 and a new line
in, ans =integer with ans = 25
Read in
print ans and a new line
n =integer
Read n
print 25 and a new line
create integer i, j
create long long n
read n
print 25
n = long long
while n can be read as a valid long long, print 25
print 25 and a new line
create unsigned long long variable n
read user input to n
print 25 to the standard output
j =integer
Read j
print 25 and a new line
n, b =integers with b = 25
Read n
print b and a new line
n=int
read n
print 25
print 25
print 25 and a new line
let n be a long integer
while read n , print 25 and newline
create long long int n
read n
print 25
n =integer
Read n
print 25 and a new line
in function Q_pow that returns a long long and takes arguments a, b = long long
ans = long long with value of 1
while b is greater than 0
if b mod 2 equals 1
set a to a mod 100
set ans to ans mod 100
set ans to ans * a
set a to a mod 100
set a to a * a
set b to b/2
return ans mod 100
n = long long
while read n do print the return of function Q_pow with arguments a = 5 and b = n
n =integer
Read n
print 25 and a new line
n =integer
Read n
print 25 and a new line
n = long long
loop while reading n print 25
n =integer
Read n
print 25 and a new line
n =integer
Read n
print 25 and a new line
n=unsigned long lon
read n
print 25
n = integer
read n
print 25
mod = const long long with mod = 100
in function re taking long long a, long long n and returning long long
ans = long long with ans = 1
loop while n > 0
if n bitwise-and 1 set ans to (ans * a) modulo mod
set a to (a * a) modulo mod
set n to n bitshfit right by 1
return ans
n = long long
loop while reading n
result = long long with result = re of 5, n
print result
n = long long
while reading n print 25
create long long integer n
read n
print 25
MOD = const integer with MOD = 100
n = long long
read n
v = integer with v = 5
ans = integer with ans = 1
for i = 0 to 62 with increment i, v = (v * v) modulo MOD
if (n bitwise and (left shift i 1 place)), ans = (ans * v) modulo MOD
print ans
create int n
read n
print 25
create long long n
read n and while n is truthy, print 25
declare integer n
read n
print "25" and newline
i, j, n, c, ans =integers with c = 0 and ans = 25
Read n
print ans and a new line
n = long long
read n
print "25"
n = integer
read n
print 25
n = long long
read n
print 25
n = int
read n
print 25
n =integer
Read n
print 25 and a new line
n = unsigned long long
read n
print 25
n =integer
Read n
print 25 and a new line
create char n[20]
while read n, print 25
n =integer
Read n
print 25 and a new line
n =integer
Read n
print 25 and a new line
n = integer
read n
print 25
create constant double eps = 1e-6
let const int MAXN = 8000
let double array a of size MAXN
create int n
read n
let double x
for i = 0 to 2 exclusive, read a[i]
let double sum = 0
create int num = 0
for i = 0 to 2 exclusive
set x to ((int)a[i] + 1) * 1.0 - a[i]
if (fabs(x - 1) <= eps
increment num++
else
set sum to sum + x
create integer m = 0
if num is less than 0, set m to n - num
let double res = 0x3f3f3f3f * 1.0
loop until m <= min(2 * n - num, n), set res to min of res and fabs(sum - m)
print fixed, setprecision(3), and res
create ifstream infile
create ofstream outfile
create long double array a with size 2 * 2005, create 2d long double array dp with size 2 * 2005 by 2005
create integer n
declare OpenFile with no arguments, returning integer
using infile open file "351A.INP" in ios::in mode
using outfile open file "351A.OUT" in ios::out mode
if stream infile failed
print "Khong mo duoc file input !" print newline
return -1 from function
if stream outfile failed
print "khong mo duoc file output!" print newline
return -1 from function
declare input with no arguments, returning void
read n
for i = 1 to 2 * n inclusive, read a[i]
declare init with no arguments, returning void
for i = 0 to 2 * n inclusive
for j = 0 to n inclusive, set dp[i][j] to INT_MAX
set dp[0][0] to 0
declare process with no arguments, returning void
for i = 1 to 2 * n inclusive
for j = 0 to minimum of i and n inclusive
create long doubles val1, val2 with val1 = INT_MAX, val2 = INT_MAX
if j is greater than 0, set val to dp[i - 1][j - 1] + round up(a[i]) - a[i]
if i - j is less than or equal to n, set val2 to dp[i - 1][j] + round down(a[i]) - a[i]
set dp[i][j] to val1
if absolute value of val2 is less than absolute value of val1, set dp[i][j] to val2
declare output with no arguments, returning void
set stream format to fixed, set precision to 3, print absolute value of dp[2 * n][n] print newline
declare in with no arguments, returning void
for i = 0 to 2 * n inclusive
for j = 0 to n inclusive
if dp[i][j] is INT_MAX
print 999999 print " "
else if dp[i][j] is greater than or equal to 0
print " " print dp[i][j] print " "
else
print dp[i][j] print " "
print newline
run input
run init
run process
run output
create ifstream infile
create ofstream outfile
create long double array a with size 2 * 2005, create 2d long double array dp with size 2 * 2005 by 2005
create integer n
declare OpenFile with no arguments, returning integer
using infile open "input.txt" using ios::in mode
using outfile open "output.txt" using ios::out mode
if infile failed
print "Khong mo duoc file input !" print newline
return -1 from function
if outfile failed
print "khong mo duoc file output!" print newline
return -1 from function
declare input with no arguments, returning void
read n
for i = 1 to 2 * n inclusive, read a[i]
declare init with no arguments, returning void
for i = 0 to 2 * n inclusive
for j = 0 to n inclusive, set dp[i][j] to INT_MAX
set dp[0][0] to 0
declare process with no arguments, returning void
for i = 1 to 2 * n inclusive
for j = 0 to minimum of i and n inclusive
create long doubles val1, val2 with val1 = INT_MAX, val2 = INT_MAX
if j is greater than 0, set val1 to dp[i - 1][j - 1] + round up(a[i]) - a[i]
if ( i - j ) is less than or equal to n, set val2 to dp[i - 1][j] + round down(a[i]) - a[i]
set dp[i][j] to val1
if absolute value of val2 is less than absolute value of val1, set dp[i][j] to val2
declare output with no arguments, returning void
set cout flag fixed, set cout precision to 3, print absolute value of dp[2 * n][n] print newline
declare in with no arguments, returning void
for i = 0 to 2 * n inclusive
for j = 0 to n inclusive
if dp[i][j] is INT_MAX
print 999999 print " "
else if dp[i][j] is greater than or equal to 0
print " " print dp[i][j] print " "
else
print dp[i][j] print " "
print newline
run input
run init
run process
run output
in function fastMax taking two ints x and y and returning an int
return (((y - x) bitshift right by (32 - 1)) bitwise-and (x bitwise-xor y)) bitwise-xor y
in function fastMin taking two ints x and y and returning an int
return (((y - x) bitshift right by (32 - 1)) bitwise-and (x bitwise-xor y)) bitwise-xor x
MAX = const long long int with MAXN = 2001
a = long double array of size 2 * MAXN
n = long long int
dp = two dimensional long double array of sizes MAXN and MAXN
visit = two dimensional bool array of sizes MAXN and MAXN
in function recursion taking three long long ints i, ceils and floors and returning a double
if i is greater than 2 * n then return 0
if visit[ceils][floors] is true return dp[ceils][floors]
val1 = long double with val1 = INT_MAX
val2 = long double with val2 = INT_MAX
if ceils is less than n set val1 to ceil of a[i] - a[i] + recursion of i + 1, ceils + 1 and floors
if floors is less than n then set val2 to floor of a[i] - a[i] + recursion of i + 1, ceils and floors + 1
ans = long double
if fabs of val is less than fabs of val2
set ans to val1
else
set ans to val2
set visit[ceils][floors] to true
set dp[ceils][floors] to ans and return dp[ceils][floors]
in function solve
read n
for i = 1 to 2 * n inclusive read a[i]
call fixed and setprectision of 3 on cout
print fabs of recursion of 1, 0, 0
t = long long int
set t to 1
call solve t times
frac is a double function with double argument x
return x - (x casted to long long)
create integer n
read variable n from the input
declare double variable diff with value 0
create new long long called c with value 0
a is a new vector of doubles
loop i from 0 to 2 * n exclusive
x is a new double
read x from the user input
push frac(x) to the end of a
if a[i] = 0, increment c
increase diff by a[i]
create new double ans = 1e9
for i from 0 to c inclusive
if i is less than c - n, go to the start of the loop
declare new double variable p = abs(diff - (n - i) * 1.0)
set ans to min of p and ans
set decimal output precision to 3 and force it to usefixed floating-point notation
print ans and '\n' to the output
create ifstrean called infile
create ofstream outfile
declare an array of long doubles a with 2 * 2005 elements and 2d array dp with size 2 * 2005 by 2005
create new integer variable n
OpenFile is a integer function
open file called "351A.INP" with parameter ios::in, to ifstream
open file called "351A.OUT" with parameter ios::out, to ofstream
if infile.fail()
print "Khong mo duoc file input !"
return -1
if outfile.fail()
print "khong mo duoc file output!"
return -1
function input
read n from the input
start for loop from i = 1 to 2 * n inclusive, read user input to a[i] on each loop
define function init
in a for loop, change i from 0 to 2 * n inclusive incrementing i
for loop, changing j from 0 to n inclusive and assigning INT_MAX to dp[i][j] on each iteration
change dp[0][0] to 0
function process
in a for loop, change i from 1 to 2 * n inclusive incrementing i
for integer j = 0 to min of i and n inclusive
create long double variables val1 with value INT_MAX and val2 = INT_MAX
if j is greater than 0, change val1 to dp[i - 1][j - 1] + ceil(a[i]) - a[i]
if (i - j) <= n, set val2 to dp[i - 1][j] + (a[i]) - a[i]) rounded down
assign val1 to dp[i][j]
if fabs(val2) is less than fabs(val1), change dp[i][j] to val2
void function output
change output format to fixed, set decimal precision to 3 and print fabs(dp[2 * n][n])
in the function in
start for loop from i = 0 to 2*n inclusive incrementing i
start for loop from j = 0 to n inclusive
if dp[i][j] is equal to INT_MAX
print 999999 and " " to the standard output
else if dp[i][j] >= 0
print " ", dp[i][j] and " "
else
print dp[i][j] and " " to the standard output
print new line
call input()
call function init()
call method process()
call output()
declare int n
read n
set n to 2 * n
declare an array of long doubles a with 100005 elements
declare integer i
declare vectors of long doubles v, v1 and v2
for i = 0 to n exclusive
read a[i]
if a[i] = (int)a[i]
push a[i] into v
else
push a[i] into v1
for i from 0 to length of v1 exclusive
declare long double variable g = v1[i] rounded up - v1[i]
push g into v2
sort v2
declare integer h = n / 2
create int j
declare int variable hh = length of v2
declare long double variables ans1 and ans = 0 and ans2 = 1e9
for i from -1 to hh exclusive
if i is equal to -1
else
increase ans by v2[i]
assign 0 to ans1
if ((i + 1) + length of v) >= h and (n - (i + 1)) >= h
for j from i + 1 to hh exclusive, subtract 1 - v2[j] from ans1
set ans2 to min of ans2 and abs(ans + ans1)
set output fixed flag, set decimal precision to 3 and print ans2
create long double array a with size 2 * 2005, create 2d long double array dp with size 2 * 2005 by 2005
create integer n
declare input with no arguments, returning integer
read n
for i = 1 to 2 * n inclusive, read a[i]
declare init with no arguments, returning integer
for i = 0 to 2 * n inclusive
for j = 0 to n inclusive, set dp[i][j] to INT_MAX
set dp[0][0] to 0
declare process with no arguments, returning integer
for i = 1 to 2 * n inclusive
for cei = 0 to minimum of i and n inclusive
create long doubles val1, val2 with val1 = INT_MAX, val2 = INT_MAX
if cei is greater than 0, set val1 to dp[i - 1][cei - 1] + round up(a[i]) - a[i]
if ( i - cei ) is less than or equal to n, set val2 to dp[i - 1][cei] + round down(a[i]) - a[i]
set dp[i][cei] to val1
if absolute value of val2 is less than absolute value of val1, set dp[i][cei] to val2
declare output with no arguments, returning integer
print fixed, set cout precision to 3, print absolute value of dp[2 * n][n], print newline
declare in with no arguments, returning void
for i = 0 to 2 * n inclusive
for j = 0 to n inclusive
if dp[i][j] is INT_MAX
print 999999 print " "
else if dp[i][j] is greater than or equal to 0
print " " print dp[i][j] print " "
else
print dp[i][j] print " "
print newline
run input
run init
run process
run output
n =integer
Read n
if n is 1
print 1 and a new line
else do the following
if n is odd, then decrement n
print n / 2 + 1 and a new line
Create global constant integers n = 100010 and INF = 1000000007
Create n as a global integer
Set n to the input
Output one plus n divided by 2
set const int maxa to 1000000
integers = n
read n
if n is 1 then do the following
output 1
else
output (n / 2) + 1
create integer n
while read n is true, print n / 2 + 1 print newline
declare int n
read from the input to n
print n / 2 + 1 and '\n'
create const long long int MOD = 1000000007
create long long ints N, M, K, H, W, L and R
read from the input to N
print N / 2 + 1
n =integer
Read n
print n / 2 + 1 and a new line
n =integer
Read n
print n / 2 + 1 and a new line
a = integer
Read a
print a / 2 + 1 and a new line
num =integer
Read num
print (num / 2) + 1 and a new line
create integer n
read input to n
print n / 2 + 1
create int n
read n
print n/2 +1
pi = const double with pi = 2 * acos of 0.0
maxn = const int with maxn = 2e2 + 10
n = int
read n
set n to n / 2
print n + 1
create unsigned long integer i, j, n, sum with sum = 0
read n
set sum to n / 2 + 1
print sum print newline
integers = n
read n
output n / 2 + 1
create int n
read n
print n divided by 2 +1
n, k, s, p = integers
read n
print n/2 + 1
n =integer
Read n
print (n / 2) + 1 and a new line
create integers n and m
read n
set m to n divided by 2
print m +1
integers = n
read n
output n / 2 + 1
integers = n
read n
if n is 1 then do the following
output 1
else
output n / 2 + 1
let n be a integer
read n
print n / 2 + 1 and newline
n, ans = long long with ans = 2
read n
if n is 1
print 1
if n is 2 or n is 3
print 2
print n / 2 + 1
declare constant double PI to 2 times the arccosine of 0
declare constant int MOD to be 1e9 + 7
declare constant int oo to be 2 * MOD plus 1e3
declare function long long gcd of long long a, long long b
if not b, return a, and if b, return gcd of b and a mod b
declare int n
input n
output n over 1 plus 1 and a newline
PI = const double with PI = acos of -1.0
eps = const double with eps = 1e-6
INF = const int with INF = 0x3f3f3f3f
maxn = const int with maxn = 100
T, n, m = int
loop while reading n print n / 2 + 1
integers = long int n
read n
output (n / 2 + 1)
n =integer
Read n
print n / 2 + 1 and a new line
set inf = 205
let a[inf] be int array
create int array b[inf]
create int m, n, k, t, x
while read n, print n/2 +1
set long long n, m, a, b, x, ff to 2e7 + 1, l, r, cnt, ans
make a vector using long long integer out of v,f,and res
s1, s2 = string
used array of 1001 = long long integers
read n
output n / 2 + 1
n, k =integers
Read n
set k to n / 2
increment k
print k and a new line
n = long long integers
read n
output n / 2 + 1
integers = a
while input of a output (a / 2) + 1
n =integer
Read n
print n / 2 + 1 and a new line
n, b =integers
Read n
set b to n / 2 + 1
print b and a new line
n = integer
Read n
print n / 2 + 1 and a new line
n, ans =integers
while reading values n
set ans to n / 2 + 1
print ans and a new line
create long long n
read n
print n / 2 + 1 print "\n"
integers = n
read n
output n / 2 + 1
n =integer
Read n
print (n / 2) + 1 and a new line
= long long integers
read n
integers = m,ans
set m to n / 2
set ans to m + 1
output ans
create integer n
read n and print n / 2 + 1 in a loop
N = integer
Read N
print N / 2 + 1 and a new line
declare integer n
read from the input to n
print (n + 2) / 2
num =integer
Read num
print num / 2 + 1 and a new line
declare integers n and ans with ans = 0
read n and keep looping, printing n / 2 + 1 on each iteration
create integer n
read n
print n / 2 + 1 print '\n'
declare 2d int array dp with size 5000 by 5
declare integer arrays s and c with size 5000
create int n
read input to n
print n / 2 + 1
declare long longs n and ans where ans = 2
read from the input to n
if n = 1
print 1
if n is 2 or n is 3
print 2
print n / 2 + 1
declare an uninitialized integer n and initialize integer count to zero
read n
print the value of n with one added after being divided by two and a newline
n =integer
Read n
print n / 2 + 1 and a new line
l, r, x, y, k = long long
read l, r, x, y, k
for long long i = x to y inclusive
if i*k >= l and di* k < = r
print YES
print NO
declare long long variables z, x, c, v and b
read standard input to z, x, c, v and b
create new boolean cek with value false
in a for loop, change q from c to v inclusive
declare long long variable asd = q * b
if asd >= z and asd <= x, assign the new value = true to cek
if cek = true
print "YES"
else
print "NO" to the standard output
l, r, x, y, k, flag = long long integers with flag = 0
read l, r, x, y, k
for j = x to y
if ((k * j) >= l and (k * j) <= r), flag = 1
if (flag)
print YES
else
print NO
create long long l, r, x, y, k, i, j, c, c=0
read l, r, x, y, k
for j=x to y inclusive
if k * j <= r and k * j >= l
print YES
c=1
break
if c=0, print NO
let l, r, x, y, and k long long ints
let exist a bool with value false
read l, r, x, y, and k
for i from x to y
if i * k at most r and i * k at least l
set exist to true
leave loop
if exist
print YES
otherwise
print NO
let l, r, x, y, k be long integers
read l, r, x, y, k
let i be a long integer
let ok be an integer which equals 0
for i = x to y inclusive
if l <= i * k and r >= i * k, ok = 1
if ok is true
print YES and newline
else do the following
print NO and newline
l,r,x,y,k=long long
read l,r,x,y,k
for i=x to y inclusive
if k*i>=l and k*i<=r
print YES
goto end
print NO
label end
let l, r, x, y, k be integers
read l, r, x, y, k
for integer i is equal to l, j is equal to x, i <= r and j <= y
if i / j is equal to k and i modulo j is equal to 0
print YES and newline
else if i / j >= k
increment j by 1
else do the following
increment i by 1
print NO and newline
let l, r, x, and y be doubles
let k be a double
let flag be a boolean, set flag to false
read in l, r, x, y, and k
for i = 0 iterate until i <= y
if k * i <= r and k * i >= l, set flag to true
if flag is true
print YES
or else
print NO
l, r, x, y, k = long long
read l, r, x, y, k
flag = 0 = int
for i = x to y inclusve
if i * k >= 1 and i * k <= r
set flag to 1
exit loop
if flag
print YES
else
print NO
create long long int l, r, x, y, k
read l, r, x, y, k
found = false
for b=x to y inclusive
set a = k*b
if a >= 1 and a <= r
set found to true
break
if found different from 0
print YES
print a newline
else
print NO
print a newline
l, r, x, y, k = long long int
read l, r, x, y, k
for i = x to i <= y
if i*k >= 1 and i*k <= r
print YES
print NO
create new constant integer maxn = 15
declare new cons integer called inf = 0x3f3f3f3f
declare new constant double eps with value 1e-10
declare doubles l, r, x, y and k
read standard input to l, r, x, y and k
if r < k * x or l > k * y
print "NO"
else
start for loop from i = x to y inclusive incrementing i
if i * k >= l and i * k <= r
print "YES" to the standard output
print "NO"
let maxn a constant long long int with value 2e5 + 3
let l, r, x, y, k, t long long ints with t = 0
read l, r, x, y, and k
for long long int i from x to y
if i * k at least l and i * k at most r
set t to 1
leave loop
if t
print YES
otherwise
print NO
declare long longs l, r, x, y, k
read l, r, x, y, k
if l is greater than k * y or r is less than k * x
print "NO", newline
for i = l to r inclusive
for j = x to y inclusive
if i is greater than k * y or i is less than k * x
end loop
else if i is k * j
print "YES" and newline
print "NO" and newline
declare integer array marked with size 101
declare long longs l, r, x, y, k
read l, r, x, y, k
for i = x to y inclusive
if i * k is greater than or equal to l and i * k is less than or equal to r
print "YES" and newline
go to jump point pause
print "NO" and newline
mark jump point pause
declare integer pause
read pause
create float a, s, d, f, g
create int i and flag, set flag to 0
read a, s, d, f, g
for i=d to f inclusive
if i*g <= s and g*i >= a
flag=1
break
if flag different from 0
print YES
else
print NO and a newline
l, r, x, y, k =integers
Read l, r, x, y, k
for i = x to y exclusive
if i * k is greater than or equal to l an i * k is less than or equal to r
print YES and a new line
print NO and a new line
create long long l, r, x, y, k
read l, r, x, y, k
while l <= r and x <= y
if l / x < k
increment l
else if l/x=k
print YES
else
increment x
print NO and a newline
declare constant integer variable inf = 0x3f3f3f3f
declare long ints l, r, x, y and k
bool function find with long int arguments start and end
create new long integer variable mid = (start + end) / 2
return false if start + 1 is equal to end
if mid * k is greater than r
if find(start,mid) returned true
return true
else
return false
else if mid * k is less than l
if find(mid,end) returned true
return true
else
return false
else
return true
create long long ints a, b, c, d and e
read input to a, b, c, d and e
for i = c to d inclusive incrementing i
declare new long long num with value i*e
if num >= a and num <= b
print "YES"
else if num is greater than b
break
print "NO"
create long long l, r, x, y, k
read l, r, x, y, k
for b=x to y inclusive
set a to k*b
if a>=1 and a<=r
print YES
print NO
l,r,x,y=int
k=float
flag=0
read l,r,x,y,k
for i=x to y inclusive
if l<=k*i and k*i>=r flag=1
if flag
print YES
else
print NO
create ints n and k
read n and k and while they're truthy
create int a = n * 2 / k + (n * 2 % k == 0 ? 0 : 1)
make integer b = n * 5 / k + (n * 5 % k == 0 ? 0 : 1)
let int c = n * 8 / k + (n * 8 % k == 0 ? 0 : 1)
show the result of a + b + c
make ints n and k
read n and k
create integer red = n * 2 / k
make int green = n * 5 / k
let int blue = n * 8 / k
if red is less than n * 2.0 / k, set red to red + 1
if green is less than n * 5.0 / k, add 1 to green
if blue is less than n * 8.0 / k, increase blue by 1
print the result of red + green + blue
let n , k be long integers
read n , k
let ans be a long integer with ans = 0LL
ans is equal to (n * 2LL) / k + (n * 2LL modulo k is not equal to 0)
increment ans by (n * 5LL) / k + (n * 5LL modulo k is not equal to 0)
increment ans by (n * 8LL) / k + (n * 8LL modulo k is not equal to 0)
print ans and newline
n, k =integers
Read n and k
sum = integer with 0
if n * 2 modulo k is 0
set sum to sum + n * 2 / k
else do the following
set sum to sum + n * 2 / k + 1
if n * 5 modulo k is 0
set sum to sum + n * 5 / k
else do the following
set sum to sum + n * 5 / k + 1
if n * 8 modulo k is 0
set sum to sum + n * 8 / k
else do the following
set sum to sum + n * 8 / k + 1
print sum and a new line
n,k,red,green,blue,notebooks = long long integers
read n,k
set red to 2 * n
set green to 5 * n
set blue to 8 * n
set notebooks to (red / k) + (green / k) + (blue / k)
if red modulo k is not equal to 0 then do the following notebooks += 1
if green modulo k is not equal to 0 then do the following notebooks += 1
if blue modulo k is not equal to 0 then do the following notebooks += 1
write notebooks value
p, q, lal, sobuj, nil = integers
read p, q
lal = ceil((p * 2) / q)
sobuj = ceil((p * 5) / q)
nil = ceil((p * 8) / q)
mot = integer with mot = lal + sobuj + nil
print mot
n, k = int
res, cur = int
read n then k
set res to 0
set cur to 2 * n
increment res by (cur + k - 1) / k
set cur to n * 5
increment res by (cur + k - 1) / k
set cur to n * 8
increment res by (cur + k - 1) / k
print res
declare integer divUp
return a / b + ( 1 if a % b is greater than 0, else 0)
declare integers n, k
read n and k
print result of run divUp with 2 * n, k as arguments + result of run divUp(5 * n, k) + result of run divUp(8 * n, k), newline
make doubles n and k
read n and k
create long long ints red = n * 2, green = n * 5, and blue = n * 8
display (long long)(ceil(red / k) + ceil(green / k) + ceil(blue / k))
create long long constant inf = 1e16
new long long constant MAXN with value 1e6
declare new double constant variable pi = acos of -1
declare new long longs n, k and ans
read from the input to n and k
decrement k by one
change ans to ans + (n * 2 + k) / (k + 1)
change ans to the sum of ans and (n * 5 + k) / (k + 1)
add (n * 8 + k) / (k + 1) to ans
print ans to the standard output
create long long ints sum = 0, a, and b
read a and b
if (a * 2) % b is equal to 0
add (a * 2) / b to sum
otherwise
add ((a * 2) / b) + 1 to sum
if (a * 5) % b is equal to 0
set sum to sum + (a * 5) / b
else do
set sum to sum + ((a * 5) / b) + 1
if (a * 8) % b is equal to 0
set sum to sum + (a * 8) / b
else do
set sum to sum + ((a * 8) / b) + 1
show sum
create long longs n and k
loop, reading n and k from the input
declare new long longs sum1, sum2 and sum3
set sum1 to 2 * n / k
if 2 * n % k != 0, add 1 to sum1
assign 5 * n / k to sum2
if 5 * n modulo k is not 0, increment sum2
change sum3 to 8 * n / k
if 8 * n modulo k != 0, increment sum3 by one
print sum1 + sum2 + sum3
n, k, ans = long
in the function sheets that takes long a, b and returns long
d, m = long
d = a / b
m = a modulo b
if (m), return (d + 1)
return d
read n, k
ans = ans + sheets(2 * n, k)
ans = ans + sheets(5 * n, k)
ans = ans + sheets(8 * n, k)
print ans
n, k, a, b, c, x, y, z, s =integers
Read n and k
set a to n * 2
set b to n * 5
set c to n * 8
if a is less than k
set x to 1
else do the following
if a modulo k is 0
set x to a / k
else do the following
set x to (a / k) + 1
if b is less than k
set y to 1
else do the following
if b modulo k is 0
set y to b / k
else do the following
set y to (b / k) + 1
if c is less than k
set z to 1
else do the following
if c modulo k is 0
set z to c / k
else do the following
set z to (c / k) + 1
set s to x + y + z
print s and a new line
n, k, r = integer
read n, k
r = ((2 * n) / k) + ((5 * n) / k) + ((8 * n) / k)
if (2 * n) modulo k is not 0, increase r by 1
if (5 * n) modulo k is not 0, increase r by 1
if (8 * n) modulo k is not 0, increase r by 1
print r
s, n and k are integers with s = 0
read n and k from the user input
if (8 * n) modulo k = 0
assign the new value = s + 8 * n / k to s
else
change s to s + 8 * n / k + 1
if (2 * n) % k is equal to 0
assign s + 2 * n / k to s
else
assign s + 2 * n / k + 1 to s
if (5 * n) modulo k is 0
assign the new value = s + 5 * n / k to s
else
change the value of s to s + 5 * n / k + 1
print s
n, k =integers
ans, asn = integers
Read n, k
set ans to 0
set asn to n * 2
set ans to ans + (asn + k - 1) / k
set asn to n * 5
set ans to ans + (asn + k - 1) / k
set asn to n * 8
set ans to ans + (asn + k - 1) / k
print ans and a new line
n, k, red, green, blue =integers
Read n and k
set red to 2 * n
set green to 5 * n
set blue to 8 * n
if red modulo k is 0
set red to red / k
else do the following
set red to red / k + 1
if green modulo k is 0
set green to green / k
else do the following
set green to green / k + 1
if blue modulo k is 0
set blue to blue / k
else do the following
set blue to blue / k + 1
print red + green + blue and a new line
n, k, t, l, m, g =integers
Read n and k
if n * 2 modulo k is 0
set t to n * 2 / k
else do the following
set t to n * 2 / k + 1
if n * 5 modulo k is 0
set l to n * 5 / k
else do the following
set l to n * 5 / k + 1
if n * 8 modulo k is 0
set m to n * 8 / k
else do the following
set m to n * 8 / k + 1
set g to m + l + t
print g and a new line
create ints n and a
make ints ans and cnt
read n and a
set ans to 0
set cnt to n * 2
set ans to ans + (cnt + a - 1) / a
set cnt to n * 5
add (cnt + a - 1) / a to ans
set cnt to n * 8
set ans to ans + (cnt + a - 1) / a
show ans
let n, k be integers
read n, k
let red , green , blue be integers with red = 0, green = 0, blue = 0
let bookred , bookgreen , bookblue be integers with bookred = 0, bookgreen = 0, bookblue = 0
red is equal to n * 2
green is equal to n * 5
blue is equal to n * 8
if red modulo k is equal to 0
bookred is equal to red / k
else do the following
bookred is equal to red / k + 1
if blue modulo k is equal to 0
bookblue is equal to blue / k
else do the following
bookblue is equal to blue / k + 1
if green modulo k is equal to 0
bookgreen is equal to green / k
else do the following
bookgreen is equal to green / k + 1
let total be a integer with total is equal to 0
total is equal to bookred + bookblue + bookgreen
print total and newline
function Ceil with int arguments n and k that returns int
return (n + k - 1) / k
declare new ints n and k
read input to n and k
ans is a new integer variable = Ceil(2 * n, k) + Ceil(5 * n, k) + Ceil(8 * n, k)
print ans and '\n'
a = int array of size 1010
n = int
read n
read n values into a
sort a from beginning to n
i = int
for i = n - 1 to 0 inclusive decrementing i
b = int with b = sqrt of a[i]
if b * b is a[i]
continue
else
break
print a[i]
create integers n, i, x, maxi, tem, flag, with maxi = -1000000007
create double p
read n
for i = 1 to n inclusive
set flag to 0
read x
if x is less than 0
if x is greater than maxi, set maxi to x
set flag to 1
if flag is 1, set x to -x
set p to square root of ( x * 1.00 )
set tem to p
if tem is not p and flag is not 1
if x is greater than maxi, set maxi to x
print maxi print newline
declare integer variables n and a
read n
create priority_queue of integers t
for i from 0 to n exclusive
read input to a
declare int variable l = square root of a
if l squared != a, push a into t
print top element of t
let INF be a constant integer with INF = 0x3f3f3f3f
let i, j, k be integers
let n, m, t be integers
a = array of integers of length 1005
read n
for i = 0 to n exclusive , read a[i]
sort the values a and a + n
let x be a integer with x = 0
for i is equal to n - 1, i greater than or equal to 0 , decrement i by 1
if a[i] is less than 0, stop
if i is less than 0
the value of x is equal to 0
else do the following
the value of x is equal to i
for i is equal to n - 1 , i greater than x , decrement i by 1
if square root of a[i] - floor of square root of a[i] is greater than 0.000001
print a[i] and newline
stop
if i <= x , print a[x] and newline
create integers n, i, j, x, ans
create vector of integers vec
while read n is not 0
for i = 0 to n inclusive
read n
add x to the end of vec
sort vec
let flag be an int = 0
for i = n - 1 to i 0 inclusive decrement 1
set ans to the square root of vec[i]
set ans to ans squared
if ans is different from vec[i]
set flag to i
exit loop
print vec[flag] and new line
create const int maxn = 1010
declare int n
declare int array a with size maxn
read n
loop i from 0 to n exclusive, read a[i]
sort a
for i from n - 1 to 0 inclusive counting down
if square root of a[i] * square root of a[i] != a[i]
print a[i]
stop the loop
n, i, x = integers, ans = integer = -1000001
read n
for i = 0 to n exclusive
read x
if the square root of x to the power of 2 is not x and x > ans, then ans = x
print ans
maxn = const int with maxn = 1e3 + 5
arr = int array of size maxn
n = int
read n
read n values into arr
sort arr from beginning to n
for i = n - 1 to 0 inclusive decrementing i
if arr[i] is less than 0
print arr[i]
temp = int with temp = arr[i]
if floor of sqrt of temp is sqrt of temp
continue
else
print arr[i]
let t be integer
let a be integer array with length 1005
function cmp with integer argument a and b returns boolean
return a greater than b
read t
for i =1 to t inclusive read i element of array a
call sort function on a +1, a + 1 + t, and cmp
for i = 1 to t inclusive
if ((int)sqrt(a[i]) * (int)sqrt(a[i]) is not equal to i element of array a
print i element of array a
break
define Boolean function cmp, consuming pass-by-reference int constants A and B
return A > B
define 1,005-element int array num
define int n
read n
for i from 0 to n (exclusive) by 1, read num[i]
sort(num, num + n, cmp)
define int i and set it to 0
for i from 0 to n (exclusive) by 1
define int p, set to squareroot of num[i]
if p ^ 2 isn't num[i], then break
print num[i] and newline
create integer t
create integer array a with size 1005
declare cmp with integers a, b as arguments, returning boolean
return a is greater than b from function
read t
for i = 1 to t inclusive, read a[i]
sort elements from a + 1 to a + 1 + t using cmp to compare
for i = 1 to t inclusive
if integer casted square root of a[i] * integer casted square root of a[i] is not a[i]
print a[i] print newline
break loop
create integer array nums with size 1001
declare compare_int with integer addresses lhs, rhs as arguments, returning boolean
return lhs is greater than rhs from function
create integer n
read n
create integer max_num with max_num = 0
for currnum = 0 to n exclusive, read nums[currnum]
sort elements from nums to nums + n using compare_int to compare
create integer non_perfect with non_perfect = 0
for currnum = 0 to n exclusive
create integer sqrtroot with sqrtroot = square root of nums[currnum]
if sqrtroot * sqrtroot is not nums[currnum]
set non_perfect to nums[currnum]
break loop
print non_perfect print newline
declare check taking in integer x and returning integer
if x is less than 0, return 1
create integer t = sqrt(x)
if t * t is equal to x
else
return 1
create integer n
read n
create integer a[1005]
for i = 0 to n exclusive, read a[i]
sort array a
for i = n - 1 to 0
if check(a[i]) returns truthy
print a[i]
break loop
n =integer
Read n
a = array of 1005 integers
Read n values into array a
sort array elements of a in ascending order
for i = n-1 to 0 exclusive
t = integer, set to square root of a[i]
if t * t is not a[i]
print a[i] and a new line
a = array of integers of length 2000005
let n, tmp be integers
read n
for i = 0 to n exclusive
read tmp
increment a[tmp + 1000000] by 1
let ans be integer with ans = 0
for i = 0 to 1000 inclusive, the value of a[i * i + 1000000] is equal to 0
for i = 0 to 2000005 exclusive
if a[i] is true , the value of ans = i - 1000000
print ans and newline
create integer array sq with size 1001 with sq =
0
end statement
declare check with integer x as argument, returning integer
if not element between sq and sq + 1001 is x
return 1 from function
else
create integer n
read n
create integer array a with size n
for i = 0 to 1000 inclusive, set sq[i] to i * i
for i = 0 to n exclusive, read a[i]
create integer m with m = INT_MIN
for i = 0 to n exclusive
if a[i] is greater than m and result of run check with a[i] as argument is true, set m to a[i]
print m print newline
create integer array a with size 10000
for i = 0 to 1001 exclusive, set a[i] to i * i
create integer b create integer array c with size 10000
read b
for i = 0 to b exclusive, read c[i]
sort elements form c to c + b
for i = b - 1 to -1 exclusive, decrementing i
for j = 0 to 1001 exclusive
if c[i] is a[j], go to jump point momo
print c[i] print newline
mark jump point momo
create integer array a with size 1005
create map mp from integer to integer
create constant double eps with eps = 1e-8
declare init with no arguments, returning void
for i = 0 to 1000 inclusive, set mp[i*i] to 1
run init
create integer n
read n
for i = 0 to n exclusive, read a[i]
sort elements from a to a + n
for i = n - 1 to 0 inclusive, decrementing i
if not mp[a[i]]
print a[i] print newline
n=int
read n
arr=vector of int
for i=0 to n exclusive
temp=int
read temp
add temp at end of arr
sort arr
for i=n-1 down to 0 inclusive
s=sqrt(arr[i])
if s^2 not equal arr[i]
print arr[i]
break
create int A, B, C, D
read A, B, C, D
if (A * 2 + 3 > D and D + 1 >= A) or (B * 2 + 3 > C and C + 1 >= B)
print YES
otherwise
print NO and a new line
let A, B, C, D be integers
read A, B, C, D
if ((A * 2 + 3 is greater than D and D + 1 is greater than or equal to A) or (B * 2 + 3 is greater than C and C + 1 is greater than or equal to B))
print YES and newline
else do the following
print NO and newline
let boolean solve(int a, int b) be a function which accepts integers a and b and returns integer values
return the value of ( a is less than or equal to b + 1 and b is less than or equal to (a + 1) * 2)
let la, ra, lb, rb be integers
read la, ra, lb, rb
if (solve(la, rb) or solve(ra, lb))
print YES and newline
else do the following
print NO and newline
declare integers gl, gr, bl and br
read gl, gr, bl and br
if 2 * (gl + 1) >= br && gl - 1 <= br || 2 * (gr + 1) >= bl && gr <= bl
print "YES"
else
print "NO"
create integers a, s, z, x
read a read s read z read x
create boolean cek with cek = false
if ( x is greater than or equal to a - 1 and x is less than or equal to a * 2 + 2 ) or ( z is greater than or equal to s - 1 and z is less than or equal to s * 2 + 2 ) , set cek to true
if cek is true
print "YES" print newline
else
print "NO" print newline
declare integers l, r, ml and mr
judge is a boolean function with integer arguments g and b
if b is less than g - 1
return false
else if b is greater than 2 * g + 2
return false
else
return true
read l, r, ml and mr
if judge(l, mr) or judge(r, ml) are true
print "YES"
else
print "NO"
let a, b, c, d be long integers
while ( read the values a,b,c,d )
let ck be a long integer with value as 0
let a1 be a long integer with value as a1 is equal to a * 2 + 2
let a2 be a long integer with value a2 is equal to a-1
if (d is greater than or equal to a2 and d is less than or equal to a1) , ck is equal to 1
let a1 is equal to ( b * 2 + 2)
let a2 is equal to b - 1
if (c is greater than or equal to a2 and c is less than or equal to a1), ck is equal to 1
if (ck is equal to 1)
print YES and newline
else do the following
print NO and newline
create long longs gl, gr, bl, br
read gl read gr read bl read br
if br is greater than or equal to gl - 1 and br is less than or equal to 2 * ( gl + 1 )
print "YES" print newline
if bl is greater than or equal to gr - 1 and bl is less than or equal to 2 * ( gr + 1 )
print "YES" print newline
else
print "NO" print newline
create integers gl, gr, bl, br
read gl read gr read bl read br
if gl - 1 is less than or equal to br and br is less than or equal to 2 * gl + 2
print "YES" print '\n'
else if gr - 1 is less than or equal to bl and bl is less than or equal to 2 * gr + 2
print "YES" print '\n'
else
print "NO" print '\n'
create integers A, B, C, D
read A read B read C read D
if ( A * 2 + 3 is greater than D and D + 1 is greater than or equal to A ) or ( B * 2 + 3 is greater than C and C + 1 is greater than or equal to B )
print "YES" print newline
else
print "NO" print newline
create integers a1, a2, a11, a12, b1, b2, b11, b12
read b1 read b2 read a1 read a2
if a1 % 2 is 0
set a11 to a1 / 2 - 1
else
set a11 to a1 / 2
if a2 % 2 is 0
set a12 to a2 / 2 - 1
else
set a12 to a2 / 2
set b11 to b1 - 1
set b12 to b2 - 1
if b12 is less than or equal to a1 and a11 is less than or equal to b2 or a12 is less than or equal to b1 and b11 is less than or equal to a2
print "YES" print newline
else
print "NO" print newline
create integers vl, vr, ml and mr
boolean function judge with integer arguments g and b
if b is less than g - 1
return false
else if b is greater than 2 * g + 2
return false
else
return true
read vl, vr, ml and mr
if either judge(vl, mr) or judge(vr, ml) is true
print "YES"
else
print "NO"
create integers b, bb, g, gg, yes, with yes = 0
read g read gg read b read bb
if g is less than or equal to bb + 1 and bb is less than or equal to (g + 1) * 2, set yes to 1
if gg is less than or equal to b + 1 and b is less than or equal to (gg+1) * 2, set yes to 1
if yes is true
print "YES" print newline
else
print "NO" print newline
create integers A, B, C, D
read A read B read C read D
if (A * 2 + 3 is greater than D and D + 1 is greater than or equal to A ) or ( B * 2 + 3 is greater than C and C + 1 is greater than or equal to B )
print "YES" print newline
else
print "NO" print newline
M = constant integer = 1000 + 5
create int gl, gr
read gl and gr
bl, br = integers
read bl and br
create boolean ok = false
if gr - 1 is equal to or less than bl and bl is equal to or less than 2 * (gr+1), set ok = true
if gl - 1 is equal to or less than br and br is equal to or less than 2 * (gl+1), set ok = true
if ok is true
print YES
otherwise
print NO
declare integers vl, vr, ml and mr
boolean function judge with integer arguments g and b
if b is less than g - 1
return false
else if b is greater than 2 * g + 2
return false
else
return true
read vl, vr, ml and mr
if judge(vl, mr) or judge(vr, ml)
print "YES"
else
print "NO"
declare check with integers d, m as arguments, returning boolean
if m is less than or equal to 2 * ( d + 1 ) and ( m is greater than or equal to d - 1 ), return 1 from function
create integers l1, r1, l2, r2
read l1 read r1 read l2 read r2
if result of run check with l1, r2 as arguments or result of run check with r1, l2 as arguments
print "YES\n"
else
print "NO\n"
let INF be a constant integer with value as INF = 0x3f3f3f3f
let i,j,k be integers
let n,m be integers
let a,b,c,d be integers
read a,b,c,d
if ((c - (b - 1)) is less than 5 and c - b + 1 is greater than or equal to 0)
print YES and newline
if ((d - (a - 1)) is less than 5 and d - a + 1 is greater than or equal to 0)
print YES and newline
if ((c - (b - 1) * 2) is less than 5 and c - (b - 1) is greater than or equal to 0)
print YES and newline
if ((d - (a - 1) * 2) is less than 5 and d - (a - 1) is greater than or equal to 0)
print YES and newline
print NO and newline
create integers gl, gr, bl, br
create boolean verdict
read gl read gr read bl read br
if 2 * ( gl + 1 ) is greater than or equal to br and gl - 1 is less than or equal to br or 2 * ( gr + 1 ) is greater than or equal to bl and gr is less than or equal to bl
print "YES" print newline
else
print "NO" print newline
integer function pan with integer arguments x and y
if x = 0 return true if y < 2 or false otherwise
if y = 0 return true if x < 3 or false otherwise
if x = y return 1
if x is less than y
if y - x <= 1 return 1
else
if x / (y + 1) <= 2
if x / (y + 1) = 1 return 1
if x / (y + 1) = 2
if x modulo (y + 1) is less than 1 return 1
declare integers a, b, x and y
read a, b, x and y
if pan(x, b) or pan(y, a) is not 0
print "YES"
else
print "NO"
function fp with long long arguments n and p that returns long long
if p is 0, return 1
if p is 1, return n
create long long res
res = fp(n, p / 2) % int(1e9 + 7)
res = (res * res) % int(1e9 + 7)
if p % 2 > 0, set res = (res * n) % int(1e9 + 7)
return res % int(1e9 + 7)
function get with integer arguments a and b that returns integer
while b <= 2011
declare integer variables dif = 0, t = b and tt = a
while a > 0 and dif < 2
increment dif if a % 10 != b % 10
divide a and b by 10
set b = t, a = tt
return bif dif is less than 2
increment b
return 1e5
create integers a, b, c and d
read a, b, c and d
if a - 2 < d and d < 2 * a + 3 or b - 2 < c and c < 2 * b + 3
print "YES" and '\n'
else
print "NO" and '\n'
create long longs gl, gr, bl, br
read gl read gr read bl read br
if br is greater than or equal to gl - 1 and br is less than or equal to 2 * ( gl + 1 )
print "YES" print newline
if bl is greater than or equal to gr -1 and bl is less than or equal to 2 * ( gr + 1 )
print "YES" print newline
else
print "NO" print newline
a, b, c, d = integers
read a, b, c, d
if (d >= a - 1 and d <= 2 * (a + 1)) or (c >= b - 1 and c <= 2 * (b + 1))
print YES
else
print NO
n is a new integer variable
read standard input to n
create new vector of integers v with 2 * n elements
read all elements from the input to the vector v
sort v
if v[n - 1] is less than v[n]
print "YES\n" to the standard output
else
print "NO\n" to the standard output
let n be an int
let arr be an int vector of size 210
read n
for i = 1 to 2*n inclusive, increment i, read arr[i]
sort form arr + 1 to arr + 2*n + 1 using greater<int>
if arr[n] > arr[n + 1]
print YES and
new line
else
print NO and
new line
declare integer n
read n
declare integer array a size n + n
for i = 0 to 2 * n exclusive, read a[i]
sort from a to a + n * 2
if a[n] is greater than a[n-1]
print "YES\n"
else
print "NO\n"
function read that returns inline integer
declare new integers x = 0 and f = 1
ch is a new character variable read from the user input
while ch is not a digit character
if ch is equal to '-', change f to -1
set ch to char from the input
while c is a digit character
change x to x * 10 + ch - '0'
change ch to char from the input
return x multiplied by f
create int n and an array of ints a with size 1005
change n to the result of read() * 2
in a for loop, change i from 1 to n inclusive, changing a[i] to the result of read() on each loop
sort a from position 1 to n + 1
if a[n >> 1] is less than a[(n >> 1) + 1], return 0 * puts("YES")
print "NO" to stdout
declare integer n
create vector of integers arr with 210 elements
read variable n from the input
start for loop from i = 1 to 2 * n inclusive, read input to arr[i] on each loop iteration
sort arr from index 1 to 2 * n + 1, using greater<int>() as a comparator
if arr[n] is greater than arr[n + 1]
print "YES"
print "\n"
else
print "NO" to the standard output
print "\n"
declare an array of integers named a of size 204
declare an integer named n
read in n
loop through the code 2 multiplied by n times and input a value into a every time
sort the inputted values in the array in ascending order
if the value of position n in a is greater than the value of position n-1 in a
print YES
or else
print NO
let int n
create int array arr of size 210
read n
for i = 1 to 2 * n, read arr[i]
sort arr + 1 using argument arr + n + n + 1
print "YES" if arr[n] < arr[n + 1] is true or "NO" if not
n = integer, a = integer array of size 210
read n
for i = 0 to 2 * n exlusive, then read a[i]
sort a in asecnding order
if a[n - 1] >= a[n]
print NO
else
print YES
n = long long, a = long long array of size 205
in function solve that returns nothing
read n
for i = 1 to 2 * n + 1 exclusive, read a[i]
sort a for all elements that contain a value
if a[n] is not a[n + 1]
print YES
else
print NO
in function prep that returns nothing
t = integer = 1
call prep
any output to the user is in fixed-point notation and is precise to 10 decimal points
while looping decrease t by 1, the contents of the loop is to call solve
declare integer a
read a
declare integer arrays b size 10000, c size a, d size a
for i = 0 to a * 2 exclusive, read b[i]
sort from b to b + a * 2
for i = 0 to a exclusive, let c[i] be b[i]
for i = a to a * 2 exclusive, let d[i-a] be b[i]
for i = 0 to a exclusive
for j = 0 to a exclusive
if c[j] is greater than or equal to d[i]
print "NO", newline
print "YES", newline
declare integer array a size 205
declare integer n
read n
for i = 1 to 2 * n inclusive, read a[i]
sort elements from a to a + 2 * n + 1
for i = 1 to n inclusive
for j = n + 1 to 2 * n inclusive
if a[i] is greater than or equal to a[j]
print "NO", newline
print "YES", newline
make integer n
create int array a of size 1001
let int array b of size 1001
read n
for i = 1 to 2 * n, read a[i]
make int max = 1
for i = 1 to 2 * n
for j = 1 to 2 * n
if a[max] is less than a[j], set max to j
set b[i] to a[max]
set a[max] to -1
if b[n] is greater than b[n + 1]
print "YES"
else do
print "NO"
n = integer
a = integer array of size 210
read n
for i = 0 to 2 * n, read a[i]
sort a and a + 2 * n
if a[n] > a[n - 1]
print YES
else
print NO
n = integer
read n
a = integer array of size 2 * n
for i = 0 to 2 * n exclusive, read a[i]
sort a in ascending order
if a[n] is a[n - 1]
print NO
else
print YES
create new array of 4 integers dx with values 0, 0, -1, 1
dy is a new array of 4 integers with elements 1, -1, 0, 0
declare integer variable n
read n from the input
a is an array of integers with size 2 * n
for integer i = 0 to 2 * n exclusive increasing i by 1, read user input to a[i]
sort all elements of a
declare integer variable with name x = a[n]
for i = 0 to n exclusive increasing i by 1
if x <= a[i]
print "NO\n"
print "YES\n"
a = int array of size 205 with all values set to 0
N = int
read N
set N to N * 2
read N values into a
sort a from position 0 to N
set N to N / 2
decrement N
if a[N] >= a[N + 1]
print "NO"
else
print "YES"
n = int and a = int array of size 10000
read n
for i = 1 to 2 * n inclusive read a[i]
sort a from position 1 to 2 * n + 1
if a[n] is a[n + 1]
print "NO"
else
print "YES"
create new integer called n
x is an array of integers with size 200001
read n from the user input
for i = 1 to 2 * n inclusive, read user input to x[i]
sort x from position 1 to 1 + 2 * n
if x[n] is less than x[n + 1]
print "YES" to the standard output
else
print "NO"
n = int
read n
vet = int array of size 2 * n
read 2 * n values into vet
sort vet
if vet[n - 1] < vet[n]
print "YES"
else
print "NO"
create long long integer variable with name n
read n from the input
create new vector of long long integers v
for i = 0 to 2 * n exclusive incrementing i
declare new long long integer x
read variable x from the input
push x to the end of vector v
sort vector v
if v[n] is greater than v[n - 1]
print "YES"
else
print "NO" to the standard output
print new line to the output
create constant int N = 210
let integer n
make int array in of size N
read n and while n is truthy
for i = 0 to 2 * n exclusive, read in[i]
sort in using argument in + 2 * n
if in[n] is greater than in[n - 1]
print "YES"
else do
print "NO"
declare integer n
read n
let n be n * 2
declare integer array a size 1005
for i = 0 to n exclusive, read a[i]
sort from a to a + n
if a[n/2 - 1] is not a[n/2]
print "YES", newline
else
print "NO", newline
create integer n
read n
create int vector v of size 2 * n
for i = 0 to 2 * n exclusive, read v[i]
sort vector v
print (v[n] > v[n - 1] ? "YES\n" : "NO\n")
n is a new long long variable
read standard input to n
p is a new long long with value 2 * n
create new array of long longs arr with p elements
start for loop from i = 0 to 2 * n exclusive, read input to arr[i] on each loop
sort arr
if arr[n - 1] = arr[n]
print "NO" to the standard output
else
print "YES"
create integer N
declare string variable S
read N and S
sort array S
print S and '\n'
MaxN = constant long long equal to 301002
create long long n
create string s
read n
read s
call sort on s
print s and a new line
create integer n
read n
create string a
read a
sort a from beginning to end
print a and a new line
const is keyword for declaration of function then integer oo=1e9
integer =n
read n
string=s
read s
sort the function begin to end in descending order
print s
n = integer
read n
create string s
read s
sort s
print s and a new line
create integer n
read n
create string str
read str
sort elements from beginning of str to end of str
print str print newline
create constant integer inf 0x3f3f3f3f
create long long a
create string s
create integer n
read n
read s
sort elements from beginning of s to end of s
print s print newline
let v be a vector of ints
let n be an int
read n
let s be a string
read s
sort(s.begin(), s.end())
print s and a newline
create integer n
create string s
read n read s
sort elements from beginning of s to end of s
print s print newline
create integer n
read n
create string str
read str
sort elements from beginning of str to end of str
print str print newline
n =integer
s =string
Read n and s
sort strings in alphabetical order
print s and a new line
create integer n
read n
create string s
read s
sort elements from beginning of s to end of s
print s print "\n"
create string s
create integer n
read n and s
sort s
print s
create integer n
create string s
read n read s
sort elements from beginning of s to end of s
print s print newline
n = integer
read n
s = string
read s
sort string s
print s
a = int
read a
s = string
read s
arr = int array of size 26 with each value set to 0
for i = 0 to a increment arr[s[i] - 'a']
for i = 0 to 26
for j = 0 to arr[i] print 'a' + i as char
print a newline
n = integer
read n
s = string
read s
sort the elements of s
print s
create long long n
read n
declare string variable s
read s
sort s
print s and "\n"
create constant double PI with PI = 2.0 * acosign of 0.0
create constant integer MOD with MOD = 1e9 + 7
create constant integer oo with oo = 2 * MOD + 1e3
declare gcd with long longs a, b as arguments, returning long long
return a if not b, else return result of run gcd with b, a % b as arguments from function
create integer n
create string str
read n read str
sort elements from beginning of str to end of str
print str print '\n'
declare integer variable n
declare string variable s
read n and s
sort s
print s
create int64_t variable n
create string s
read n and s
sort s
print s
declare constant integer mod = 1000000007
declare constant long long inf = 1000000000000
declare integer variable n
read n
declare string variable s
read s
sort s
print s and '\n'
int the function fpow that takes long long n, k, p with p = 1000000007 and returns long long
r = 1
for k >>= 1 if k
if k & 1 r = r * n % p
n = n * n % p
return r
in the function inv that takes long long a, p with p = 1000000007 and returns long long
return fpow with a, p - 2 and p as arguments
n = integer
read n
s = string
read s
sort s.begin() and s.end()
print s
create character array a with size 100005
create integer n
read n
read character
read string into a
sort elements from a to a + n
print a
declare integer variable n
read n
declare string variable second
read second
sort second
print second
vis= array of 100005 boolean values
define comp which takes a = pair from int to char, b = pair int to char as parameters
return a.first > b.first
let n be an int
read n
let s be a string
read s
execute sort with s.begin(), s.end() as arguments
print s and one newline
declare gcd with long longs a, b as arguments, returning long long
return result of run gcd with b % a, a as arguments if a is true, else b
declare swap with character points a, b as arguments, returning void
create character temmp with temp = value of a
set value of a to value of b
set value of b to temp
declare maxPrimeFactors with long long n as argument, returning long long
create long long maxPrime with maxPrime = -1
while n % 2 is 0
set maxPrime to 2
set n to n bitshift right 1
for i = 3 to square root of n inclusive, incrementing i by 2
while n % i is 0
set maxPrime to i
set n to n / i
if n is greater than 2, set maxPrime to n
return maxPrime
declare bin_gen with ulong longs n, num, returning string
create string bin with bin = ""
while decrement n is true
if num % 2
increment bin by "1"
else
increment bin by "0"
set num to num / 2
return bin from function
create long long n
read n
create character array arr with size n
for i = 0 to n exclusive, read arr[i]
sort elements from arr to arr + n
fo ri = 0 to n exclusive, print arr[i]
print newline
mod = unsigned long long const with mod = 1000000007
md = unsigned long long const with md = 998244353
in function mypow taking two unsigned long longs a and b and returning an unsigned long long
res = unsigned long long with res = 1
set a to a modulo mod
call assert on b is greater or equal to 0
loop while b is not 0 bitshifting b right by 1 each time
if b bitwise-and 1 is not 0 then set res to res * a modulo mod
set a to a * a modulo mod
return res
in = ifstream on "txt.in"
out = ofstream on "txt.out"
call fixed and setprecision of 12 on cout
n = unsigned long long
read n
s = string
read s
sort s
print s
declare int variable N
read N
declare string variable S
read S
sort S
print S and "\n"
create int n
read n
create string s
read s
sort array s
print s and a newline
create float A and C
create float max, min
read A and C
if A and C equal to 0
max =0
assign 0 to min
else if A=0
print Impossible
else if C=0
max = A
set min equal to A
else if C less than A
min = A
set max to A + C-1
else
set max = A + C -q
assign C/A*A to min
print min, " ", max and a newline
declare const int N = 1e6
declare integers n and m
declare ints mx and mn
read input to n and m
if n = 0 and m > 0
print "Impossible"
if m is equal to 0
print n, " " and n
change mx to n + m - 1
if n >= m
change mn to n
else
change mn to m
print mn, " " and mx
define integers n and m
read n, m
if n is 0 and m is nonzero
print Impossible
otherwise
print n + maximum of 0LL and m -n, " ", n + maximum of 0LL and m - 1, and a newline
;
n, m = long long
read n, m
if n is 0 and m is 0
print 0 0
if n is 0
print Impossible
mx = long long = n + m
if m carries a nonzero value, decrease mx by 1
mn = long long = n + m
mn = mn = lowest number between n and m
print mn mx
n, m =integers
Read n and m
if n is equal to 0
if m is equal to 0
print 0, 0 and a new line
else do the following
print Impossible and a new line
else do the following
mn, mx, a, b, c, d = integers
if m is equal to 0
set mx to n
else do the following
set mx to m + n - 1
set mn to n - 1
set m to m - n - 1
if m is greater than 0
set mn to mn + m
else do the following
set mn to mn + 1
print mn, mx and a new line
let mn be a long integer
let a, b be integers
read a and b
if a is equal to 0 and b is equal to 0
print 0 and space and 0 and newline
if a is equal to 0
print Impossible and newline
semicolumn
if b is equal to 0
print a and space and a and newline
let mx be a long integer
if b >= a
the value of mn = a + (b - a)
else do the following
the value of mn is equal to a
the value of mx is equal to a + (b - 1)
print mn and space and mx and newline
create integers n, m
read n read m
if n is 0 and m is greater than 0
print "Impossible" print newline
create integers mn, mx
set mn to n + ( maximum of ( 0 and m - n ) )
set mx to n + maximum of ( m - 1 )
print mn print " " print mx print newline
declare integer variables n and m
read n and m and keep looping
create integer mx = n + max of m - 1 and 0
create integer mn = n + max of 0 and m - n
if mn is greater than mx
print "Impossible"
else
print mn, " " and mx
ch, ad = integers
read ch, ad
if ad is 0 and ch > 0
print Impossible
else
print ad + ch - min(ad, ch)," ",ad + max(ch - 1, 0)
create long longs n, m
read n read m
create long longs x, y
if n is 0
if m is true
print "Impossible\n"
else
print "0 0\n"
else
if m is true
set y to ( n - 1 ) + m
set x to n
if m is greater than n, increment x by ( m - n )
else
set x to y to n
print x print " " print y print "\n"
n, m = integers
read n, m
if n is 0 and m is 0
print 0," ",0
else if n is 0
print Impossible
else
print if n > m, n else m," ",if m > 0, n + m - 1 else n
create integers n, m
read n read m
if n is 0 and m is greater than 0
print "Impossible" print newline
else
print n + m - minimum of n and m print " " print n + maximum of m - 1 and 0, print newline
n, m, mn, mx =integers
Read n and m
if n is equal to 0
if m is equal to 0
print 0 0 and a new line
else do the following
print Impossible and a new line
if m is equal to 0
print n, " ", n and a new line
set mx to n + m - 1
if n is greater than or equal to m
set mn to n
else do the following
set mn to n
print mn, " ", mx and a new line
n, m = long long int
read n then m
if n is 0 and m is greater than 0
print "Impossible"
else
if n is greater or equal to m
print n and ' '
else
print (m / n) * n + (m % n) and ' '
if m is greater than 0
print (n - 1) + m
else
print n
declare integers n and m
read n and m
if n = 0 and m > 0
print "Impossible"
declare int variables mn and mx
set mn to n
if m = 0
assign n to mx
else
set mx to n + (m - 1)
if m is greater than n, increase mn by m - n
print mn, " " and mx
n, m = long long
read n, m
if n is 0 and m is not 0
print Impossible
if n is 0 and m is 0
print 0," ",0
if n is not 0 and m is 0
print n," ",n
if n <= m
print m," ",n - 1 + m
else
print n," ",n + m - 1
let n, m, c, d be integers
while read n , m
if n is equal to 0 and m is equal to 0
print 0 and space and 0 and newline
else do the following
if n is equal to 0
print Impossible and newline
else do the following
if n is equal to 1
if m is equal to 0
print n and space and n and newline
else do the following
print m and space and m and newline
else do the following
if n >= m
if m is equal to 0
print n and space and n and newline
else do the following
c is equal to m + n - 1
print n and space and c and newline
else do the following
d is equal to m + n - 1
print m and space and d and newline
declare int variables n and m
read input to n and m
if n = 0 and m != 0
print "Impossible"
else if n = 0 and m = 0
print 0, " " and 0
else
declare integer mx = n + (max of 0 and m - 1)
declare integer mn = n + (max of 0 and m - n)
print mn, " " and mx
create integer array dx with dx = {-1, 0, 1, 0}
create integer array dy with dy = {0, 1, 0, -1}
create long longs n, m
read n read m
if m is 0 and n is greater than or equal to 0
print n print " " print n print newline
if n is 0 and m is greater than 0
print "Impossible" print newline
create long long maxsum with maxsum = m + n - 1
create long long minsum with minsum = n + maximum of ( m - n and 0LL )
print minsum print " " print maxsum print newline
create int t, s, q
cnt=0
read t, s and q
while s < t
set s to s*q
increment cnt
print cnt
declare integers t, s, q
read t, s, q
declare integer ans = 1
declare integer temp = s * q
while temp is less than t
increment ans
let temp be temp * q
print ans, newline
create long long ints a, b, c, and coun = 0
read a, b, and c
while a is greater than b
set b to b * c
add 1 to coun
show coun
the constant double value of PI = acos(-1)
let mod be a inline function that accepts long long n, long long m and returns a long integer value
the long integer value of ret = n modulo m
if ret is less than 0 , increment ret by m
return the value of ret
let gcd be a function that accepts long long a, long long b and returns a long integer
if a equals 0
return the value of b
else do the following
return the value of gcd of b modulo a and a
let q, s, t be long integers
read t , s , q
the long integer value of ans = 0
while s is less than t
s is equal to s * q
increment ans by 1
print ans and newline
declare constant integer MAXN = 1e4 + 4
declare integers n, a, b
read n, a, b
declare integer ans = 0
while a is less than n
let a be a * b
increment ans
print ans and "\n"
let t, s, q, c be long integers with c = 0
read t , s , q
while t is greater than s
s is equal to s * q
increment c by 1
print c and newline
let t, s, q be integers
while read t, s, q
let ans be integer 0
while s is less than t
increment ans by 1
multiply s by q
print ans and newline
create new integer constant called maxn with value 2e3 + 10
create constant integer eps = 1e-14
mod is a new constant integer with value 1e9+7
declare long long constant inf = 1e18
define integers t, s and p
read standard input to t, s and p
cnt is a new integer with value 0
while s < t
multiply s by p
add 1 to cnt
print cnt
create ints t, s, and q
make integer ans = 1
read t, s, and q
make long double now = 0
create long double last = s
while last is less than t
make long double tmp = (last - now ) * q
if last + tmp * (q - 1) / 2 is greater than or equal to t, break loop
set last to last + ceil(tmp) * (q - 1) / q
add ceil(tmp) to now
subtract last from now
increment ans
show ans
create long long int s, t, and q
read t, s, and q
make long long ans = 0
while s is less than t
set s to s * q
increment ans
show ans
declare integers t, s and q
read from the input to t, s and q
ans is a new integer variable = 1
while s * q < t
increment ans by one
set s to s multiplied by q
print ans
declare new integers t, s and q
read variables t, s and q from the input
create new integer variable ans = 0
while s < t
set s to s multiplied by q
increment ans
print ans
declare new int variables t, s and q
read input to t, s and q
define integer ans = 1
define new integer x with value s * q
while x < t
increment ans
change the value of x to x multiplied by q
print ans
declare integers n, m
declare integer array b size 200007
declare integer arrays a size 200007, c size 200007
declare integer vector v
declare integers i, j, l, h, t = 0
declare strings s, s1, s2, s3
declare long longs RE, DE, HE
read RE and DE and HE
while DE * HE is less than RE
increment t
let DE be DE * HE
print t + 1 and newline
declare integer variables a, b and c
declare integer variable ans = 0
read variables a, b and c from the input
while b < a
change the value of b to b multiplied by c
increment ans
print ans
create ints t, s, and q
make int count = 0
read t, s, and q
while s is less than t
set s to s * q
set count to count + 1
show count
declare doubles t, s, q, c and ans with c and ans = 0
read user input to t, s and q
while s < t
change s to the product of s and q
increment ans by one
print ans to the standard output
create const int maxn = 1e5 + 5
create long long ints t, s, q, and ans = 0
read t, s, and q
while s is less than t
set s to s * q
add 1 to ans
show ans
t,s,q=int, ans=0
read t,s,q
downloaded=s
while downloaded<t
add s*(q-1) to downloaded
s=downloaded
increment ans
print ans
let MOD be a integer constant which equals 1e9 + 7
let INF be a integer constant which equals INT_MAX
let LINF be a long long constant which equals LLONG_MAX
let ans be integer
let t, s, q be long double values
read t, s, q
let x, z, y be long integers with x, z equals 0 and y equals s
while s is less than t
multiply s by q
increase ans by 1
print ans and endline
declare integer variables ans, t, s and q
set ans to 0
read standard input to t, s and q
while s < t
multiply s by q
increment ans by one
print ans to the standard output
let a, b, c be integers
read a
read b
read c
let s(b), x(0) be integers
while s is less than a
s is equal to s * c
increment x by 1
print x and newline
create long longs t, s and q
new integer cnt = 1
read input to t, s and q
in the infinite loop
if s * q >= t
stop the loop
else
set s to s * q
increment cnt
print cnt to the standard output
declare integers n, s, q
declare integers t, w, i, j, k, cnt, ans = 0
read n, s, q
while s is less than n
increment ans
let s be s * q
print ans, newline
integer as t,s,q,cnt = 0
read t,s,q
if s is less than t then do the following
add one to cnt
multiply s by q
output cnt
create integers t, s and q
read t, s and q and keep looping
declare integer variable with name ans = 0
while s < t
increment ans by one
multiply s by q
print ans to the standard output
let T, S, q be integers
read T, S, q
print (int)ceil(log(T * 1.0 / S) / log(q)) and newline
create long long t, s, q
read t, s and q
ans=0
while s < t
s= s*q
increment ans
print ans
n, m and a are long long integers
read n, m and a
n = n % 10000000000
m = m % 10000000000
a = a % 10000000000
let int ans be long longs
if a > n and a > m
assign value of 1 to the ans
else
if n % a is greater than 0
n = n / a + 1
else
n = n / a
if m % a is greater than 0
m = m / a + 1
else
m = m / a
ans = n * m
print ans and a new line
create integers n, m and a
read n, m and a
print 1ll * (n + a - 1) / a * ((m + a - 1) / a) and a new line
create integers m, n, a
read m
read n
read a
create integer l with l = round up ( n / (a*1.0) )
create integer w with w = round up ( m / (a*1.0) )
print long long casted l * long long casted w print newline
m, n and a = integers
read m
read n
read a
int l = ceil of n / (a * 1.0)
int w = ceil of m / (a * 1.0)
print l * w and a new line
declare long longs called a, b and c
read a, b and c
print (((a + c - 1) / c) * ((b + c - 1) / c)) and "\n"
create doubles n, m and a
read n, m and a
print (n / a * 1.0) rounded upward * (m / a * 1.0) rounded upward, and a new line
n, m, a, x and y are long longs
read n, m and a
if n % a != 0 and m % a != 0
x = n / a + 1
y = m / a + 1
else if n % a = 0 and m % a != 0
x = n / a
y = m / a + 1
else if n % a != 0 and m % a = 0
x = n / a + 1
y = m / a
else
x = n / a
y = m / a
print x * y and a new line
create long longs n, m, a, x, y
read n read m read a
if a % a is not 0 and m % a is not 0
set x to n / a + 1
set y to m / a + 1
else if n % a is 0 and m % a is not 0
set x to n / a
set y to m / a + 1
else if n % a is not 0 and m % a is 0
set x to n / a + 1
set y to m / a
else
set x to n / a
set y to m / a
print x * y print newline
declare long longs i, j, c1, c2, n, m and a
read n, m and a
if n % a = 0
c1 = n / a
else
c1 = n / a + 1
if m % a = 0
c2 = m / a
else
c2 = m / a + 1
print c1 * c2 and a new line
create long longs n, m and a
read n, m and a
long long stones = (n / a) * (m / a)
if n % a != 0 add m / a to stones
if m % a != 0 add n / a to stones
if m % a != 0 && n % a != 0 add 1 to stones
print stones and a new line
let n, m and a be long longs
read n, m and a
set long long ans to 0
if n % a is equal to 0
n = n / a
else
n = n / a + 1
if m % a is equal to 0
m = m / a
else
m = m / a + 1
print m * n and a new line
m, n and a are integers
read m, n and a
int l = n / (a * 1.0) rounded down
int w = m / (a * 1.0) rounded down
print l * w and a new line
n, m and a = doubles
read n, m and a
print (n / a) rounded up * (m / a) rounded up, and a new line
let n, m and a be long longs
i and j are long longs with i = 0 and j = 0
while car rean n, m and a
if n % a is 1
i = n / a + 1
else
i = n / a
if m % a is 1
j = m / a + 1
else
j = m / a
print i * j and a new line
create long longs n, m, a
create long longs i, j, with i = 0, j = 0
while read n read m read a is true
if n % a is true
set i to n / a + 1
else
set i to n / a
if m % a
set j to m / a + 1
else
set j to m / a
print i * j print newline
n = long long
m = long long
a = long long
read n, m and a
print ((n + a - 1) / a) * ((m + a - 1) / a) and a new line
create long long n
create long long m
create long long a
read n read m read a
print ((n + a - 1) / a) * ((m + a - 1) / a) print newline
int n, m, a and ans = long longs
read n, m and a in a loop
if a > and a > m
print "1" and a new line
else
if n % a is greater than 0
n = (n / a) + 1
else
n = (n / a)
if m % a is greater than 0
m = (m / a) + 1
else
m = (m / a)
ans = n * m
print ans and a new line
create long longs x, y and a
read x, y and a
declare long longs xx = x / a and yy = y / a
if x % a != 0 increment xx
if y % a != 0 increment yy
print xx * yy and a new line
create long longs x, y, a
read x read y read a
create long longs xx, yy, with xx = x/a, yy = y/a
if x % a is not 0, increment xx
if y % a is not 0, increment yy
print xx * yy print newline
declare long longs called n, m and a
read n, m and a
create long long rows = (n + a - 1) / a
create long long cols = (m + a - 1) / a
print rows * cols and a new line
let n, m, a be long integers
read n, m, a
if n modulo a is equal to 0
the value of n = n / a
else do the following
the value of n = n / a + 1
if m modulo a is equal to 0
the value of m = m / a
else do the following
the value of m = m / a + 1
print n * m and newline
create long longs a, b, c
while read a read b read c
create long longs d, e
if a % c is not 0, set d to a / c + 1
if b % c is not 0, set e to b / c + 1
if a % c is 0, set d to a / c
if b % c is 0, set e to b / c
create long long f with f = d * e
print f print newline
n, m, a = long lon
while reading n then m then a print ((n + a - 1) / a) * ((m + a - 1) / a)
create long long x, y and a
read x, y and a
set xx to x/a and yy = y/a
if x mod a different from 0, increment xx
if y mod a different from 0, add 1 to yy
print xx * yy
create long longs n, m, a
read n read m read a
create long longs nN, nM
set nN to n / a
set nM to m / a
if n % a is not 0, increment nN
if m % a is not 0, increment nM
print nN * nM print newline
a, b, c, d =integers
Read a, b, c
if c is greater than or equal to a and c is greater than or equal to b
print 1 and a new line
if c is less than a and c is greater than or equal to b
if a modulo c is 0
print a / c and a new line
else do the following
print a / c + 1 and a new line
if c is greater than or equal to a and c is less than b
if b modulo c is 0
print b / c and a new line
else do the following
print b / c + 1 and a new line
if c is less than a and c is less than b
if b modulo c is 0 and a modulo c is 0
print (a * b) / (c * c) and a new line
else if b modulo c is not 0 and a modulo c is 0
print (a / c) * (b / c + 1) and a new line
else if b modulo c is 0 and a modulo c is not 0
print (b / c) * (a / c + 1) and a new line
else do the following
print (a / c + 1) * (b / c + 1) and a new line
noOfOranges, Orange, maxSize, maxWaste, Waste, cnt = integers with Waste = 0, cnt = 0
read noOfOranges, maxSize, maxWaste
for i = 0 to noOfOranges exclusive
read Orange
if (Orange > maxSize)
continue next itereation
else
Waste = Waste + Orange
if (Waste > maxWaste)
increment cnt
Waste = 0
print cnt
let n, b, d, v, sum , c be integers with sum = 0, c = 0
read n , b , d
for x = 0 to n exclusive
read v
if v <= b , increment sum by v
if sum is greater than d
sum is equal to 0
increment c by 1
print c and endline
new constant integer N = 1e5 + 100
define constant double PI with value 3.14159
create vector of booleans v
declare integers n, m, now, ans, b and d, and an array of integers a with N elements
st is a set of integers
define strings s and t
read n, b and d
in a for loop, change i from 0 to n exclusive
read a[i] from the input
go to the start of the loop if a[i] is greater than b
change now to now + a[i]
if now is greater than d
increment ans by one
change the value of now to 0
print ans to the standard output
n, b, d, a, c, c2 = integers
read n, b, d
while decrement n
read a
if (a <= b), c = c + a
if (c > d)
increment c2
c = 0
print c2
create integer n, b, d, result, counter with result=0, counter=0
read n, b, d
create integer array oranges with size n
for integer i=0 to n-1 with increment i
read oranges[i]
if oranges[i] less than or equal to b then add oranges[i] to counter
if counter greater than d then
increment result
set counter to 0
print result
n =integer
Read n
b = integer
Read b
d = integer
Read d
orange, volume, counter = integers with volume = 0, counter = 0
for i = 0 to n exclusive
Read orange
if orange is less than or equal to b, set volume to volume + orange
if volume is greater than d
set volume to 0
increment counter
print counter and a new line
n, b, d =integers
Read n, b, d
temp, ans = integers with ans = 0
cont =integer with 0
for i = 0 to n exclusive
Read temp
if temp is less than or equal to b
set cont to cont + temp
if cont is greater than d
increment ans
set cont to 0
print ans and new line
n = long double with value of 0
s = long double with value of 0
b = long double with value of 0
d = long double with value of 0
e = long double with value of 0
output = integer with value of 0
read n, b and d
for i = 0 to n exclusive
read s
if s is greater than b
continue
else
increase e by s
if e is greater than d
add 1 to output
set e to 0
print output
create long long ints n, b, d, and i
read n, b, and d and while they're truthy
create long long ints sum = 0 and c = 0 and int array a of size n + 5
for i = 0 to n exclusive, read a[i]
for i = 0 to n exclusive
if a[i] is less than or equal to b, set sum to sum + a[i]
if sum is greater than d
set sum to 0
add 1 to c
display c
let n, b, d, v, sum and c be unsigned long integers with sum and c = 0
read from the input to n, b and d
start a loop from x = 0 to n exclusive incrementing x
read standard input to v
if v <= b, change sum to sum + v
if sum is greater than d
assign 0 to sum
increment c by one
print c
create integers n, b, d, i, cnt and tmp with cnt and tmp = 0; create an array of integers a with 100001 element
read n, b and d from the input
read elements of a from the input n times in a loop
start for loop from i = 0 to n exclusive incrementing i
if a[i] <= b and cnt <= d, add a[i] to cnt
if cnt is greater than d
assign 0 to cnt
increment tmp by one
print tmp to the standard output
create int int n, b, d,,set result and temp to 0
read n, b and d
for i=0 to n exclusive
create int size
read size
if size <= b, set temp to temp + size
if temp > d
increment result
set temp to 0
print result
n, b, d = integers
read n, b, d
ans, cnt = integers with ans = 0, cnt = 0
for i = 0 to n exclusive
x = integer
read x
if (x <= b)
cnt = cnt + x
if (cnt > d)
increment ans
cnt = 0
print ans
n, b, d, sum and ans are integers where sum and ans = 0
read input to n, b and d
for integer i = 0 to n exclusive incrementing i
t is a new integer variable
read t
if t <= b
increase sum by t
if sum is greater than d
assign 0 to sum
increment ans
print ans to the output stream
let n, b, d be integers
read n, b, d
let integer value of sum = 0
let integer value of count = 0
for i = 0 to n exclusive
let a be a integer
read a
if a <= b , increment sum by a
if sum is greater than d
increment count by 1
sum is equal to 0
print count and newline
s is a new array of integers with 100000 + 5 elements
create integers n, b, d, ans and sum with ans and sum = 0
read n, b and d from the user input
start for loop from i = 0 to n exclusive
read s[i] from the input
if s[i] is greater than b
skip the rest of the loop
else
increase sum by s[i]
if sum is greater than d
change sum to 0
increment ans by one
print ans to the standard output
create long n, b, d, c, set c to 0
read n, b and d
create long orange[n]
out=0
for i=0 to n exclusive
read orange[i]
if orange[i] > b
continue
else
set out to out + orange[i]
if out > d
increment c
out=0
print c
let n, b, d be long integers
a = array of long integers of length 100007
read n, b, d
for long integer $i = 0 to n - 1 inclusive , read a[$i]
let c be a long integer with c = 0
let s be a long integer with s = 0
for long integer i = 0 to n - 1 inclusive
if a[i] <= b
increment s by a[i]
if s is greater than d
increment c by 1
s is equal to 0
print c and newline
let n, b, d be integers
read n, b, d
ret, tot = integers with value of 0
for int i = 0 to n
a = int
read a
if a > b, continue
add a to tot
if tot > d
add one to ret
let tot = 0
print ret
x, y, a, b = integers
read x, y, a, b
x = (x * y) / the result of calling __gcd with arguments of x and y
print the result of b / x - (a - 1) / x
let gcd be a long integer function which accepts long integers a, b
if a is equal to 0 or b is equal to 0, return 0
if a is equal to b , return a
if a is greater than b , return gcd of a - b, b
return gcd of a, b - a
let f, l, x, y, a, b, i, cnt be long integers with cnt = 0
read x, y, a, b
let lcm be a long integer with lcm is equal to (x * y) / gcd of x, y
print ((b / lcm) - ((a - 1) / lcm)) and newline
declare x, y, a, b as integers
read x read y read a read b
declare val = ( x * y ) / ( run __gcd(x, y) ) as integer
declare integer ans
if a % val is 0
let ans be b / val - a / val + 1
else
let ans be b / val - a / val
print ans, "\n"
declare long long integers a, b, x, y
read x, y, a, b
declare long long integer g = run __gcd(x, y)
let x be ( x * y ) / g
if a % x is 0
print b / x - a / x + 1
else
print b / x - a / x
print newline
create new integers x, y, a and b
read standard input to x, y, a and b
create integer variable with name lcm = x * y / __gcd(x, y)
declare integer ans with value b / lcm - (a - 1) / lcm
print ans
in function gcd with arguments integer a and integer b that returns an integer
return the result of calling gcd with arguments of b and a modulo b if b is nonzero else return a
x, y, a, b, v, k = integers
read x, y, a, b
v = x * y / the result of calling gcd with arguments of x and y
k = b / v - (a - 1) / v
print k
integer function gcd with int arguments a and b
return a if b=0, or gcd(b, a % b) otherwise
function lcm with int arguments a and b that returns integer
return a * (b / gcd(a, b))
declare integers x, y, a and b
read variables x, y, a and b from the input
declare integer variable MCM with value = result of lcm(x, y)
print (b / MCM) - ((a - 1) / MCM) to the standard output
in function gcd taking int a, int b and returning int
if b is 0 return a
return gcd of b, a mod b
in function LCM taking int a, int b and returning int
return (a * b) / gcd of a, b
ans, x, y, aa, bb, m = int
read x then y then aa then bb
set m to LCM of max of x, y, min of x, y
set ans to (bb / m) - (aa - 1) / m
print ans
x, y, a, b, m, n = int
read x then y then a then b
p, q = int with p = x and q = y
loop while q
set n to q
set q to p mod q
set p to n
set n to (x * y) / n
set m to not (a mod n)
print (b / n - a / n + m)
declare integer f with integers a, b as arguments
declare integers t, x = a, y = b
if x is less than y
let t be x
let x be y
let y be t
while x % y is not 0
let t be y
let y be x % y
let x be t
return a * b / y
declare integers x, y, a, b
while read x, y, a, b is true
declare integer t = result of run f(x,y)
declare integer p = b / t - a / t + 1 if a % t is 0, else b / t - a / t
print p, newline
declare function GCD taking int a, int b and returning int
x, y = int
a, b = int
read x then y then a then b
set x to x * y / GCD of x, y
print b / x - (a - 1) / x
in function GCD taking int a, int b and returning int
n = int with n = a mod b
loop while n is not 0
set a to b
set b to n
set n to a mod b
return b
function gcd (gets two ints a and b, return int)
if a is 0 return b
return gcd(b modulo a, a)
x,y=int
a,b=int
read x
read y
read a
read b
M=x/gcd(x,y)*y
l=a/M
r=b/M
if l*M < a increment l
print r-l+1
let x, y, a, b be integers
let ans be a integer
it is a function which returns Greatest Common Divisor of two integers k, l
if l is equal to 0
return the value of k
else do the following
return the Greatest Common Divisor of l, k modulo l
it is a function which returns Least Common Multiple of two integers m, n
return the value of (m * n) / Greatest Common Divisor of m, n
ans is equal to 0
read x, y, a, b
let kpk be a integer
kpk is equal to Least Common Multiple of x, y
ans is equal to floor (b / kpk) - floor ((a - 1) / kpk)
print ans and newline
let x, y, a, b, p, ans, u, v, gcd, lcm be int
read x, y, a, b
set p to the __gcd of x and y
set lcm to x*y/p
set u = a / lcm
set v = b / lcm
set ans = v - u
if a mod lcm is 0 then increment ans
print ans
declare integer gcd with integers a, b as arguments
return a if b is 0, else gcd ( b, a % b )
declare lcm as integer with integers a, b as arguments
return a / result of run gcd with a, b as arguments * b
declare x, y, a, b as integers
read x and y and a and b
declare LCM = run lcm(x,y)
print (b/LCM) - ((a - 1) / LCM), newline
declare gcd with integers x, y as arguments, returning integer
if y is 0, return x
return result of run gcd with y, x % y as arguments from function
declare lcm with integers x, y as arguments, returning integer
return ( x * y ) / run gcd(x,y)
declare x, y, a, b, ans = 0 as integers
read x, y, a, b
let ans be -a/ result of run lcm(x,y) + b / result of run lcm(x,y)
if a % result of run lcm(x,y) is 0, increment ans by 1
print ans, newline
declare x, y, a, b, p as integers
read x read y read a read b
let b be result of run __gcd(x, y)
let x be x * y
let x be x / p
if a % x is 0
let a be a / x
decrement a
else
let a be a / x
let b be b / x
print b - a print newline
integer function gcd with int arguments a and b
while b > 0
declare new integer tmp with value b
set b to a % b
change a to tmp
return a
int function lcm with int arguments a and b
return a * b / gcd of a and b
set output decimal precision to 12
declare new integer called x
read from the input to x
create new integer variable y
read the input to y
create new integer a
read user input to a
declare new integer called b
read variable b from the input
print b / lcm(x, y) - (a - 1) / lcm(x, y)
create int a, b, c, x, y, z
read x, y, a and b
set z to (x * y) / __gcd(x, y)
assign b/z to c
set c to c - (a - 1) / z
print c and a newline
let gcd be a integer function which accepts integers x and y
if x is equal to y, return the value of x
while x is not equal to 0 and y is not equal to 0
if x is greater than y
x is equal to x modulo y
else do the following
y is equal to y modulo x
return y if x is less than y else return x
let x, y, a, b be integers
read x, y, a, b
let z be a integer with z is equal to x * y / gcd of x, y
print b / z - (a - 1) / z and newline
declare constant integer INF = 0x3f3f3f3f
declare gcd with integers a, b as arguments, returning integer
if a is less than b, swap values between a and b
if not b, return a
return run gcd ( b , a % b )
declare i, j, k as integers
declare n, m, a, b, c, d as integers
read a, b, c, d
let k be run gcd(a,b)
let k be a / k * b;
let m be d / k - c / k
if c % k is 0, increment m
print m and newline
let gcd be a function which accepts long integers a and b
if b is equal to 0
return the value of a
else do the following
return value gcd of b , a modulo b
let x, y, a, b be long integers
read x, y, a, b
let g be a long integer with g = gcd of maximum of x, y and minimum of x, y
let lcm be a long integer with lcm = (x * y) / g
let r be a long integer with r = b / lcm
let l be a long integer with l = (a - 1) / lcm
print r - l and newline
let cns, cnt be integers with cns is equal to 0, cnt is equal to 0x3f3f3f3f
let n, strength be integers with strength is equal to array of integers of length 100001
read n
for i= 0 to n exclusive
read ith element of array strength
if (ith element of array strength is greater than cns), cns is equal to ith element of array strength
if (ith element of array strength is less than cnt), cnt is equal to ith element of array strength
let vis be a integer with value is equal to 0
for (i = 0 to n exclusive)
if (ith element of array strength is equal to cns or ith element of array strength is equal to cnt), increase vis by 1
print n - vis and newline
size, maior, menor c = int with maior = -0x3f3f3f3f and menor = 0x3f3f3f3f and c = 0
read size
vector = int vector of size size
for i = 0 to size
read vctor[i]
set maior to max of maior and vetor[i] then set menor to min of menor and vetor[i]
for i = 0 to size
increment c if vetor[i] is greater then menor and less than maior
print c
n = int
read n
a = int array of size n
cnt = int with cnt = 0
for i = 1 to n inclusive read a[i]
call sort on a + 1 and a + 1 + n
if n equals 1 or 2
print 0
else if n is greater than 2
minn = int with minn = a[1]
mixx = int with mixx = a[n]
for i = 2 to n - 1 inclusive
if a[i] is between minn and mixx then increment cnt
print cnt
n = int and a = int array of size 100010
read n
for i = 1 to n inclusive read a[i]
sort all n elements in array a starting at a + 1
b, c = int with b = a[1] and c = a[n]
ans = int with ans = 0
for i = 1 to n inclusive
if a[i] is between b and c then increment ans
print ans
MAX = 100005
n,cnt,ans = int, arr = array of MAX int
dict = set of int
read n
for i=0 to n exclusive
read arr[i]
insert arr[i] into dict
cnt=0
iterate on dict incrementing cnt
if cnt < 3
print "0"
sort first n elements of arr
ans = n
for i=0 to n exclusive
if arr[i] == arr[0] or arr[n-1] decrement ans
print ans
i, n, cnt =integers with cnt = 0 and a = array of 100001 integers
Read n
Read n values into array a
mx = integer, set to a[0]
mn = integer, set to a[0]
for i = 0 to n exclusive
if a[i] is greater than mx, set mx to a[i]
if a[i] is less than mn, set mn to a[i]
for i = 0 to n exclusive
if a[i] is greater than mn and a[i] is less than mx
print cnt and a new line
n = int
read n
arr = int array of size n
read n values into arr
sort array arr
a, b = int with a = arr[0] and b = arr[n - 1]
x = int with x = value of upper_bound of arr, arr + n and a - arr
y = int with y = value of lower_bound of arr, arr + n and a - arr
if y is 0
print 0
else
print y - x
create integer s
read s
let a be integer array with size s
for i = 0 to s exclusive read a[i]
sort a
if s = 1 || s = 2
print "0"
declare integer variable t = s - 2
for integer i = 1 to s - 1 exclusive
if a[i] > a[0] and a[i] < a[s - 1]
skip the rest of the loop
else
decrease t by one
print t
create integer n
read n
create integer t
create integer vector a
for i = 0 to n exclusive
read t
add element t to end of a
if size of a is less than 3
print 0 print newline
sort elements from beginning of a to end of a
create integer cnt with cnt = 0
for i = 1 to n - 2 inclusive
if a[i] is greater than a[0] and a[i] is less than a[n-1], increment cnt
print cnt print newline
create integers n, sum with sum = 0, create integer array a with size 100000
read n
for i = 0 to n exclusive, read a[i]
create integers max, min with max = a[0], min = a[0]
for j = 0 to n exclusive
if max is less than a[j], set max to a[j]
if min is greater than a[j], set min to a[j]
for t = 0 to n exclusive
if a[t] is less than max and a[t] is greater than min, increment sum
print sum print newline
let a be integer array with size 100005
declare integer variables n, c1, c2, maxx and minn with c1, c2 and maxx = 0 and minn = 1000000007
read n
for i = 0 to n exclusive
read a[i]
maxx = max of maxx and a[i], minn = min of minn and a[i]
for integer i = 0 to n exclusive
increment c1 if a[i] = maxx
increment c2 if a[i] = minn
if maxx = minn
print 0
else
print n - c1 - c2
n = int
read n
arr = int array of size n
read n values into arr
if n is less than 3
print 0
sort array arr
cnt = int with cnt = 0
for i = 1 to n - 1
if arr[i] is between the first and last value of arr then increment cnt
print cnt
n, b, s, ans = integers with ans = 0
read n
arr = integer array of n
for i = 0 to n exclusive, read arr[i]
b = arr[0]
s = arr[0]
for i = 0 to n exclusive
if arr[i] > b, b = arr[i]
if arr[i] < s, s = arr[i]
for i = 0 to n exclusive
if arr[i] is b or arr[i] is s, continue next iteration
increment ans
print ans
create int array a of length 100005
create n and m
read n
for i=1 to n inclusive, read a[i]
sort a + 1, a + n + 1
t = n
for i=1 to n inclusive
if a[i] = a[1] or a[i] = a[n], decrement t
print t
n, count = integer with count = 0
read n
a = integer array of size n
for i = 0 to n exclusive, read a[i]
sort a and a + n
mx = integer with mx = pointer max_element(a, a + n)
mn = integer with mn = pointer min_element(a, a + n)
for i = 0 to n exclusive
if a[i] > mn and a[i] < mx, increment count
print count
declare long long variables n and cnt where cnt = 0
read n
x is vector of long longs with n elements
y is a set of long longs
loop i from 0 to n exclusive
read x[i]
insert x[i] into y
if n <= 2 or size of y <= 2
print "0"
else
sort x
loop i from 0 to n exclusive
if x[i] != x[0] and x[i] != x[n - 1], increment cnt by one
print cnt
n = int
read n
se = int vector
answer = int with answer = 0
for i = 0 to n
x = int
read x
append x to se
sort se
min = int with min = se[0]
max = int with max = last value of se
for i = 0 to n
if se[i] is between min and max then increment answer
print answer
create integer array a with size 100000, create integers n, c1, c2, mx, mn with c1 = 0, c2 = 0, mx = 0, mn = 1000000000
read n
for i = 0 to n exclusive
read a[i]
set mx to maximum of mx and a[i]
set mn to minimum of mn and a[i]
for i = 0 to n exclusive
if a[i] is mx, increment c1
if a[i] is mn, increment c2
if mx is mn
print 0 print newline
else
print ( n - c1 - c2 ) print newline
n, res, mn, mx = integers with res = 0, mn = INT_MAX, mx = INT_MIN
a = integer array of size 100001
b1, b2 = bool with b1 = 0, b2 = 0
read n
for i = 0 to n exclusive, read a[i]
for i = 0 to n exclusive
mn = min of a[i] and mn
mx = max of a[i] and mx
for i = 0 to n exclusive
if a[i] > mn and a[i] < mx, increment res
print res
create integer t, integer array a with dimension 105
read t
for integer i=0 to t-1 with increment i do read a[i]
sort a
print a[t-1] and a blank space
for integer i=1 to t-2 with increment i do print a[i] and a blank space
print a[0]
create integer array a of size 101
create int n
read n
for i = 1 to n, read a[i]
sort a + 1 using argument a + n + 1
print a[n] and ' '
for i = 2 to n - 1, print a[i] and ' '
print a[1]
declare constant integer mod with value 1e9 + 7
max i a new constant integer with value 110
create new constant int inf = 0x3f3f3f3f
p is an array of integers with maxn elements
declare new array of integers q with size maxn
create new integer variable t
read t and loop further
for i from 1 to t inclusive, read from the input to p[i]
sort p
print p[t] and ' '
in a for loop, change i from 2 to t exclusive, printing p[i] and ' ' on each loop iteration
print p[1]
a is a new array of integers with size 105
inf is a new constant integer = 0x3f3f3f3f
create integer variable n
loop, reading n from the input
declare integer variables ma with value -inf and mi = inf
for i from 0 to n exclusive incrementing i
read variable a[i] from the input
change the value of ma to max of ma and a[i]
assign the new value = min of mi and a[i] to mi
sort a
print ma and ' '
print elements of a from the index 1 to n - 1 exclusive with ' ' after each one
print mi
declare new constant integer INF with value 100000000
a is a new array of integers with size 150
create integer n
read n and loop further
read standard input to a from the index i to n inclusive
sort a
create integer variable t with value a[1]
assign a[n] to a[1]
change a[n] to t
print a[1]
start for loop from i = 2 to n inclusive, print ' ' and a[i] on each loop
print new line
n, j, i, r = int and a = int array of size 200
read n
read n values into a
for i = 0 to n - 1
for j = 0 to n - 1 - i
if a[j] > a[j + 1]
set r to a[j]
set a[j] to a[j + 1]
set a[j + 1] to r
print a[n - 1]
for i = 1 to n - 1 print a[i] then " "
print a[0]
function qo with bool argument x that returns boolean
return 0 if x is true and qo(!x) othersiwe
mnx is a new constant integer = 1e7 + 9
declare new constant called mod with value 1e9+7 and type int
create new long long n
declare new array of long longs x with mnx elements
create new array of long longs u with size mnx
k is a new array of long longs with size mnx
declare new long long variables cnt and c
read n from the user input
read n elements from the input to x[i] starting from the index 1
sort x from position 1 to n + 1
print x[n] and ' '
start for loop from i = 1 to n inclusive
if i = n or i = 1, go to the start of the loop
print x[i] and ' '
print x[1] and '\n' to the standard output
declare constant integer N = 1e6 + 5
declare integers n, a, c = 2, ans
declare integer vector v
read n
while decrement n is true, read a, add a to end of v
sort from beginning of v to end of v
if size of v is 2
print back of v, " ", v[0], newline
print back of v, " "
for i = 1 to size of v - 1 exclusive, print v[i], " "
print v[0] and newline
mod is a new constant long long = 1e9 + 7
create new constant integer N = 1e5 + 5
long long function gcd with long long arguments a and b
return gcd(b, a % b) if b ! =0 or a otherwise
empty long long function pwr with long long arguments x and y
isprime is an empty boolean function with long long argument x
create vector of integers v
create integers n and x
read standard input to n
loop, decrementing n, while it is not 0
read user input to x
push x to the back of v
sort v from start to end
print v[length of v - 1] and ' ' to the standard output
in a for loop, change i from 1 to length of v - 1 exclusive; print v[i] and ' ' on each iteration
print v[0]
pwr is a long long function with long long arguments x and y
declare new long long variable ans with value 1
change x to x % mod
while y > 0
if y & 1 != 0, assign the value = (x * ans) % mod to ans
change x to x squared modulo mod
change y to y / 2
return ans
boolean function isprime with long long argument x
if x is less than 2, return false
if x is less than 4, return true
if x is even or x % 3 is equal to 0, return false
start a loop from i = 5, while i * i <= x, increasing i by 6
if x % i or x % (i + 2) is equal to 0, return false
return true
create int array a of size 101
create int n
read n and while it's truthy
create int i
for i = 0 to n exclusive, read a[i]
sort a
print a[n - 1] and ' '
for i = 1 to n - 1 exclusive, print a[i] and ' '
print a[0]
n,i=int
while read n
arr and res=array of 110 int filled with 0, max=-10000, min=10000, p_max, p_min and k=int
read arr[0]
max = min = arr[0]
p_max = p_min = 0
for i=1 to n exclusive
read arr[i]
if arr[i] < min
min=arr[i]
p_min=i
else if arr[i]>max
max=arr[i]
p_max=i
k=0
for i=0 to n exclusive
if i is p_min or p_max continue
res[k]=arr[i], increment k
sort first k items of res
if p_max is not p_min print max, space
for i=0 to k exclusive print res[i], space
print min
n is a new integer
a is a new array of integers with size 1000
read n and keep looping
declare new integers b and c
read n elements from the input stream into a[i]
sort a
assign the new value = a[0] to b
assign a[n - 1] to c
print c to the standard output
in a for loop, change i from 1 to n - 1 exclusive, print " " and a[i] on each iteration
print " " and b to the standard output
let cmp be a boolean function which accepts integers a , b
return a greater than b
cc = array of integers of length 105
let n, res , flag , f be integers with res = 0, flag = 0
read n
for i = 1 to n inclusive, read cc[i]
sort the values cc + 1 and cc + 1 + n
swap the values cc[1], cc[n]
for i = 1 to n inclusive
if i is equal to n
print cc[i] and newline
else do the following
print cc[i] and space
INF = const integer with INF = 0x3f3f3f3f
T = const integer with T = 103
row = integer array of size T
n = integer
read n
for i = 0 to n exclusive, read row[i]
sort row and row + n
print row[n - 1]
for i = 1 to n -1 exclusive, print row[i]
print row[0]
declare new array of integers p with size 500
declare integer n
read n and keep looping
set values of first sizeof(p) bytes at the pointer p to 0
for integer i = 0 to n exclusive, read p[i]
sort p from index 0 to n
print p[n - 1] to the standard output
print " " and p[i] to the standard output on a loop for i from 1 to n - 1 exclusive
print " " and p[0]
let A an int array of length 100010
let n an int
read n
read the first n values of A
sort the first n values of A
reverse the first n values of A
let ans be a vector of ints
print A[0]
for i from n-2 down to 1, print A[i]
print A[n-1]
a = integer array of size 110
n = integer
read n
i = integer
for i = 0 to n exclusive, read a[i]
sort a and a + n
print a[n - 1]
for i = 1 to n - 1 exclusive, print a[i]
print a[0]
v = vector of integer
n, a = integers
read n
while decrement n
read a
append a in v
sort v.begin() and v.end()
print v[v.size() - 1]
for i = 1 to i + 1 < v.size(), print v[i]
print v[0]
let n, i be integers
read n
a = array of integers of length n + 1
for i = 1 to n inclusive , read a[i]
sort the values a + 1, a + n + 1
print a[n] and space
for i = 2 to n exclusive , print a[i] and space
print a[1] and newline
declare string a
read a
declare integer s = 0
for i = 0 to a[i], incrementing i
if a[i] is 'a' or a[i] is 'e' or a[i] is 'i' or a[i] is 'o' or a[i] is 'u'
increment s
else if a[i] is greater than or equal to '0' and a[i] is less than or equal to '9' and ( a[i] - 48 ) % 2 is not 0
increment s
print s and newline
create string a
read a
num = 0
b = aeiou13579
for i = 0 to size of a exclusive
for j = 0 to size of b exclusive
if a[i] = b[j] increment num
print num
function isVowel takes a character a and returns a boolean value
return the value of (a is equal to a or a is equal to e or a is equal to i or a is equal to o or a is equal to u)
function isOdd takes a character a and returns a boolean value
return the value of (a is equal to 1 or a is equal to 3 or a is equal to 5 or a is equal to 7 or a is equal to 9)
text is a string
read text
num is an integer and equals 0
for integer i = 0 to text.length() exclusive
if isVowel(text[i]) or isOdd(text[i] is true, increase num by 1
print num and newline
s = string
num = integer = 0
while s is read as a valid string
for i = 0 to length of s exclusive
if s[i] contians a,e,i,o,u,1,3,5,7, or 9, then increase num by 1
print num
make a map called t using character and integer
set t[a] to 1
set t[e] to 1
set t[i] to 1
set t[o] to 1
set t[u] to 1
set t[1] to 1
set t[3] to 1
set t[5] to 1
set t[7] to 1
set t[9] to 1
integers = ans = 0
s = string array
read s
for i = 0 to less than s.size() then add one to t[s[i]]
output ans
declare integer variable with name res = 0
create new string a = "aeiou13579"
create string variable str
read str from the input
in a for loop, change i from 0 to exclusive
if there is part, that equals to str[i], in a, increment res
print res
s = string
read s
a = string = aeiou13579
cnt = integer = 0
for i = 0 to size of s exclusive
for j = 0 to size of a exclusive
if s[i] is a[j], then increase cnt by 1
print cnt
vowel is a bool function with char argument ch
if ch is one of: 'a', 'e', 'i', 'o' or 'u'
return true
else
return false
boolean function even with char argument ch
if ch is an odd digit character
return true
else
return false
declare new string s
read user input to s
create integer variable with name len
count is a new integer with value 0
for i from 0 to len exclusive incrementing i
create new character called ch with value s[i]
if vowel(ch) returns true, increment count by one
if even(ch) returns true, increment count by one
print count
declare string s
read s
declare integers i and j
declare integer len = length of s
declare integer cnt = 0
for i = 0 to len exclusive
if s[i] is greater than or equal to 'a' and s[i] is less than or equal to 'z'
if s[i] is 'a' or s[i] is 'e' or s[i] is 'i' or s[i] is 'o' or s[i] is 'u', increment cnt
if s[i] is greater than or equal to '0' and s[i] is less than or equal to '9'
if ( s[i] - '0' ) % 2 is 1, increment cnt
print cnt and newline
let i, j, k, l, m, n be integers
let s be a string
read s
m is equal to 0
for i = 0 to length of s exclusive
if s[i] is equal to a or s[i] is equal to e or s[i] is equal to i or s[i] is equal to o or s[i] is equal to u
increment m by 1
else if s[i] >= 0 and s[i] <= 9
if (s[i] - 0) modulo 2 is not equal to 0, increment m by 1
print m and newline
s = string
read s
dic = string = 13579aeiou
cont = integer = 0
for i = 0 to size of s exclusive
if i s[i] is in dic, the increase cont by 1
print cont
s=set of char
insert 'a' into s
insert 'e' into s
insert 'i' into s
insert 'o' into s
insert 'u' into s
for i=1 to 10 by 2 exclusive insert i+'0' into s
k=string
ans=0
read k
len=length of k
for i=0 to len exclusive
if k[i] is present in s increment ans
print ans
dict=array of 15 char filled with "13579aeiou"
s=array of 55 char
sum,i=0
read s
while s[i] is not null byte
flag=1
for j=0 to 10 exclusive
if s[i] is dict[j] flag=0
if flag is 0 increment sum
increment i
print sum
ans = int
s = string
read s
for i = 0 to size of s
if isalpha of s[i]
if s[i] is 'a' or 'e' or 'o' or 'i' or 'u' increment ans
else if s[i] is uneven
increment ans
print ans
s = string
read s
c = int with c = 0
for i = 0 to length of s
if s[i] is 'a' or 'e'E or 'i' or 'o' or 'u'
increment c
else if (s[i] < 'a' or s[i] > 'z') and (s[i] - '0') mod 2 is not 0
increment c
print c
declare character set s
insert 'a' into s
insert 'e' into s
insert 'i' into s
insert 'o' into s
insert 'u' into s
for i = 1 to 10 exclusive, incrementing i by 2, insert ( i + '0' ) into s
declare string k
declare ans = 0 as integer
read k
deeclare len = length of k as integer
for i = 0 to len exclusive
if count of k[i] in s, increment ans
print ans and newline
a=array of 55 char
read a
i,cnt=0
while a[i] is not null byte increment i
if a[i] is a digit
if a[i]-'0' is odd increment cnt
if a[i] is one of 'a', 'e', 'i', 'o', 'u' increment cnt
print cnt
in the function isvowel that takes character c and returns bool
if (c is a or c is e or c is i or c is o or c is u), return true
return false
str = string
read str
siz = integer with siz = str.length()
cnt = integer with cnt = 0
for i = 0 to siz exclusive
if (isvowel(str[i]))
increment cnt
else if (not isalpha(str[i]) and (str[i] - 0) bitwise and 1)
increment cnt
print cnt
s=string
read s
ans=0
for i=0 to length of s exclusive
if s[i] is 'a' or 'e' or 'i' or 'o' or 'u'
increment ans
else if s[i]>'0' and <='9' and (s[i]-'0') is odd
increment ans
print ans
make string s
create integer c = 0
read s
make integer len = s.size()
for i = 0 to len exclusive
if strchr("aeiou13579", s[i]) is truthy, increment c
output c
set const int INF to 0x3f3f3f3f
set const int maxn to 5005
integers = arr as an array of maxn
integers = n
read n
if n modulo 10 >= 0 and n modulo 10 is less than or equal to 5 then do the following
output n / 10 * 10
else
if n modulo 10 is true do then add 1 to n
output n
in the function func that takes long long x
if ((x modulo 10) > 5) print (x / 10 + 1) * 10
if ((x modulo 10) <= 5) print (x / 10) * 10
x = long long
while (print x), call func on x
create integer n
read n
if n % 10 is greater than 5
set n to n - n % 10 + 10
else
set n to n - n % 10
print n print newline
create int n
read n
if n mod 10 <= 5
print n/10 *10
else
print (n / 10 + 1) * 10 and a newline
n =integer
Read n
t = integer, set to n modulo 10
if t is greater than or equal to 6
set n to n - t + 10
else do the following
set n to n - t
print n and a new line
n = long long integers
read n
integer t = n modulo 10
if t is greater than or equal to 6 then do the following
set n to n - t + 10
else
set n to n - t
output n
t, s, a, b, c =integers
Read t
print 1LL * ((t + 4) / 10) * 10 and a new line
x, n = integer
read n
if n modulo 10 <= 5
x = 0
else
x = 1
print (n / 10 + x) * 10
create long long n
read n
if n mod 10 greater than 5
print n + (10 - n % 10)
else
print n - (n % 10) and a newline
declare long long n
read n
create int num = n modulo 10
if num = 0
print n
else if num <= 5
print n - num
else
print n - num + 10
create long long integer n
read n
create long long integer m with m = n % 10
create long integer d with d = n / 10
if m is 0
print n print newline
else if m is less than or equal to 5
print n - m print newline
else if m is greater than 5
print n + 10 - m print newline
let n, m and ans be integers
read n while it is not 0
set m to n modulo 10
if m <= 5
assign n / 10 * 10 to ans
else
assign (n / 10 + 1) * 10 to ans
print ans
set pi to 3.1415926535
set mod to 998244353
assign 5e5 + 10 to maxn
create int n
while read n
if n mod 10 <= 5
print n - n mod 10
else
print n + 10 - n mod 10 and a newline
declare const int N = 1e6 + 10
declare const int mod = 998244353
create long long x
read x
if x % 10 is equal to 0
print x
else if x % 10 <= 5
print (x / 10) * 10
else
print (x / 10) * 10 + 10
integers = n
read n
if n modulo 10 is less than or equal to 5 then do the following
output (n / 10) * 10
else
output (n / 10 + 1) * 10
n = long long
read n
if n / 10 is 0
if n is less than 6
print "0"
else
print "10"
else
if n mod 10 is less than 6
print n / 10 then 0
else
print n / 10 + 1 then 0
create long long n
create long long x
read n
x=n
if n mod 10 =0
print n
while x greater than 10, set x to x mod 10
if x <= 5
print n-x
else
print n + 10 - x and a newline
create int n, result and c
read n
c = n mod 10
if c <= 5
assign n - c to result
else
set result = n + 10 - c
print result
create long long int n, m, k, l, j, p
read n
if n less than 10
if n<= 5
print 0
else
p = n + (10 - n)
print p
else
assign n mod 10 to k
if k=0
print n
else
if k <= 5
set l to n - k
print l
else
j = n + (10 - k)
print j and a newline
a, b, c, d, e, f = integers
while read a
if a mod 10 equals 0
print a
else if a mod 10 equals 5
print a - 5
else if a mod 10 is less than 5
set b to a mod 10
print a - b
else
set b to a mod 10
set b to 10 - b
print a + b
define four-element int array dx and set them to 0, 0, -1, 1
define 4-element integral array dy, setting it to 1, -1, 0, and 0
define int n
read n
if n modulo 10 is <= 5
if n / 10 != 0
print n / 10, 0, and newline
else
print 0 and a newline
else
print n / 10 + 1, 0, newline
declare integer variable n
read input to n
declare integer variables k, a, l and m where l and m = 0
set k to n
assign n to a
if n is even and n modulo 5 is 0
print n
else
loop i from 0 to 8 exclusive
increment l by one
if k is even and k modulo 5 = 0, stop the loop
decrement k
loop j from 0 to 8 exclusive
increment m by one
if a is even and a modulo 5 = 0, break the loop
increment a
if l is equal to m
print k
else if l is greater than m
print a
else
print k
n, x =integers with x = 0
Read n
set x to n modulo 10
if x is greater than 5, then set n to n - x + 10
if x is less than 5, then set n to n - x
print n and a new line
create long long n
read n
t = n mod 10
if t >= 6
n = n - t + 10
else
assign n - t to n
print n
create int n
read n
declare array of integers of size n and integer count = 0
populate array a with n values
set max to highest value in array a
for i = 0 to n exclusive set count to count + max - a[i]
print count
create integer array a with size 1000, create integers i, n, ans with ans = 0
read n
for i = 1 to n inclusive, read a[i]
sort elements from a + 1 to a + n + 1
for i = 1 to n exclusive, increment ans by a[n] - a[i]
print ans print newline
integers = t integer N = 1e5 + 50
integers = t integer M = 1e6
oo = 1e18 = constant long long integers
integers = t integer mod = 1e9 + 7
integers = n
read n
sum = 0,mx = 0 = long long integers
for i = 0 to less than n do the following
ong a = long long integers
read a
sum equals sum plus a
set mx to max(mx, a)
output mx * n - sum
create ints n, cnt and sum with cnt and sum = 0
read n
let a be integer array with size n
for i from 0 to n exclusive, read a[i]
sort a
declare int mx = a[n - 1]
loop i from 0 to n exclusive, add abs(mx - a[i]) to sum
print sum
n = integer
read n
welfare = vector of integer
welfare_input = integer
while welfare.size() < n
read welfare_input
append welfare in _inputwelfare
sort welfare.rbegin() and welfare.rend()
i = integer with i = 1
total = integer with total = 0
while welfare.size() > i
if welfare[0] is not welfare[i]
increment welfare[i]
increment total
else
increment i
print total
n, a = integers with a = array of size 101
read n
s, max = integer with s = 0, max = 0
for i = 0 to n exclusive
read a[i]
max = a[0]
for i = 1 to n exclusive
if max < a[i], max = a[i]
for i - 0 to n exclusive, s = s + abs(max - a[i])
print s
create long long int mx, n, a[105] and sum, set mx to 0 and a to all 0
read n
for i=0 to n exclusive, read a[i]
for i=0 to n exclusive
if a[i] greater than mx, mx = a[i]
sum =0
for i=0 to n exclusive, set sum to sum + mx - a[i]
print sum
create integer n
create integer array a with size 10000
create integer maxn
create integer ans with ans = 0
read n
for i = 1 to n inclusive
read a[i]
if a[i] is greater than maxn, set maxn to a[i]
for i = 1 to n inclusive, set ans to ans + maxn - a[i]
print ans print newline
let n, arr , maxx , i, res be integers with arr = array of integers of length 109, maxx = 0, res = 0
read n
for i = 0 to n exclusive
read ith element of arr
if maxx is less than arr[i] , maxx is equal to arr[i]
for i = 0 to n exclusive, res is equal to res + (maxx - arr[i])
print res and newline
a=array of 100 int
n,i,k,max=int
k=0
read n
max = -1
for i=0 to n exclusive read a[i]
for i=0 to n exclusive
if a[i] > max max = a[i]
for i=0 to n exclusive add max-a[i] to k
print k
set sum =0
create int tc
create int array a of size 100
read tc
for i=0 to tc exclusive, read a[i]
create int max = a[0]
for i=0 to tc exclusive
if a[i] > max, set max to a[i]
for i=0 to tc exclusive, set sum = sum + max - a[i]
print sum
integers = n,a[105],i,s
while inputting n loop the following
set s to 0
read n values in array a
if n is 1 then do the following
output s
else
sort the values of a to a + n
for = 0 to less than n - 1 add a[n - 1] - a[i] to s
output s
v = vector of integer
n, x, hitung = integers with x = 0, hitung = 0
read n
for i = 1 to n
m = integer
read m
append m in v
if m >= x, x = m
for i = 0 to n exclusive, hitung = hitung + (x - v[i])
print hitung
n, arr = integers with arr = array of size 100
read n
for i = 0 to n exclusive, read arr[i]
sort arr and arr + n
biggest, res = integer with biggest = arr[n - 1], res = 0
for i = 0 to n exclusive, res = res + (biggest - arr[i])
print res
Create n, i, s, and b as integers, set s to 0, and create a as an integer array with size of 101
Set n to the input
Set a[i] to the input from i=0 to i=n-1
Sort the first n elements of a
Increase s by (a[n-i]-a[i]) from i=0 to i=n-1
Output s
n and ans are ints with ans = 0
create long int array a with 100 elements
read n
loop i from 0 to n exclusive, read a[i]
sort n first elements of a
for i from 0 to n exclusive, increase ans by a[n - 1] - a[i]
print ans
let n be a integer
while read n
A = array of integers of length 111
let maxx be a integer with maxx = -1
for i = 1 to n inclusive
read ith element in a
if a[i] is greater than maxx , initialize maxx = a[i]
set integer sum to 0
for i = 1 to n inclusive , increase sum by maxx - a[i]
print sum and newline
let e be int array with size 105
declare int variable n
read n
create int m = 0
loop i from 1 to n inclusive
create integer t
read t
set e[i] to t
set m t if t <= m
declare integer ans = 0
for i from 1 to n inclusive, change ans to ans + m - e[i]
print ans
integers = n
read n
a[n] = long long integers
cnt = 0,mx = 0 = long long integers
for i = 0 to less than n do the following
read a[i]
set mx to max(a[i], mx)
for i = 0 to less than n add mx - a[i] to cnt
output cnt
declare long ints n and ans where ans = 0
read n
create integers vector v
for i = 0 to n exclusive
create integer x
read x
push x to v
sort v
for i from 0 to n - 1 exclusive, increase ans by v[n - 1] - v[i]
print ans
declare int variable n and int array x with size 105
read n
for i from 0 to n exclusive, read x[i]
sort x
Max and sum are integers with Max = x[n - 1] and sum = 0
for i from 0 to n exclusive, add Max - x[i] to sum
print sum
n, max, c = int with max = 0 and c = 0
read n
a = int array of size n
read n values into a
for i = 0 to n
if max is less than a[i] then set max to a[i]
for i = 0 to n
if a[i] is less than max then set c to c + max - a[i]
print c
create int n, maxi, sum and x, set maxi to -1 and sum =0
read n
for i=0 to n exclusive
read x
set maxi to max of maxi and x
assign sum + x to sum
print maxi * n - sum
n, i, large and ans are integers where ans = 0 and a is an integer array with 100 elements
read input to n
for i = 0 to n exclusive, read a[i]
change large to a[0]
loop i from 0 to n exclusive
if large is less than a[i], set large to a[i]
for i = 0 to n exclusive, add large - a[i] to ans
print ans
create int n and s
read n and s
print (s + n - 1) / n
n, sum = long long integers
read n, sum
ans = long long integer with ans = 0
for i = n down to 1
ans = ans + sum / i
sum = sum - (sum / i) * i
print ans
x, y, z = integers
read x and y
set z = (y -1)/x
increment z
print z
declare integers n, s
read n, s
print s / n + 1 if s % n, else n / n, newline
let n and s ints
read n and s
let ans an int with value s / n plus (1 if s mod n, 0 otherwise)
print ans
n, s =integers
Read n, s
if s modulo n is 0
print s / n and a new line
else do the following
print (s / n) + 1 and a new line
declare constant integer maxn = 1e5 + 10
declare integers a, b
while read a, b is true, print ( b - 1 ) / a + 1 and newline
n, S = long long integers
read n and S
if S modulo n is equal to 0
print S / n
else
print S / n + 1
n, s =integers
Read n, s
if s modulo m is n
print s / n + 1 and a new line
else do the following
print s / n and a new line
let n, s be integers
read values for n, s
if s mod n is equal to 0 then
print s/n
else do the following
print (s/n) +1
n, s = int
loop while reading n then s
cnt = int with cnt = 0
for i = n to 0 decrementing i
loop while s >= i
decrement s by i
increment cnt
print cnt
create int n and s
read n and s
if s mod n =0
print s/n
else
print s/n +1
n =integer
S = integer
Read n, S
if S modulo s is n
print S / n + 1 and a new line
else do the following
print S / n and a new line
n, s = integers
Read n and s
print s / n + (s modulo n is not 0) and a new line
n, s = integer
read n and s
if s remainder n = 0
print s/n
else
print s/n + 1
make ints n and m
read m and n
if n % m is equal to 0
print n / m
otherwise
output n / m + 1
n=int
S=int
read n,S
if S is multiple of n
print S/n
else
print S/n+1
create int n and s
read n and s
print (n + s - 1) / n
declare long long integers n, sum
read n and sum
declare long long integer ans = sum / n + 1 if sum % n, else sum / n
print ans and '\n'
create integers T, n and m
read m and n from the user input
print n / m + (1 if n modulo m is not 0)
ans = 0 = itn
n, s = int
read n, s
while s is strictly positive
decrement s by n
increment ans
print ans
x, y, z = long long
read x, y
let z = (y - 1) / x
add one to z
print z
declare integer n, s
read n and s
declare integer sum = 0
while 1 is true
increment sum by s / n
let s be s % n
decrement n
if n is 0, end loop
print sum and newline
n, m = integers
read n, m
if (m modulo n is not 0)
print (m / n) + 1
else
print (m / n)
create int n and sum
read n and sum
if sum mod n different from 0
print sum/n + 1
else
print sum/n
s, n, cn =integers with cn = 0
Read n, s
while s is greater than s
set s to s - n
increment cn
print cn + 1 and a new line
declare integers a, b
read a, b
declare integer ans = 0
let ans be b / a
if b % a is not 0, increment ans
print ans and newline
declare integers n, m
read n, m
declare integer ans = 0
if m % n is 0
let ans be m / n
else
increment ans by m / n + 1
print ans and newline
n, s = int
read n then s
ans = int with ans = 0
loop while s
if s is 0 break
if s >= n
decrement s by n then increment ans
else
decrement n
print ans
n, s =integers
Read n, s
count = integer with 0
for i = n to 0 exclusive
a = integer, set to s / i
set count to count + a
set s to s % i
if s is equal to 0, then Terminate the loop
print count and a new line
n, s, temp, c =integers with c = 0
Read n, s
execute infinite loop
if s is equal to 0, then Terminate the loop
set temp to s
set s to s modulo minimum value of sand n
set c to c + temp / minimum value of temp and n
print c and a new line
n, s = long long
read n, s
ans = integer with ans = (s + n - 1) / n
print ans
n, S = long
read n and S
set coins = 0
set coins = coins + S/n
set rem = S remainder n
if rem = 0
print coins
else
print increment coins
declare long long variables n, s and i
read variables n and s from the input
if s modulo n != 0
print s / n + 1
else
print s / n
N = string
Read N
if N[0] is greater than or equal to a and N[0] is less than z, set N[0] to N[0] - 32
print N and a new line
declare ch as character array of size 1000
gets(ch)
if ch[0] >= 'a' and ch[0] <= 'z' set ch[0] to ch[0] - 32
puts(ch)
m = string
call getline on cin and m
if m[0] >= 97 and m[0] <= 122 then m[0] = (int)m[0] - 32
print m
input = string
Read input
if input[0] is greater than or equal to a, set input[0] = input- 32
print input and a new line
create string word
read word
set a to word[0]
if a >99
a=a-32
assign a to word[0]
print word
else
print word and a new line
create character array s with length of 1001
read s
convert first character of s to uppercase alphabet
print out s
declare string variable s
read s
change s[0] to upper case
print s
create string s
read s
set s[0] to upper case
print s
create character array str with 1000 elements
while read str
if 'a' <= str[0] && str[0] <= 'z', str[0] = 32
print str
word = string
Read word
set word[0] to upper case of word[0]
print word solution and a new line
s = string
Read s
set s[0] to upper case of s[0]
print s and a new line
let s = string
set s from input
if islower called with s[0] is true then set s[0] to (char)((int)s[0] - 32)
print s
in the function toUpp that takes character s and returns character
n = integer with n = s
if n >= 97 and n <= 122 n = n - 32
return (char)n
s = string
read s
s[0] = call toUpp on s[0]
print s
declare integer variables n, i, t1 and t2
declare string a
read input into a
if a[0] > 96 && a[0] is less than 123, decrease a[0] by 32
print a
create xay as string
input xay
if call islower with xay[0] is true set xay[0] to xay[0] converted to uppercase
print xay
let a be an array of char of length 1100
execute gets wich takes a as an argument
if a[0] >= 'A' and a[0] <= 'Z' then execute puts with a as an argument
if a[0] >= 'a' and a[0] <= 'z' then
let a[0] = a[0] - 32
execute puts with a as an argument
ch = string
read ch
capitalize first letter of ch
print ch
s = string
read s
capitalize first letter of s
print s
in the function capitalize that takes string reference word and returns void
first = character with first = word.at(0)
if first >= 97 and first <= 122 word.at(0) = word.at(0) - 32
input = string
read input
capitalize on input
print input
create string s
read s
set s[0] to uppercase letter of s[0]
print s
create char array a with length 1000
read from standard input and store in a
if (a[0] is greater or equal to 'a' and a[0] is smaller or equal to 'z') set a[0] to a[0] - ('a' - 'A')
print a
s = string
Read s
set s[0] to upper case of s[0]
print s solution and a new line
s = string
read s
if s[0] is greater than 96 and s[0] is less than 123 then subtract 32 from s[0]
print s
create string s
read s
set s[0] to convert to uppercase s[0]
print s print newline
s = string
Read s
set s[0] to upper case of s[0]
print s and a new line
create string s
read s
if s[0]>= a and s[0]<= z, set s[0] to s[0]-32
print s
n =integer
s =string
Read s
set n to length of string s
if s[0] is greater than 96 and s[0] is less than 123, then set s[0] to s[0] - 32
print s and a new line
create string x
read x
if x[0] is lower case change x[0] to upper case
print x
create string word
read word
set word[0] to upper case word[0]
print word print newline
s = string
Read s
set s[0] to upper case of s[0]
print s and a new line
declare string variable s
read s
convert s[0] to the upper case
print s
declare string variable s
read s
if s[0] is a lowercase letter from a to z, change it to upper case
print s
let str be a string
read str
if (((int)str[0] is less than or equal to (int)'z') and ((int)str[0] is greater than or equal to a)), the 0th element of array str is equal to (char)((int)str[0] - 32)
print str and newline
create string s
read s
set value of s[0] to towupper(s[0])
print s
declare character array a with size 1000000
declare character array b with size 53 with elements "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
read a
for integer i = 0 to 26 exclusive
if a[0] = b[i]
set value of a[0] to b[i + 26]
stop the loop
print a
create string s
read s
set s[0] to uppercase letter of s[0]
print s
create string word
read word
if word[0] >= a and word[0] <= z, set word[0]=word[0] - 32
print word
let S be string
read S
call toupper with s[0] as argument and assign it to element 0 of array S
print S
declare string variable str
read input to str
change str[0] to uppercase
print str
let s be a string
read s
let the value of s[0] is equal to toupper(s[0])
print s and newline
declare string variable a
read line from the input to a
if a[0] >= 'a' and a[0] <= 'z', decrease a[0] by 32
print a
n, m = integers
while read n, m
cnt, ta, tb = integers with cnt = 0
for i = 0 to n exclusive
read ta, tb
if (cnt >= ta), cnt = max of cnt and tb
print (if cnt >= m, YES else NO)
create ints n and m
read n and m
make int vector a of size 101 with values 0
make ints x and y
for i = 0 to n exclusive
read x and y
increment a[x]
subtract 1 from a[y]
make integer cs = 0
for i = 0 to m exclusive
set cs to cs + a[i]
if cs is less than or equal to 0
display "NO"
display "YES"
n, m = integer
read n, m
c = integer = 0
for i = 0 to n exclusive
a, b = integer
read a, b
if c >= a, then c = bigger value between c and b
if c >= m
print YES
else
print NO
declare constant integer MAX = 1e5
declare boolean array x size 150
set bytes from x to size of x to value false
declare integers n, m
declare integers l, r
declare integers i, j
read n and m
for i = 0 to n exclusive
read l and r
for j = l to r exclusive, let x[j] be true
for i = 0 to m exclusive
if not x[i], end loop
if i is less than m
print "NO" and newline
else
print "YES" and newline
create integer array pos of size 110
make integers n and m
read n and m
for i = 0 to n exclusive
make integers a and b
read a and b
for j = a + 1 to b, set pos[j] to 1
for i = 1 to m
if pos[i] is falsy, print "NO\n" and return 0
display "YES\n" and return 0
declare integer array freq size 10000005
declare integers n, m
read n and m
declare integer array mat size n by 2
set bytes from freq to size of freq to value 0
for i = 0 to n exclusive
read mat[i][0], mat[i][1]
for j = ( mat[i][0] ) + 1 to mat[i][1] inclusive, increment freq[j]
for i = 1 to m inclusive
if not freq[i]
print "NO"
print "YES"
let n , m be integers
read n and m
let a, b be integers
let t be a integer with t = 0
while n is decremented by 1
read a, b
if a <= t , t is equal to maximum of t and b
if t >= m
print YES and newline
else do the following
print NO and newline
a is a new array of integers with 105 elements
create ints n, m, x, y, l and r where l = 0
read standard input to n and m
change i from 1 to n inclusive, incrementing i, in a loop
read x and y
if i = 1 and x != 0
print "NO"
if i is equal to 1
set r to y
else if x <= r
assign the new value = max of r and y to r
if r >= m
print "YES"
else
print "NO"
n, m, s = integers
l, r = integers
read n, m
while decrement n
read l, r
if (l <= s), if s = r < s, s else r
if (s < m)
print NO
else
print YES
create int n, m, rightMost, set rightMost to 0
read n and m
for i=0 to n exclusive
create int x and y
read x and y
if x <= rightMost and y > rightMost, rightMost = y
if rightMost >= m
print YES
else
print NO
n, m = integers
read n, m
q = vector of integer with q on 1000 and 0
q[0] = 1
for i = 0 to n exclusive
a, b = integers
read a, b
if (q[a] is 1)
while (a <= b)
q[a] = 1
increment a
f = bool with f = true
for i = 0 to m, f = f bitwise and q[i]
if (f)
print YES
else
print NO
create ints N and M
read N and M
make integer vector A of size N and B of size N
for i = 0 to N exclusive, read A[i] and B[i]
make integer max_ = 0
for i = 0 to N exclusive
if max_ is less than A[i], break loop
set max_ to max of max_ and B[i]
if max_ is equal to M
print "YES"
print new line
otherwise do
display "NO"
print new line
a = integer array of size 105
n, m, x, y, l, r = integers with l = 0
read n, m
for i = 1 to n
read x, y
if (i is 1 and x is not 0)
print NO
if (i is 1)
r = y
else if (x <= r)
r = max r and y
if (r >= m)
print YES
else
print NO
let freq be an integer array of size 10000005
let n, m, x, to be integers
read n , m
for int i = 0 to n
read x, to
for int j = x + 1 to to inclusive,
for int i = 1 to m inclusive
if freq[i] = 0
print out NO
print out YES
n,m=int
read n,m
multiply m by 2
v=array of 220 bool
fill v with false
while decremented value of n is not 0
a,b=int
read a,b
multiply a by 2
multiply b by 2
fill v from index a to b-a+1 with true
ok=true
for i=0 to m inclusive
if not v[i] ok=false
print YES if ok else NO
freq = integer array of size 10000005
n, m, x, to = integers
read n, m
set all contents of freq to 0
for i = 0 to n exclusive
read x, to
for j = x + 1 to to, increment freq[j]
for i = 1 to m
if (not freq[i])
print NO
print YES
getint is an inlined integer function
declare ints r = 0 and k = 1
defin new char c with value from the input
read char from the input into c, while c is not a digit character
if c = '-', change k to - 1
while is a digit character, read new value for the c from the input, then change r to r * 10 + c - '0'
return r * k
new integer n with value from getint()
m is a new integer with value from getint()
define new integer maxx with value 0
in a for loop, change i from 1 to n inclusive
declare integer variable with name x = result of getint()
y is a new integer = value, returned from getint()
if maxx >= x, change maxx to max of maxx and y
if maxx >= m
print "YES" to standard output
else
print "NO" to stdout
let x, y, n, c be long values
read n
x equals n - 1
y equals 1
c equals 1
while x is greater than 0
increase c by 1
if x * x + y * y + 2 * y + 1 < n * n + 1
increase y by 1
else
if x * x - 2 * x + y * y + 2 * y + 2 < n * n + 1
decrease x by 1
increase y by 1
else
decrease x by 1
if n equals 0
print 1 and endline
else
print 4 * c and endline
n,x,y=long long
ny=long long
wasOut=bool
borderPoints=0
nx=0
read n
if n is 0
print 1
else if n<0
subtract n from x
while x<=0
wasOut=true
ny=sqrt(n*n-x*x)+1
for y=-ny to 0 inclusive
if x*x+y*y <= n*n
if wasOut is true
wasOut=false
increment borderPoints
if x is 0 increment nx
else
if x<0
if (x-1)^2+y^2 > n^2
increment borderPoints
if x is 0 increment nx
else
y=n+1
else if x>0
if (x+1)^2+y^2 > n^2
increment borderPoints
if x is 0 increment nx
else
y=n+1
increment x
print 2*(borderPoints*2-nx)-2
n, ans be long long values with ans being 0
read n
double value R equals n
tmp. k be long long values and tmp equals n
for long long i = 1 to n inclusive
double value r equals i
k equals square root of R * R - r * r
increase ans by tmp == k ? 1 : tmp - k
tmp equals k
if n equals 0
print 1 and endline
else
print ans * 4 and endline
declare new long long n
read n from the input
if 0 < n < 40000001
create new long longs x = n, y = 0 and k = 0
while x > 0
increment k by one
increment y by one
decrement x if x * x + y * y is greater than n squared
decrement y if x * x + y * y is greater than n squared
print 4 * k
else if n = 0
print 1 to the standard output
declare long long n
while read n is true
declare long long x = n * square root of double casted 2
if n is 0
print 1, newline
else
print x * 4, newline
Eu_distance is a function that returns a long value by taking in two long values
return x * x + y * y
n is a long integer
read n
if n equals 0
put string 1
else if n equals 1
put string 4
else
x and y are long integers with y = n
res is a long integer 0
for x=0 to n,y+1 exclusive
while Eu_distance(x, y) is greater than n * n, decrease y by 1
if x is greater than y, stop
if x is not equal to y
increase res by 2
else
increase res by 1
decrease res by 2
res equals res * 4 + 4
print res and endline
let n be a long integer
let w be a long integer
let t be a long integer
the integer value of q = 1
read n
if n equals 0
print q and newline
else do the following
the long integer value of r = int(sqrt((n * n) / 2)) * 2
w is equal to n * n
if (r / 2) * (r / 2) + (r / 2 + 1) * (r / 2 + 1) <= w , increment r by 1
print 4 * r and newline
create const ints Maxn = 3010 and INF = 0x3f3f3f3f
let long long int n
read n
if n is equal to 0
print 1
else do
show ((long long)(n * sqrt(2))) * 4
let n be a long integer
read n
the long integer value of j = n - 1
the long integer value of lim = n * n
let t be a long integer
the long integer value of prevj = n
the long integer value of sum = 0
if n equals 0
print 1 and newline
for long integer i = 1 to n + 1 exclusive
t is equal to i * i
while j is greater than 0 and j * j is greater than (lim - t) , decrement j by 1
increment sum by 1
if prevj is not equal to j , increment sum by (prevj - j - 1)
prevj is equal to j
print 4 * sum and newline
let n, max, save be long integers
read n
if n equals 0
print 1 and newline
if n equals 1
print 4 and newline
for max is equal to 0 , 2 * (max * max) is less than n * n , increment max by 1 , save is equal to max
if (save + 1) * (save + 1) + save * save <= n * n
n is equal to (save)*8 + 4
print n and newline
n is equal to (save)*8
print n and newline
n = int
while reading n
x = n*sqrt(2 to double)
if n = 0
print 1
else
print x*4
integer as n
read n
if n is false
output 1
else
output (square root of 2 times n) times 4
create long long n
declare inside taking in long long ints x and y and returning long long
if sqrt(x * x + y * y) is less than or equal to n, return 1
make long long num
read n
set num to n / 2
while (num + 1) * sqrt(2.0) is less than or equal to n, increment num
if n is 1
print 4
else if n is equal to 0
show 1
else if inside(num, num + 1) is truthy
display 8 * num + 4
else if inside(num, num + 1) is falsy
show 8 * num
EPS=1e-9
qx=array of long long filled with 0, -1, -1
qy=array of long long filled with 1, 1, 0
movx=array of long long filled with 1, 0, -1, 0
movy=array of long long filled with 0, -1, 0, 1
function dist (get long long y and x, return long long)
return y*y+x*x
n=long long
read n
if n is 0
print 1
tot=0
lasti=0
for i=0 to n exclusive
valini=2*i*i
if valini-n*n > 0 break
lasti=i
posx=long long, posy=lasti
posx=lasti
contador=0
for i=0 to 4 exclusive
if dist(lasti+movx[i], lasti+movy[i])-n*n > 0 contador=1
xx,yy=long long
resta=contador
while posx is not 0 or posy is not n
works=false
for j=0 to 3 exclusive
xx=posx+qx[j]
yy=posy+qx[j]
if n*n-dist(yy,xx) >= 0
increment contador
posy=yy
posx=xx
works=true
break
multiply contador by 2
substract resta from contador
multiply contador by 4
subtract 4 from contador
print contador
declare integer array a size 3
while read a[0], a[1], a[2]
sort from a to a + 3
if a[0] + a[1] is greater than a[2]
print '0' and '\n'
else
print a[2] + 1 - a[1] - a[0] and '\n'
let a, b, c, res be integers with res = 0
read a, b, c
if a >= b + c
res is equal to a - (b + c) + 1
else if b >= a + c
res is equal to b - (a + c) + 1
else if c >= a + b
res is equal to c - (b + a) + 1
print res and newline
let compare be a function that accepts integers a , b and returns a boolean value
return a is less than b
arr = array of integers of length 3
while read arr[0] , arr[1] , arr[2]
sort the values arr, arr + 3
if arr[0] + arr[1] is greater than arr[2]
print 0 and newline
else do the following
print (arr[2] + 1 - arr[1] - arr[0]) and newline
a = array of integers of length 3
read a[0] , a[1] , a[2]
sort the values a, a + 3
print (maximum of a[2] - a[1] - a[0] + 1 and 0) and newline
create new array of integers a with size 3
read a[0], a[1] and a[2] from the input
sort first 3 elements of a
print max of 0 and a[2] - a[1] + 1 - a[0] and "\n"
declare integer array a size 3
read a[0], a[1], a[2]
sort from a to a + 3
print maximum of ( 0 and a[2] + 1 - (a[0]+a[1]) ), newline
a, b, c, d, e, f, g are long long integers
s and t are strings
while reading a, b, c
set d = 0
while 1
if a+b > c and b+c > a and a + c > b
break
else
add 1 to d
if a<=b and a<=c
add 1 to a
else if b<=a and b<=c
add 1 to b
else
add 1 to c
print d
lines is a new vector of integers with size 3
read user input to lines[0], lines[1] and lines[2]
sort vector lines
define integer variable counter = 0
while lines[0] + lines[1] <= lines[2]
increment lines[0]
increment counter
print counter
declare checkValidity with integers a, b, c as arguments, returning boolean
if a + b is less than or equal to c or a + c is less than or equal to b or b + c is less than or equal to a
return false from function
else
return true from function
declare long longs a, b, c
read a, b, c
declare integer counter = 100000
for i = a to 100 inclusive
for j = b to 100 inclusive
for k = c to 100 inclusive
if result of run checkValidity(i, j, k) is true
declare integer temp = absolute value of ( i - a ) + ( j - b ) + ( k - c )
let counter be minimum of ( counter and temp )
print counter, newline
create int a, b , c
create int max,ans
read a and b and c
max = a
if (max < b) max = b
if (max < c) max = c
if ans( 2 * max - (a + b + c)) < 0)
print 0
esle
print ans +1
create int int a[3], i
for i=0 to 3 exclusive, read a[i]
sort elements between a and a+3
if a[0] + a[1] > a[2]
print 0
else
print a[2] + 1 - a[0] - a[1]
a,b,c=int
read a,b,c
flag=0
while a+b<(c+1)
increment flag
increment a
while a+c<(b+1)
increment flag
increment a
while b+c<(a+1)
increment flag
increment b
print flag
declare contant double pi = arc cosine of -1
create array of integers a of size 3 and integer k = 0
read a[0], a[1] and a[2]
sort array a
if a[1] + a[0] is greater than a[2] and a[2] - a[0] is less than a[1] then
print k
if a[1] + a[0] is less than or equal to a[2]
set k to a[2] - a[1] - a[0] + 1
print k
let MAXP be a constant integer with MAXP = 55
a = array of integers of length 3
read a[0] , a[1] , a[2]
sort the values a, a + 3
print maximum of 0 and a[2] - a[0] - a[1] + 1 and newline
create ints a, b, and c
read a, b, and c
create integer min_cnt = 1e9
for i = a to 100
for j = b to 100
for k = c to 100
create double s = (i + j + k) / 2.0
create double under_root = s * (s - i) * (s - j) * (s - k)
if under_root is greater than 0.0, set min_cnt to min(min_cnt, ((i - a) + (j - b) + (k - c)))
display min_cnt
maxn = 1e5 + 5
ans = 0
create int a[4]
whle read a[1], a[2], a[3]
sort elements between a + 1 and a + 4
ans=0
while a[1] + a[2] <= a[3]
increment ans
add 1 to a[1]
print ans
create int a[3]
read a[0], a[1], a[2]
sort elements between a and a+3
if a[0] + a[1] > a[2]
print 0
else
print a[2] + 1 - a[0] - a[1]
a, b, c, s, m, d = int
read a, b, c
s = a + b + c
m = max of max(a, b) and c
d = 2 * m - s + 1
if (d <= 0), d = 0
print d
a, b, c, d and l are ints where l = 0
read from the input to a, b and c
if a + b > c and b + c > a and a + c > b
change d to 0
print d
else
if a <= b or a <= c
looping infinitely
increment a
increment l
if a + b > c and b + c > a and a + c > b
print l
stop the loop
else
if b <= a or b <= c
looping infinitely
increment b
increment l by one
if a + b > c and b + c > a and a + c > b
print l
break the loop
a = array of integers of length 3
read a[0] , a[1] , a[2]
sort the values a, a + 3, greater<int>()
if a[0] + a[1] is greater than a[2] and a[1] + a[2] is greater than a[0] and a[2] + a[1] is greater than a[0]
print 0 and newline
else if a[0] + a[1] is greater than a[2] and a[0] + a[2] is greater than a[1] and a[2] + a[1] <= a[0]
the integer value of num1 is equal to a[0] / 2
num1 is equal to a[0] - num1
num1 is equal to num1 - a[2]
the integer value of num2 is equal to a[0] / 2
num2 is equal to a[0] - num2
num2 is equal to num2 - a[1]
if a[0] modulo 2
print num1 + num2 and newline
else do the following
print num1 + num2 + 1 and newline
create int a[3]
read a[0], a[1], a[2]
sort elements between a and a+3
increment a[2]
if a[0] + a[1] >= a[2]
print 0
else
print a[2] - (a[0] + a[1])
create int A[3]
for i=0 to 3 exclusive, read A[i]
sort elements between A and A+3
print max(0, A[2] - A[1] - A[0] + 1) and a newline
create integer n
read n
while decrement n is true
create integer a
read a
if a is 1
print "HARD\n"
print "EASY\n"
let n, i, a, s = integers with s = 0
set n to input
for int i = 0 and i must be less than n
set a to input
add a to s
if s is not equal to 0
print out HARD and new line
else
print out EASY and new line
let a, n, sum be integers with a = array of integers of length 100
read n
for i=0 to n exclusive
read ith element of array a
the value of sum is equal to sum + ith element of array a
if (sum is equal to 0)
print EASY and newline
else , do the following
print HARD and newline
declare integer variable n
read n
declare integer array arr with size n
create boolean ans = true
for integer i = 0 to n exclusive
read arr[i]
if arr[i] = 1, change ans to false
if ans is true
print "EASY"
else
print "HARD"
create integer array a with size 100, create integers x, sum with sum = 0
read x
for z = 0 to x exclusive
read a[z]
set sum to sum + a[z]
if sum is 0
print "EASY" print newline
else
print "HARD" print newline
define function solve
declare integer variable n
read n
decrement n and loop further, while n > 0
declare integer a
read a
if a = 1
print "HARD" and '\n'
return
print "EASY" and '\n'
invoke function solve
n =integer
Read n
while n is not equal to 0
r =integer
Read r
if r is equal to 1
print HARD
print a new line
print EASY
print a new line
set n,x,z = 0
read n
for i=0 to n exclusive increment i
read x
if x>0 increment z++
if z>0
print HARD and new line
else
print EASY and new line
create integer n
read n
create integer pointer arr with arr = new integer array with size n
create integer sum with sum = 0
for i = 0 to n exclusive
read arr[i]
increment sum by arr[i]
if sum is 0
print "EASY" print newline
else
print "HARD" print newline
n = int
read n
loop n times
a = int
read a
if a is 1
print "HARD"
call exit with 0
print "EASY"
declare inline wa with no arguments, returning void
print "HARD" print newline
declare inline ac with no arguments, returning void
print "EASY" print newline
create integer n
read n
for i = 1 to n inclusive
create integer tmp
read tmp
if tmp is true
run wa
run ac
let n be a integer
the boolean value of cek is equal to 0
read n
for i= 1 to n inclusive
let a be a integer
read a
if (a is equal to 1) , then cek is equal to 1
if (cek is equal to 0)
print EASY and newline
else do the following
print HARD and newline
n = integer
read n
for i = 0 to n exclusive
e = integer
read e
if e is 1
print HARD
print EASY
declare integer variables a, b and c
create integer cnt = 0
read a
for integer i = 1 to a inclusive
read b
increment cnt if b = 1
if cnt >= 1
print "HARD"
else
print "EASY"
n = int
read n
flag = bool with flag = false
for i = 0 to n
a = int
read a
if a is not 0 set flag to true
if flag is true
print "HARD"
else
print "EASY"
n = int
read n
s = int array of size n
for i = i to n read s[i]
count1 = int with count1 = 0
for i = 0 to n
increment count1 if s[i] is 1
if count1 is not 0
print "HARD"
else
print "EASY"
i, j, n = int and a = int array of size 101
read n
read n values into a
sort a
if a[n - 1] equals 1
print "HARD"
else
print "EASY"
n, i = int
read n
a = int array of size n
for i = 0 to n
read a[i]
if a[i] is 1
print "HARD"
print "EASY"
a = array of 10000 integers
n, i, k = integers
k = 0
read n
for i = 0 to n exclusive, read a[i]
for i = 0 to n exclusive
if a[i] > 0, increment k
if k > 0
print HARD
else
print EASY
create int n and a
read n
for i=0 to n exclusive
read a
if a equal to 1
print HARD
print EASY
Not is a char function with char argument x
return '1' if x = '0' or '0' otherwise
create string s
read variable s from the input
for integer i = 0 to length of s exclusive
if s[i] = 'r', print i + 1 and '\n'
loop through i from length of s - 1 to 0, decrementing it
if s[i] = 'l', print i + 1 and '\n' to the standard output
ss = string
read ss
idx = integer with idx = (cast to int)ss.size() - 1
ans = vector of integer with ans = ((cast to int)ss.size())
for i = 0 to (cast to int)ss.size() exclusive
if ss[i] is r, continue next iteration
ans[idx] = i
decrement idx
idx = 0
for i = 0 to (cast to int)ss.size() exclusive
if ss[i] is l, continue next iteration
ans[idx] = i
increment idx
for i = 0 to ans.size() exclusive, print ans[i] + 1
s = string
read s
n = size of s = int
let mas be a vector of int of size n
let l = 0 = int
r = n = int
for i = 0 to n exclusive
if s at i is 'l'
decrement r, increment i and set mas[r] = i
else
increment i, set mas[l] to i, increment l
for i = 0 to n exclusive, increment i, print mas at i and new line
s = string
r, l = int vector
read s
n = int with n = size of s
for i = 0 to n
if s[i] is 'r'
append i + 1 to r
else
append i + 1 to l
sort r
sort l
reverse l
print all values of r
print all values of l
create string s
read s
for i = 1 to size of s
if s[i - 1] is equal to 'r', print i
for i = s.size() to 1
if s[i - 1] is equal to '1', print i
declare constant long long maxn = 2 * 1e6 + 2
arr is a new array of long longs with size maxn
create string variable s
read s from the input
declare new long long variables f = maxn / 2, l = maxn / 2 - 1 and r = maxn / 2 + 1
assign 1 to arr[f]
for integer i = 1 to length of s exclusive incrementing i
if s[i] is equal to 'l'
change the value of arr[l] to i + 1
decrement l
else
set arr[r] to i + 1
increment r by one
if s[0] is equal to 'l'
start for loop from i = f + 1 to maxn exclusive
if arr[i] != 0, print arr[i] and "\n"
start for loop from i = l to f inclusive
if arr[i] != 0, print arr[i] and "\n"
else
in a for loop, change i from f to maxn exclusive
if arr[i] != 0, print arr[i] and "\n" to the output
in a for loop, change i from l to f exclusive incrementing i
if arr[i] != 0, print arr[i] and "\n"
MAX = const integer with MAX = 1e6 + 7
wynik = integer array of size MAX
s = string
read s
n = integer with n = s.size()
lewa = integer with lewa = 0
prawa = integer with prawa = n - 1
for i = 0 to n exclusive
if s[i] is l
wynik[decrement prawa] = i
else
wynik[increment lewa] = i
for i = 0 to n exclusive, print wynik[i] + 1
st = string
let l, r be vectors of ints
read st
let n = size of st be an int
for i = 0 to n exclusive
if s[i] is 'l'
push back i+1 in l
else
push back i+1 in r
reverse l
for r size times (print r[i] and new line)
for size of l time (print l[i] and new line)
create ints i = 0, j = 0, k , and n
create string s
let integer vector v
read s
set n to s.size()
set k to n - 1
resize v to size n with value 0
if i is less than n, set ((s[i++] == 'r') ? v[j++] : v[k--]) to i
for i = 0 to n exclusive, print v[i]
let ints i = 0 and n
create string s
make integer list l1 and l2
make integer list iterator j
let integer list reverse_iterator k
read s
set n to size of s
while i is less than n, append i to l1 if s[i++] == 'r' is true or append i to l2 if not
for j = l1.begin() until j = l1.end(), print (*j)
for k = l2.rbegin() until k = l2.rend(), print (*k)
let string s
read s
for i = 0 to s.size() exclusive
if s[i] is equal to 'r', print i + 1
for i = s.size() - 1 to 0
if s[i] is equal to '1', print i + 1
function pwr (get long long base,p,mod=1000000007, return long long)
ans=1
while p
if p and 1 ans=(ans*base) modulo mod
base=(base*base) modulo mod
divide p by 2
return ans
function gcd (get long long a,b, return long long)
if b is 0 return a
return gcd(b, a modulo b)
function nCr (get long long n,r, return long long)
C=array of r+1 long long
fill C with 0
c[0]=1
for i=1 to n inclusive
for j=min(i,r) down to 0 exclusive add C[j-1] to C[j]
return C[r]
function isPrime (get long long n, return bool)
if n<=1 return false
if n is 2 return true
if n is even return false
m=sqrt(n)
for i=3 to m inclusive by 2
if n is even return false
return true
function M (get long long a, return long long)
return a modulo 1000000007
function isPowerOfTwo (get long long x, return bool)
return x and (not (x and (x-1)))
str=string
read str
n=length of str
start=0, end=n-1
v=vector of n int
for i=1 to n inclusive
if str[i-1] is 'r'
v[start]=i
increment start
else
v[end]=i
decrement end
for i=0 to n exclusive print v[i]
create new string variable st
declare vector of integers l and r
read user input to st
create new integer called n = length of st
for i from 0 to n exclusive incrementing i
if st[i] = 'l'
push i + 1 to l
else
add i + 1 into r
reverse vector l
print all elements of r one by one with '\n' after each one
print all elements of l one by one with '\n' after each one
let mod be a long integer with mod is equal to 1e9 + 7
let x be a string
read x
for i = 0 to length of x exclusive
if x[i] is equal to r , print i + 1 and newline
for integer i is equal to length of x - 1 , i >= 0, decrement i by 1
if x[i] is equal to l , print i + 1 and newline
a = integer array of size 1000005
s = string
read s
l = length of s
beg = integer = 1, end = integer = 1
for i = 0 to l exclusive, then if s[i] is l a[decrease end by 1 at the end of the loop] = i + 1 else a[increase beg by 2 st the end of the loop] = i + 1
for i = 0 to l exclusive, then print a[i + 1]
mod = const integer with mod = 1000000007
second = string
read second
i = integer
l, r = vector of integer
for i = 0 to second.length() exclusive
if (second[i] is l)
append i + 1 in l
else
append i + 1 in r
for i = 0 to r.size() exclusive, print r[i]
for i = l.size() - 1 down to 00, print l[i]
declare constant integer N = 1010
declare constant integer MOD = integer casted 1e6+3
declare long long integer n, long long integer arrays dp size N, twoPow size 2 * N
declare init with no arguments, returning void
let twoPow[0] be 1
for i = 1 to 2 * N inclusive, let twoPow[i] be (twoPow[i - 1] * 2) % MOD
set bytes from dp to size of dp to value -1
declare cookie with long long integer a as argument, returning long long integer
return (twoPow[a - 1] * (twoPow[a] + 1)) % MOD from function
declare solve with long long integer a as argument, returning long long integer
if a is less than or equal to 0, return 0
if dp[a] is not -1, return dp[a]
let dp[a] be result of run cookie(a) % MOD
for i = 1 to a - 1 is greater than 0, let dp[a] be (dp[a] + result of run solve(a - i) * twoPow[i - 1]) % MOD
return dp[a] from function
run init
read n
print (twoPow[2 * n] - result of run solve(n) + MOD) % MOD, newline
M=1005
a=array of M int
n=int
read n
a[0]=1
a[1]=1
for i=2 to n inclusive a[i]=(3*a[i-1]) modulo 1000003
print a[n]
mod = const integer with mod = 1000003
a, n = long long with a = 1
read n
for i = 2 to n, a = (a * 3) modulo mod
print a
pi=acos(-1)
MODPRIMA=1000000007
MAXX=10^18
MINN=-10^18
EPS=1e-9
N=int
MOD=1000003
ans=long long
read N
ans=1
if N is 0
print 1
else
for i=1 to N-1 inclusive
multiply ans by 3
ans = ans modulo MOD
print ans
define the new constant integer N with value 1e5 + 5
M is a new constant integer with value 1e6 + 3
ara is a new array of integers with size N
rec is a integer function with int argument n
return 1 if n is less than 2
return (3 * rec(n - 1)) % M
declare new integer variable n
read input to n
print the result of rec(n) and "\n" to the standard output
define integer variable n
read input to n
define integer variable cnt = 1
change i in a loop, starting from 1 to n exclusive, adding 1 on each loop and changing cnt to = (cnt * 3) % 1000003
print cnt to the standard output
declare integer mod = 1e6 + 3
declare integer n
read n
if n is 0
print "1\n"
else
declare integer ans = 1
for i = 1 to n exclusive, let ans be ( ans * 3 ) % mod
print ans and "\n"
n = int
read n
ans = 1 = long long
for i = 2 to n inclusive then set ans = (ans * 3) modulo 1000003
if n = 1
print 1
else
print ans
create new array of integers dp with size 1005
define function precalc
change the values of dp[0] and dp[1] to 1
for i = 2 to 1001 exclusive, change dp[i] to (dp[i - 1] + (dp[i - 1] * 2) % 1000003) % 1000003
call function precalc()
n is a new integer variable
read user input to n
print dp[n] to the standard output
N = 1e5 + 5
M = 1e6 + 3
create int ara[N]
create int n
read n
ara[0] = 1
set ara[1] = 1
for i=2 to n inclusive, set ara[i] = (3 * ara[i - 1]) mod M
print ara[n] and a newline
n, r =integers
set r to 1
Read n
if n is equal to 1000
print 691074 and a new line
for i = 0 to n - 1 exclusive
set r to r * 3
set r to r modulo 1000003
print r and a new line
create int n
read n
a=1
for i=1 to n exclusive, set a = (a * 3) % 1000003
print a
let fstexp be a function that accepts long long x, int n, int mod and returns a long integer value
the long integer value of res = 1
while n is greater than 0
if n & 1 , res is equal to (res * x) modulo mod
n = n >> 1
x is equal to (x * x) modulo mod
return the value of res
let n be a integer
read n
the long integer value of ans = fstexp(3, n - 1, 1000003)
print ans and newline
let n, m, a be long integers
let mod be a long integer with mod = (1000000) + 3
let poww be a function that accepts long long x, long long y and returns a long integer value
if y is equal to 0 , return 1
if y is equal to 1 ,return x
if y modulo 2 , return the value of ((poww(x, y / 2) modulo mod) * (poww(x, y / 2) modulo mod) * (x modulo mod)) modulo mod
return the value of ((poww(x, y / 2) modulo mod) * (poww(x, y / 2) modulo mod)) modulo mod
read n
if not n
print 1 and newline
else do the following
print poww(3, n - 1) and newline
let fastMax be a function that accepts integers x , y and returns a integer
return the value of (((y - x) >> (32 - 1)) & (x ^ y)) ^ y
let fastMin be a function that accepts integers x , y and returns a integer
return the value of (((y - x) >> (32 - 1)) & (x ^ y)) ^ x
let MOD be a constant long integer with MOD = 1e6 + 3
let MAXN be a constant long integer with MAXN = 1001
first = array of long integers of length MAXN
let n be a long integer
let solve be a void function
first[0] is equal to first[1] is equal to 1
for long integer i = 2 to MAXN exclusive , first[i] is equal to (3 * first[i - 1]) modulo MOD
read n
print first[n] and newline
let t be a long integer
t is equal to 1
while t is decremented by 1 , call the solve function
let pi be a constant double value with pi = acos(-1)
let MODPRIMA be a constant long integer with MODPRIMA = (long long)1e9 + 7
let MAXX be a constant long integer with MAXX = (long long)1e18
let MINN be a constant long integer with MINN = -(long long)1e18
let EPS be a constant double value with EPS = 1e-9
let N be a integer
let MOD be a constant long integer with MOD = 1e6 + 3
let ans be a long integer
read N
ans is equal to 1
if N is equal to 0
print 1 and newline
else do the following
for integer i = 1 to N - 1 inclusive
ans is equal to ans * 3
ans is equal to ans modulo MOD
print ans and newline
declare new integers n, i and m with m = 1
read input to n
change i in a loop from 0 to n - 1 exclusive, incrementing by 1
multiply m by 3
set m to m % 1000003
print m
pi = acos of 1)
set num[1005] to
1
1
3
}
for i=3 to 1005 exclusive, set num[i] = (3 * num[i - 1]) % 1000003
create int n
while read n, print num[n]
let n, ans be integers with ans = 1
read n
for i = 2 to n inclusive
ans is equal to ans * 3
ans is equal to ans % 1000003
print ans and newline
let n be an integer
read in n
let res be an integer, set res to 1
for i = 0 to n - 1
set res to res * 3
set res to res % 1000003
print res
INF = const integer with INF = 0x3f3f3f3f
i, j, k = long long with k = 1
n, m = long long with m = 1
read n
if (not n or n is 1)
print 1
for i = 2 to n, m = m * 3, m = m modulo 1000003
print m
integer as x,n,a[3],b[3],c[3]
read n
integer as sum = 0
set x to 0
for i = 0 to less than n do the following
for j = 0 to less than 3 do the following
read a[j]
sum equals sum plus a[j]
if sum is greater than or equal to 2 then add one to x
set sum to 0
output x
n = 0
validProblems = 0
create int p, v, set t to 0
read n
for i=0 to n exclusive
read p, v and t
result = p + v + t
if result > 1, increment validProblems
print validProblems
make integer n
read n
create integer count = 0
while n-- is not equal to 0
create ints x, y, and z
read x, y, and z
if x + y + x is greater than 1, increment count
show count
define integer n
read variable n from the input
declare new integer variable t = n
create new integer variable g with value 0
while t != 0, decrement it and continue the loop
declare new array of integers a with size 3
read 3 elements from the input to a in a loop
declare integer variable k = 0
for integer i = 0 to 3 exclusive incrementing i
if a[i] is equal to 1, increment k
if k >= 2, change g to g + 1
print g
declare integer n
read n
declare integers a, b, c
declare integer count = 0
for i = 0 to n exclusive
read a, b, c
if a + b + c is greater than or equal to 2, increment count
print count, newline
create bool array snack of size 100009
make int array arr of size 100000
create int array matrix of size 100000 with array of size 3
make integer count = 0
make bool flag = false
make ints n and x
create char array s of size 1000
read n
for i = 0 to n exclusive
make integer ones = 0
for i = 0 to 3 exclusive
read x
if x is equal to 1, add 1 to ones
if ones is greater than 1, increment count
show count
declare integers n, p, v, t and count with count = 0
read from the input to n
loop, decrementing n, while it is not 0
read from the input to p, v and t
if p = 1 and v = 1 or p = 1 and t = 1 or v = 1 and t = 1, increment count by one
print count to the standard output
declare integer variables n, i, j, d and e where e = 0, and an array a with 3 elements
read n from the input
for i = 0 to n exclusive
set the value of d to 0
increment j in a loop from 0 to 3 exclusive
read user input to a[j]
if a[j] is equal to 1, increment d
if d >= 2, increment e by one
print e
declare constant integer N = 2010
declare constant long long MAX = 1e8 + 5
declare integers n, a, ans, flag
declare character array s size N
read n
let ans be 0
while decrement n is true
let flag be 0
for i = 0 to 3 exclusive
read a
if a is true, increment flag
if flag is greater than or equal to 2, increment ans
print ans, newline
integer as t,k = 0
read t
for i = 1 to less than or equal to t do the following
integer as a,b,c
read a,b,c
if the sum of a,b and c is greater than 1 then add one to k
output k
integer as n
read n
integer as x,y,z
integer as sum = 0
for i = 0 to less than n do the following
read x,y,z
if is greater than or equal to 2 then add one to sum
output sum
make ints n, i, j, d, and e = 0 and int array a of size 3
read n
for i = 0 to n exclusive
set d to 0
for j = 0 to 3 exclusive
read a[j]
if a[j] is 1, increment d
if d is greater than or equal to 2, increment e
print e
n = int
read n
ans = 0 = int
while decrementing n
a, b, c = int
read a, b, c
is a+b+c >= 2 ? then increment ans
print ans
declare integers n, temp
read n
declare integer count = 0
for i = 1 to n inclusive
declare integer votes = 0
for j = 1 to 3 inclusive
read temp
increment votes by temp
if votes is greater than or equal to 2, increment count
print count, newline
n, i, a, b, c, d be integers with d equals 0
read n
for i = 1 to n inclusive
read a,b,c
if a + b + c equals 2 or 3, increase d by 1
print d and endline
n and sum are integers with sum = 0
define new bools a, b and c
read standard input to n
start for loop from i = 0 to n exclusive incrementing i
read from the input to a, b and c
if (a and b) or (b and c) or (c and a), increment sum
print sum
let n be a integer
read n
the integer value of ctr = 0
while n is decremented by 1
let x, y, z be integers
read x, y, z
if x * y equals 1 or x * z equals 1 or y * z equals 1 , increment ctr by 1
print ctr and newline
declare new int variables n, m and count1
read variable n from the input
for integer i = 0 to n exclusive
declare integer variable with name count with value 0
for i from 0 to 3 exclusive incrementing i
read user input to m
if m is equal to 1, increment count
if count >= 2, increment count1 by one
print count1
integer as n,temp
read n
integer as count = 0
for i = 1 to less than or equal to n do the following
integer as votes = 0
for j = 1 to less than or equal to 3 do the following
read temp
votes equals votes plus temp
if votes is greater than or equal to 2 then do the following add one to count
output count
declare int variables n, Petya, Vasya, Tonya and number
read n
decrement n and loop further, while n != 0
read Petya, Vasya and Tonya from the user input
if Petya + Vasya + Tonya >= 2, add 1 to number
print number
declare integer n
read n
declare integers i, j, k, cnt1, cnt = 0
for i = 0 to n exclusive
let cnt1 be 0
for j = 0 to 3 exclusive
read k
if k is 1, increment cnt1
if cnt1 is greater than 1, increment cnt
print cnt, newline
in function find taking an int x and an int array father
return x if father[x] is x
set father[x] to find of father[x] and father then return father[x]
n = int
read n
s = string
read s
yes = int with yes = 0
for i = 0 to length of s - 1
if s[i] is not s[i + 1]
set yes to 1
print "YES"
print s[i] and s[i + 1]
print "NO"
s = array of 1005 integers
n=integer
Read n
Read s
bj = integer with 1
for i = 0 to n-1 exclusive
if s[i + 1] is not s[i]
print YES and a new line
print s[i], s[i + 1]and a new line
set bj to 0
Terminate the loop
if bj is not 0, then print NO and a new line
create int n
read n
create string x
read x
for i=1 to size of x exclusive
if x[i] different from x[i - 1]
print YES
print x[i - 1] and x[i]
print NO and a newline
create int n
read input to n
declare string g
read g
for i from 0 to n - 1 exclusive
if g[i] != g[i + 1]
print "YES"
print substring of g from position i with length 2
print "NO"
set maxn = 2e5 + 5
create long long array a of length maxn
create long long b[maxn]
let str be string
create int n
read n
read str
set flag to true
for i=1 to length of str
if str[i-1] different from str[i]
print YES
flag = false
print str[i-1] and str[i]
break the loop
if flaf different from 0, print NO
create int n
read n
create string s
read s
for i=0 to n-1 exclusive
if s[i] different from s[i + 1]
print YES
print substring of s of length 2 starting from i
print NO and a newline
inf function max taking two ints a and b and returning an int
return a if it is greater than b else return b
n = int
s = string
loop while reading n
read s
if n equals 1
print "NO"
continue loop
for i = 1 to size of s
if s[i] does not equal s[i - 1]
print "YES"
print s[i - 1] then s[i]
call exit with 0
print "NO"
n = int
str = string
read n then str
for i = 1 to n - 1 inclusive
if str[i] is not s[i - 1]
print "YES"
print str[i - 1] then str[i]
print "NO"
n = int
str = string
read n then str
for i = 1 to n
if str[i] is not str[i - 1]
print "YES"
print str[i - 1] then str[i]
print "NO"
str = string
n = integer
read n
read str
flag = integer with flag = 0
temp = integer
for i = 0 to str.length() - 1 exclusive
if str[i] is not str[i + 1]
flag = 1
temp = i
break loop
if flag is 0
print NO
else
print YES
print str[temp] and str[temp + 1]
create int n
create string s
read n and s
for i=0 to length of s -1 exclusive
if ss[i] different from s[i + 1]
print YES, a newline, s[i], s[i+1] and a newline
print NO and a newline
create int n
create string s
read n and s
for i=0 to n exclusive
if s[i] different from s[i - 1]
print YES and a newline, s[i - 1], s[i]
print NO
create integers t, cp, ck, with cp = 1, ck = 0
read t
create string s
read s
if t is 1, set cp to 0
for i = 0 to t - 1 exclusive
if s[i] is not s[i+1]
set ck to 1
print "YES" print newline
print s[i] print s[i+1] print newline
break loop
else
set cp to 0
if cp is 0 and ck is 0, print "NO" print newline
in function max that returns an integer and takes arguments a, b = integers
return the greater of a and b
n = integer
s = string
while read n
read s
if n equals 1
print NO
continue
for i = 1 to the size of s exclusive
if s[i] does not equal s[i-1]
print YES
print s[i-1] s[i]
exit program with success
print NO
create integers N, x, i, with x = 0
read N
create string s
read s
for i = 0 to N - 1 exclusive
if s[i] is not s[i+1]
print "YES" print newline
print s[i] print s[i+1] print newline
increment x
break loop
if x is 0, print "NO" print newline
declare solve with no arguments, returning void
create long long n
read n
create string s
read s
if n is 1
print "NO" print '\n'
else
for i = 1 to n exclusive
if s[i] is not s[i-1]
print "YES" print '\n'
print s[i-1] print s[i] print '\n'
return from function
print "NO" print '\n'
create long long TESTS with TESTS = 1
while decrement TESTS, run solve
let MAX, mod be constant integers with MAX = 2e6, mod = 998244353
let n, m be integers
read n, m
if not n and not m
print NO and newline
else if absolute of (n - m) <= 1
print YES and newline
else do the following
print NO and newline
a, b =integers
Read a, b
if a OR b and absolute value of (a - b) is less than or equal to 1
print YES and a new line
else do the following
print NO and a new line
n, m =integers
Read n
Read m
if n is 0 and m is 0
print NO and a new line
else if absolute value of n - m is less than or equal to 1
print YES and a new line
else do the following
print NO and a new line
let a, b be integers
read a, b
print YES and newline if absolute value of (b - a) <= 1 and (b is not equal to 0 or a is not equal to 0) else print NO and newline
declare constant integer MAX with value 100001
declare integer arrays An and Bn with size MAX
declare new int variables a and b
read variables a and b from the input
if abs(a - b) <= 1
if a and b are both 0
print "NO"
else
print "YES" to the output
else
print "NO"
create ints n and m
read n from the input
read user input to m
if n and m are 0
print "NO"
else if abs(n - m) <= 1
print "YES"
else
print "NO"
N is a new constant integer = 2e5 + 12
new constant integer INF with value 1e9
declare constant integer called MOD = 998244353
create new array of integers mas with N elements
ind is a new set of unique integers
declare new integer variables a and b
read variables a and b from the input
if abs(a - b) > 1 or a and b are both false
print "NO" to the standard output
else
print "YES"
n. m = int
read n, m
a = n - m = int
if a is non zero negative the decrement a by a
if a <= 1 and a isn' 0 or m isn't 0
print YES
else
print NO
let a, b be integers
read a, b
if absolute value of (a - b) <= 1 and (a | b)
print YES and newline
else do the following
print NO and newline
let a,b be integers
read a,b
if a is equal to b and b is equal to 0
print NO
otherwise
if abs is equal to 0 or abs is equal to 1
print YES
otherwise
print NO
create int a and b
read a and b
if abs(a - b) <= 1 and a or b different from 0
print YES
else
print NO
create int a and b
read a and b
if a and b=0
print NO
else if and of (a-b) <2
print YES
else
print NO
create int a and b
read a and b
if abs of b-a <= 1 and b or a different from 0
print YES
else
print NO
function esPosible (get int a and b, return bool)
if a is 0 and b is 0 return false
if a-b>1 return false
if b-a>1 return false
return true
a,b=int
read a,b
if esPosible(a,b)
print YES
else
print NO
nEven, nOdd = integers
read nEven, nOdd
if (nOdd is 0 and nEven is 0)
print NO
if (nOdd - nEven >= -1 and nOdd - nEven <= 1)
print YES
else
print NO
declare new int variables a, b and x
read user input to a and b
if a or b = 0
print "NO"
else
assign the absolute value of a - b to x
if x is 1 or 0
print "YES" to the standard output
else
print "NO"
let a, b be integers
read a, b
print YES and newline if absolute value of (a - b) <= 1 and a + b is greater than 0 else print NO and newline
declare new int variables a and b
read from the input to a and b
if (a = b or abs(a - b) = 1) and (a and b are not 0)
print "YES"
else
print "NO" to the standard output
a, b =integers
Read a, b
if absolute value of a - b is less than or equal to 1 and a is greater than 0 OR b is greater than 0
print YES and a new line
else do the following
print NO and a new line
ev, od = int
loop while reading ev then od
if fabs of (ev - od) <= 1 and (ev is not 0 or od is not 0)
print "YES"
else
print "NO"
a, b = int
read a then b
if not a and not b
print "NO"
else if absolute of a - b <= 1
print "YES"
else
print "NO"
n, m =integers
while reading values n, m
if n is 0 and m is 0
print NO and a new line
else if absolute value of n - m is less than or equal to 1
print YES and a new line
else do the following
print NO and a new line
a, b = int
read a and b
if a = b and abs of a-b = 1 then
if a or b are both not 0
print YES
else
print NO
else
print NO
declare new integer variables a and b
read a and b from the user input
print "YES" if absolute value of (a - b) <= 1 and a + b != 0 or "NO" otherwise
create new integers a and b
read variables a and b from the input
if absolute value of a - b = 1
print "YES" to the standard output
else if a = b and (a and b !=0)
print "YES"
else
print "NO" to the output stream
a,b=short int
read a,b
if a+b>0 and abs(a-b)<=1
print YES
else
print NO
n = long long
read n
v = long long vector of size n
read the first n elements of v
ans = long long vector
for long long i = 0 to n exclusive
x = long long = v at i
smallasn = 0 = lon glong
j = 0 = long long
for j = = to n exclusive
if v[i+j] = x
increment smallans
else
exit loop
increment i by j-1
push back smallans into ans
final = 0 = long long
for long long i = 0 to size of ans, increment final by (ans[i] * (ans[i] + 1)) / 2
print final
make const long long int INF = (1ll << 62) - 1
create const int M = 1e5 + 5
create long long int array ar of size 100005
make long long ints cnt = 1, tot, and res
make integer n
read n
for i = 0 to n exclusive, read ar[i]
for i = 1 to n exclusive
if ar[i] is equal to ar[i - 1]
increment cnt
else do
set tot to (cnt * (cnt + 1)) / 2
set res to res + tot
set cnt to 1
add (cnt * (cnt + 1)) / 2 to res
show res
n=int
read n
a=array of n int
for i=0 to n exclusive read a[i]
v=vector of long long
cnt=1
for i=1 to n exclusive
if a[i] is a[i-1]
increment cnt
else
add cnt at end of v
cnt=1
add cnt at end of v
ans=0
for i=0 to size of v exclusive add v[i]*(v[i]+1)/2 to ans
print ans
s=stack of int
ans,cnt=0
n,x=int
read n
for i=0 to n exclusive
read x
cnt=0
while s it not empty and first item of s is not x
increment cnt
pop first item of s
if s is empty or first item of s is x push x into s
add (cnt-1)*cnt/2 to ans
cnt=0
while s is not empty
increment cnt
pop first item of s
add (cnt-1)*cnt/2 to ans
add n to ans
print ans
create long long ints n, sum = 0, and cnt = 1 and int array a of size 100005
read n
for i = 1 to n
read a[i]
if a[1] is equal to 0, set a[0] to 1
if a[i] is equal to a[i - 1]
set sum to sum + cnt
increment cnt
else do
set cnt to 1
set n to n + sum
print n
make long long int n
read n
create long long vector v of size n
for i = 0 to n exclusive, read v[i]
create long long j = i
make long long int ans = n
for i = 0 to n exclusive
set j to i + 1
while j is less than n and v[j] is equal to v[i]
make long long lon = j - i
set ans to ans + long * (long - 1) / 2
set i to j
show ans
abs = long long function taking long long, long long
in void function solve
n = long long
read n
a[n], ans = 0 be long long
read the first n elements of a
t =1 =long long
for long long i = 0 to n exclusive
if i = n-1
increment ans
else
if a[i] = a[i+1]
if i = n - 2
increment t
increment ans by t*(t+1)/2
exit loop
increment t
else
increment ans by
t * (t + 1)/ 2
print ans
TESTS = 1 = long long
while decrementing TESTS, call solve
in long long function abs taking long long a and long long b
if a > b
return a-b
else
return b-a
n,m,i,j,ans,c=long long int, a=array of 100005 long long int
read n
ans=n
a[n]=1000000005
for i=0 to n exclusive read a[i]
c=1
for i=0 to n exclusive
if a[i] is a[i+1]
increment c
else
add c*(c-1)/2 to ans
c=1
print ans
define empty function boost
n = int
read n
arr = long long int array of size n
read n values into arr
ans = long long int with ans = 0
till = long long int with till = 0
for i = 0 to n
if (i + 1 < n) and (arr[i] is arr[i + 1])
increment till
else
increment till
increment ans by ((till * (till + 1ll)) / 2ll)
set till to 0
print ans
new long long variable n
read n
create new vector of long longs v with size n filled with 0
declare vector of long longs sum with n elements filled with 0
in a for loop, change i from 0 to n exclusive
read standard input to v[i]
if i > 0 and v[i - 1] = v[i], change sum[i] to the sum of sum[i] and sum[i - 1]
increment sum[i] by one
create long long variable with name ans = 0
start for loop from i = 0 to n exclusive incrementing i
increment ans
if i > 0 and v[i] = v[i - 1], change ans to ans + sum[i - 1]
print ans
declare constant integer INF with value 0x3f3f3f3f
define an arrays of long longs a and b with 100000 + 5 elements
declare long long variables i, j, k and l with l = 0
declare new long longs n and m
read user input to n
read input to n new elements of a in a loop
change k to 0
declare new integer variable cou = 0
in a for loop, change i from 1 to n exclusive incrementing i
if a[i] = a[k]
increment cou by one
else
if cou is true, change the value of b[l] to cou + 1 and increment l
assign the new value = 0 to cou
change k to i
if i is equal to n - 1
if cou is true, set b[l] to cou + 1 and increment l
declare new long long variable s = n
start for loop from i = 0 to l exclusive, changing s to the sum of s and b[i] * (b[i] - 1) / 2 on each loop
print s
Fast_Read_Out is a void function
void function Random
seed is a new unsigned integer variable
asm("rdtsc" : "=A"(seed))
initialize random number generator with the value of seed
unsigned integer function Time
create new unsigned integer variable time = clock() /1000.00
return time
create constant integer inf with value 1e9 + 123
assign value 1e5 + 123 to the new constant integer N
s is a set of integers
let d be a map from integers to integers
a is a new array of integers with N elements
Calc is a long long function with int argument x
return (x squared - x) / 2
call Random()
call Fast_Read_Out()
declare integer n
read from the input to n
read n elements into a starting from the index 1
declare new long long variables ans and res = 0
for i from 2 to n inclusive
if a[i] = a[i - 1]
increment res
change ans to the sum of ans and res
else
change the value of res to 0
print ans + n to the standard output
n = integer
s = string
read n and s
ans = string with value of ""
i = integer
flag = integer with value of 1
for i = 0 to n-1 exclusive
if not flag break
if s[i+1] is greater than or equal to s[i]
increase ans by s[i]
else
set flag to 0
if not flag
for i to n exclusive increase ans by s[i]
print ans
let n be a integer
let s be a string
let t, flag be integers with flag value as 0
read n , s
for ( i = 0 to s.length() ) , increase i value by 1
if ( ith element in array s is greater than [i+1]th element of array s)
flag value is equal to 1
t is equal to i
stop
if (flag is equal to 0)
for (integer i = 0 to s.length() - 1) , print ith element in array s
print endline
else do the following
for (integer i = 0 to s.length())
if (i is equal to t) , proceed to next
print ith element of array s
print newline
integer function find with integer arguments x and father
if father[x] = x return x
return father[x] = find(father[x], father)
declare integer called n
read n
declare string called s
read s
let pos be integer = 0
for integer i = 1 to n exclusive
if s[i] is less than s[i - 1]
set value of pos to i - 1
break the loop
else
set value of pos to i
erase 1 character at pos from s
print s and "\n"
create integer n
create string s
read n read s
create integer pos with pos = n - 1
for i = 0 to n - 1 exclusive
if s[i] is greater than s[i+1]
set pos to i
break loop
print substring of s from 0 to pos + substring of s from pos + 1 print newline
declare inline MAX2 with long long a, long long integer b as arguments, returning long long
return a if a is greater than b, else b, from function
declare inline MAX3 with long longs a, b, c as arguments, returning long long
return (a) is greater than (b) ternary ((a) is greater than (c) ternary (a) : (c)) : ((b) is greater than (c) ternary (b) : (c)) from function
declare inline MIN2 with long longs a, b as arguments, returning long long
return a if a is greater than b, else b, from function
declare inline MIN3 with long longs a, b, c as arguments, returning long long
(a) is less than (b) ternary ((a) is less than (c) ternary (a) : (c)) : ((b) is less than (c) ternary (b) : (c))
create integer n
read n
create string s
read s
create integers temp, result, with result = n - 1
for i = 1 to n exclusive
set temp to integer casted s[i] - integer casted s[i-1]
if temp is less than 0
set result to i - 1
break loop
for i = 0 to n exclusive
if i is not result, print s[i]
print newline
create long long n
read n
create string s
read s
create long long check = n - 1
for long long i = 0 to n - 1 exclusive
if s[i] is greater than s[i + 1]
assign value of i to check
stop the loop
for i = 0 to n exclusive
if check != i, print s[i]
print new line
set stdout output decimal precision to 10
set stdout floatfield format flag to fixed
declare long long variable n
read n
create string s
read s
declare long long variable pos = n - 1
for i = 1 to n exclusive
if s[i] is less than s[i - 1], set pos to min of pos and i - 1
remove 1 character at position pos from s
print s
create integer t
read t
create string s
read s
for i = 0 to t exclusive
if s[i] is greater than s[i+1]
set s[i] to 1
break loop
for i = 0 to t exclusive
if s[i] is greater than or equal to 'a' and s[i] is less than or equal to 'z', print s[i]
print newline
s = string
f = bool set f = 1
n = integer
read n , s
for i = 0 to (n-1) exclusive
if s[i] > s[i + 1] and f > 0
f = 0
else
print s[i]
if f = 0 print s[n - 1]
print newline
declare integer variable n
declare string variable ss
read n and ss
declare integer variable in = -1
for i = 0 to n - 1 exclusive
if ss[i] is greater than ss[i + 1]
assign value of i to in
stop the loop
decrement n if in = -1
for i = 0 to n exclusive
if i != in print ss[i]
print new line
n = integer
let s be a string
read n and s
set pos to n - 1
for i = 0 to n - 1 exclusive incrementing by 1 at the start of each iteration
if s[i] is greater than s[i+1]
assign i to pos
break
print s.substr(0, pos) + s.substr(pos + 1)
declare integer n
declare string str
read n and str
for integer i = 0 to n exclusive
if str[i] is greater than str[i + 1]
remove 1 character from position i from str
break the loop
print str
declare integer variable n
create string en
read n
read en
declare integer variables i and j
for i = 0 to n - 1 exclusive
if en[i] is greater than en[i + 1]
print i elements of en
for j = i + 1 to n exclusive print en[j]
break the loop
if i = n - 1
print i elements of en
print new line
declare integer n
read n
create string s
read s
create boolean p = 0
for integer i = 0 to n - 1 exclusive
if s[i] is greater than s[i + 1]
p = 1
break the loop
if p is 0
for integer i = 0 to n - 1 exclusive
print new line
for i = 0 to n - 1 exclusive
if s[i] is greater than s[i + 1]
for integer j = i + 1 to n exclusive print s[j]
print new line
print s[i]
declare string s
declare integer n
read s
for i = 0 to size of s exclusive
if s[i] is '1'
for j = i to size of s exclusive
if s[j] is '0', increment n
if n is greater than or equal to 6
print "yes", newline
else
print "no", newline
print "no", newline
s = string array
read s
integer as c = 0,k = 0
ans = no = string array
reverse the sequence of string s
if s.length is less than 7 then do the following
output ans
else
for i = 0 to less than s.length() do the following
if s[i] is 0 then do the following
add one to c
if c is 6 then do the following
set k to i
break
if k is not equal to 0 then do the following
for j = k + 1 to less than s.length() do the following
if s[j] is 1 then do the following
set ans to yes
break
else
continue
output ans
declare string s
read s
declare string ans = "no"
if size of s is less than 7
print ans and newline
else
declare integer k = 0
reverse sort from beginning of s to end of s
declare integer count = 0, i = 0
while count is less than 6 and i is less than size of s
if s[i] is '0'
increment count
let k be i
increment i
if k is not 0 and count is 6
for i = k + 1 to size of s exclusive
if s[i] is '1'
let ans be "yes'
end loop
else
end current loop
else
let ans be "no"
print ans and newline
make char array a of size 101
read a
make ints x = 0 and y = 0
for i = 0 while a[i] is not '\0'
make integer flag = 0
if a[i] is equal to '1'
for j = i + 1 while a[j] is not '\0'
if a[j] is equal to '0', increment x
if x is equal to 6, break loop
set flag to 1
if flag is equal to 1, break loop
is x is greater than or equal to 6
print "yes"
else
output "no"
declare string s
while read s is true
while s[0] is '0', remove from 0 to 1 from s
while bitwise not first index of "1" in s is true, remove from first index of "1" in s to 1 in s
if size of s is greater than or equal to 6
print "yes" and newline
else
print "no" and newline
create new string s
read standard input to s
define integer n
in a for loop, change i from 0 to n exclusive incrementing i
declare new integer called c = 0
if s[i] - '0' is true
for integer j = i + 1 to n exclusive incrementing j
if s[j] - '0' = 0, increment c by one
if c >= 6
print "yes"
print "no" to the standard output
create character variable
integer as n,b = 0
set a to getchar()
if a is not equal to \n then do the following
set (a = 1) and (b to 1)
if b and a is 0 then do the following n++
set a to getchar()
if n is greater than or equal to 6 then return write yes to stdout
write no to stdout
s=string
read s
first_one=-1
for i=0 to length of s exclusive
if s[i] is '1'
first_one=i
break
if first_one is -1
print "no"
total=0
for i=first_one+1 to length of s exclusive
if s[i] is '0' increment total
if total >= 6
print "yes"
else
print "no"
create string s
read from the input to s
define new integers len = length of s, ipos and cnt = 0
start for loop from ipos = 0 to len exclusive
if s[ipos] is equal to '1', stop the loop
if ipos = len, return puts("no"), 0
increment ipos and start a loop, while ipos < len, incrementing ipos by 1 on each iteration
increment cnt if s[ipos] = '0'
print "yes" if nt >= 6 or "no" otherwise
a, n = integers
p = character
while reading p
if a is equal to 0
if p is equal to 1, then set a to 1
else do the following
if p is equal to 0, then increment n
if n is greater than or equal to 6
print yes and a new line
else do the following
print no and a new line
p = string
read p
y = 0 = int
while p[y] is '0' increment y
rsp = 0 = int
for i = y + 1 to size of p exclusive increment i after, increment rsp by (p[i] == '0')
if rsp >= 6
print yes
else
print no
make string s
read s
for i = 0 to s.length() exclusive
if s[i] is equal to '1'
make integer sum = 0
for j = i + 1 to s.length() exclusive
if s[j] is equal to '0', increment sum
if sum is greater than or equal to 6
print "yes"
break loop
show "no"
integer as array dx = 0,0,-1,1
integer as array dy = 1,-1,0,0
s = string array
read s
integer as i0 = -1,i1 = -1,cnt = 0
for i = s.size() - 1 to greater than or equal to 0 do the following
if s[i] is 0 then add one to cnt
if cnt is 6 then do
set i0 to i
break
for i = 0 to less than s.size do the following
if s[i] is 1 then do the following
set i1 to i
break
if i1 is -1 or i0 then do the following
output no
if i1 is greater than or equal to i0 then do the following
output no
output yes
n, k =integers
Read n and k
print maximum value of 0 and 3 * n - k and a new line
TOLL be a constant double 1e-9
memo is an integer array
recur is an integer function
if n, k both equal 0, return 0
if n equal 0, return 1000
if k equal 0, return 1000
if memo[n][k] not equal -1, return memo[n][k]
rv is integer 1000
for integer i = 2 to 5 inclusive
if i is less than or equal to k
integer now equals recur(n - 1, k - i)
if i equals 2, increase now by 1
rv = min(now, rv)
return memo[n][k] equals rv
memset(memo, -1, sizeof memo)
n, k be integers
while read n, k, print recur(n, k) and newline
dpis long long array of 52 rows, 252 columns
f is a function of long long integer
if slot equals 0
if n equals 0
else
return 1e10
if dp[slot][n] not equals -1, return dp[slot][n]
ans is a long long value equal to 1e10
for integer i = 2 to 5 inclusive
if i is 2
ans equals minimum of ans, 1 + f(slot - 1, n - i)
else
ans equals minimum of ans, f(slot - 1, n - i)
return dp[slot][n] equals ans
n, k are long long values
read n, k
memory set of dp, -1, sizeof(dp)
print f(n, k) and newline
n, k are integers
read n, k
if n * 3 is greater than or equal to k
print 0 and endline
else
print 0 and endline
n,k=int
read n,k
if 3*n-k > 0
print 3*n-k
else
print 0
n,k=int
read n,k
ex=vector of n int filled with 5
idx=n-1
while true
sum=0
for i=0 to n exclusive add ex[i] to sum
if sum is k break
if idx is -1 idx=n-1
decrement ex[idx]
decrement idx
res=0
for i=0 to n exclusive
if ex[i] is 2 increment res
print res
declare new ints n and k
read input to n and k
if k / n = 2
print n - k % n
else
print 0
n, a, coun = int
read n, a
if 3*n <= a
set coun to 0
else
set coun to 3 * n - a
print coun
let n, k, ans be integers
while read n , k
if k / n equals 2
ans is equal to k modulo n
print n - ans and newline
else do the following
print 0 and newline
n,k=int
read n,k
c=k/n
if c>=3
print 0
else
print n-k modulo n
create integers a and b
read a and b from the input
create new integer called x with value 3*a
if x <= b
print "0"
else
print x - b
n, k = int
read n the k
ans = int with ans = -1
set ans to n
set ans to ans * 3
decrement ans by k
if ans >= 0
print ans
else
print 0
T = 1 = int
in void function solve
n, k = int
read n, k
is 0 > n - (k - (2 * n)) then print 0, else print n - (k - (2 * n))
while decrementing T, calls solve
create const int N = 1e5 + 100
make ints n, k, and ans and int array a of size 55
create integer vector v
make bool flag
declare check returning bool
make integer sum = 0
for i = 0 to n exclusive, add a[i] to sum
if sum is equal to k, return true
return false
read n and k
for i = 0 to n exclusive, set a[i] to 2
if check() returns true
show n
for i = 2 to 5
for j = 0 to n exclusive
increment a[j]
if check() is truthy
set flag to true
break loop
if flag is truthy, break loop
if flag is true
for i = 0 to n exclusive
if a[i] is equal to 2, add 1 to ans
display ans
a,b=int
read a,b
x=3*a
if x<=b
print "0"
else
print x-b
n, k = int
while reading n, k
if k >= 3n
print 0
else if k <= 2n
print n
else
print n - k + k / n * n
a, b are integers
read a, b
if b is greater than or equal to 3 * a
print 0 and newline
else
print 3 * a - b and endline
create int n and k
read n and k
if k >= 3 * n
print 0
else if k <= 2 * n
print n
else
print n - k + k / n * n
k, n = int
read n then k
print max of 0, n - (k / 2 - n) * 2 - k mod 2
n, m, ans =integers with ans = 0
Read n and m
set ans to m - 2 * n
set ans to n - ans
if ans is less than 0
print 0 and a new line
else do the following
print ans and a new line
maxn is a new constant integer variable = 1e5 + 7
counter is a integer function with int argument x
create integer variable with name myAss = 0
while x
change x to x >> 1
increment myAss
return myAss
declare integer variable n
in a while loop, read n and print the result of counter(n)
n=int,cnt=0
read n
while n
increment ct
divide n by 2
print ct
ans = integer with ans = 0
n = integer
read n
while ((left shift ans 1 place) - 1 < n), increment ans
print ans
n, ans =integers with ans = 0
Read n
while n is greater than 0
set n to n / 2
increment ans
print ans and a new line
n = int
read n
print round upward log2(n+1)
n, c = integer
read n
while n > 0
n = n / 2
increase c by 1
print c
let n be a integer
read n
for i = 1 to 50 exclusive
shift n value to the right by 1
if n is equal to 0
print i and newline
create int a
read a
let ans = 1 be an integer
loop while a is not 1
increment ans
set a to a shifted by one bit to the right
print ans
let v be a vector of long integers
let n be a long integer
read n
let sum be a long integer with sum = 1
push_back 1 into vector v
while sum is less than n
let cur be a long integer with v[ length of v - 1] << 1
push_back cur into v
increment sum by cur
print length of v and newline
create long long n, num[1000000];
read n
for i=0 to num[i - 1] <= 1e10, set num[i] = num[i - 1] + num[i - 1] + 1
for i=1 to num[i] <= 1e10
if num[i - 1] < n and num[i] >= n
print i
create long long ints n, i, and x
read n and while n is truthy
set i to 0
set x to n
while x is not 0
if x modulo 2 is 0
set x to x / 2
otherwise
set x to (x - 1) / 2
add 1 to i
show i
n, t, x =integers with t = 0 and x = 1
Read n
while x is less than or equal to n
set x to x * 2
increment t
print t and a new line
n, k and has are long longs where k = 1
read from the input to n
while k - 1 < n
set k to k multiplied by 2
increment has by one
print has to the standard output
declare new long long variable n
read n from the user input
print log2(n) casted to integer + 1
n = long long
read n
print (cast to int)log2(n) + 1
n =integer
Read n
cont = integer with 0
while n is greater than 0
set n to n / 2
increment cont
print cont and a new line
declare new constant integer called INF = 0x3f3f3f3f
create new constant double variable eps = 1e-7
new long long constant mod with value 1e9 + 7
function CountNum with long long argument n that returns long long
declare new integer variable ans with value 0
while n
increment ans by one
change the value of n to n divided by 2
return ans
n is a new long long variable
read n from the input
print the result of CountNum(n)
n = integer
while n can be read as a valid integer
num = integer = 0
while n is nonzero
increase num by 1
n = n shifted 1 bit to the right
print num
p =integer with 0
n, x = integers with x = 1
Read n
while x is less than or equal to n
set x to x * 2
increment p
if x - 1 is greater than or equal to n
print p and a new line
in the function gcd that takes integer a, b and returns integer
if (b is 0), return a
return gcd(b, a modulo b)
a = integer
read a
ans = integer with ans = 1
while a modulo 1
increment ans
a = right shift a 1 place
print ans
create new long longs n and num
read from the input to n
declare long long sum with value 1
declare integer count = 0
while sum - 1 < n
change the value of sum to sum multiplied by 2
increment count by one
print count
create long long int array a of size 100010, b of size 100010, and c of size 100010
make long long ints n, m, k, t, r, s, aux, and rta
read n and while n is truthy
set all contents of a to 0
create integer rta = 0
while n is truthy, set n to n / 2 and increment rta
show rta
declare integer variable with name n
read input to n
print logarithm of n to the base 2 rounded down + 1 and '\n'
create string s
read lien from cin to s
create character x
create integer len with len = size of s - 1
create integer flag with flag = 1
while flag is true
create character temp with temp = s[len]
if temp is greater than or equal to 'A' and temp is less than or equal to 'Z'
set x to temp
set flag to 0
else if temp is greater than or equal to 'a' and temp is less then or equal to 'z'
set x to temp
set flag to 0
decrement len
set x to lower case of x
if x is 'a' or x is 'e' or x is 'i' or x is 'o' or x is 'u' or x is 'y'
print "YES" print newline
else
print "NO" print newline
let s be string
read line from input into s
x = character
let len be integer = length of s - 1
create integer flag with value 1
while flag is 1
create character temp with value s[len]
if temp is a capital letter character
x = temp
set value of flag to 0
else if temp >= 'a' && temp <= 'z'
set x to temp
flag = 0
decrease len by one
set value of x to lower case of x
if x = 'a' or x = 'e' or x = 'i' or x = 'o' or x = 'u' or x = 'y'
print "YES" and a new line
else
print "NO" and a new line
array of characters vol filled with 'y', 'Y', 'o', 'O', 'i', 'I', 'a', 'A', 'e', 'E', 'u' and 'U'
let s be string
read input into s
for i = length of s - 1 to -1 exclusive decrementing i
if s[i] != '?' and s[i] != ' '
for integer j = 0 to 12 exclusive
if s[i] = vol[j] return cout << "YES" << '\n', 0
return cout << "NO" << '\n', 0
create character array s with size 500
read s
create character c
create integer len with len = string length of s
for i = 0 to len exclusive
create character cc with cc = lower case s[i]
if cc is greater than or equal to 'a' and cc is less than or equal to 'z', set c to cc
if c is 'a' or c is 'e' or c is 'i' or c is 'o' or c is 'u' or c is 'y'
print "YES" print newline
else
print "NO" print newline
s = array of characters of size 500
get input into s
c = character
set integer len to length of s
for integer i = 0 to len exclusive
create character cc = character at s[i] converted to lower case
if cc >= 'a' and cc <= 'z'
if c is a vowel character
print "YES" and a new line
else
print "NO" and a new line
create string vow with value "aeiouy"
let x be string
read line and store it into x
set boolean ok to false
for integer i = 0 to length of x exclusive
if isalpha(x[i]) is true
if lowercase x[i] can be found in vow
set value of ok to true
else
set ok to false
print "YES" if ok is true or "NO" otherwise, and a new line
create string vow with vow = "aeiouy"
create string x
read line from cin to x
create boolean ok with ok = false
for i = 0 to length of x exclusive
if x[i] is alphanumeric
if first index of lower case x[i] in vow is not -1
set ok to true
else
set ok to false
print "YES" if ok is true, else "NO", print newline
char array vocals with elements 'a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U' and 'Y'
function contains with char argument vocal and boolean return type
for integer i = 0 to 12 exclusive
return true if vocals[i] = vocal
return false
question = string
read input into question
for i = length of question - 2 to 0 inclusive counting down
if question[i] != ' '
if contains(question[i])
print "YES" and a new line
else
print "NO" and a new line
boolean function a with UNTYPED arguments char and c
set value of c to lower case c
if c is a vowel character return 1
declare string variable s
read input into s
for integer i = length of s - 2 to 0 inclusive, decrementing i
if s[i] != ' '
if a(s[i]) is true
print "YES" and a new line
else
print "NO" and a new line
declare a with character c as argument, returning boolean
set c to lower case c
if c is 'a' or c is 'e' or c is 'i' or c is 'o' or c is 'u' or c is 'y', return 1 from function
create string s
read line from cin to s
for i = size of s - 2 to 0 inclusive, decrementing i
if s[i] is not ' '
if result of run a with s[i] as argument is true
print "YES" print newline
else
print "NO" print newline
let MOD be a constant long integer with MOD = 1e9 + 7
let INF be a constant long integer with INF = 1e9 + 7
let isVowel be a function that accepts character a and returns a boolean value
if a is equal to a , return true
if a is equal to i , return true
if a is equal to u , return true
if a is equal to e , return true
if a is equal to o , return true
if a is equal to y , return true
return false
let s be a string
getline(cin, s)
let ans be a character
for i = 0 to length of s exclusive
s[i] is equal to tolower(s[i])
if isalpha(s[i])) , ans is equal to s[i]
if isVowel(ans)
print YES and newline
else do the following
print NO and newline
declare string variable s
inline bool function yy with char argument x
return 1 if x is one of 'a', 'e', 'i', 'o', 'u' or 'y'
new register int i
read data from the input and put it into s
change i from the length of s - 1, while isalpha(s[i]) returns false, decrementing i
set s[i] to the lower case
if yy(s[i]) is true
print "YES"
else
print "NO" to stdout
M = const integer with M = 105
s = string
read line s
c = character with c = s[0]
for i = 0 to s.length() exclusive
if ((s[i] >= a and s[i] <= z) or (s[i] >= A and s[i] <= Z)), c = s[i]
le = character array of size 12 with le = {'a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'Y'}
ok = bool with ok = false
for i = 0 to 11
if (c is le[i])
ok = true
break loop
if (ok)
print YES
else
print NO
create int n, a, b
read n, a, b
print min of n -a and b+1
let n, a, b be integers
read n, a, b
print minimum of b + 1, n - a and newline
n, a, b =integers
Read n, a, b
print n - maximum value of (a + 1) and (n - b) + 1 and a new line
create new ints a, b and n
loop, reading n, a and b from the input
if a + b is greater than n
print n - a to the output
else
print b + 1 if n - (a + b), else print b
n, a, b and c are integers where c = 0
read user input to n, a and b
for i from a to n - 1 inclusive
if n - i >= 1 and n - i - 1 <= b, increment c by one
print c
n, a, b, ans =integers
Read n, a, b, ans
print n - maximum value of (a + 1) and (n - b) + 1 and a new line
make ints n, a, and b
read n, a, and b
make integer count = 0
for i = 1 to n
if a is less than or equal to (i - 1) and (n - i) is less than or equal to b, increment count
print count
create int n, i, j, x, y, z
read n, x and y
set z to x+y
if n-x=1 and n differenf from z
print 1
else if n>z
print y+1
else if z>n and n-x>1
print n-x
else if n equal to z
print y
let n, a, b be integers
read n, a, b
let i , c be integers with i = a + 1, c = 0
while b >= 0 and i <= n
increment c by 1
increment i by 1
decrement b by 1
print c and newline
n, a, b =integers
Read n, a, b
set x to n - b
set y to a + 1
set sum to n - maximum value of x and y + 1
print sum and a new line
declare new int variables n, a and b
read variables n, a and b from the input
print min of n - a and b + 1
declare integers n, a, b, X = 0
read n and a and b
for i = 1 to n inclusive
if i - 1 is greater than or equal to a and n - i is less than or equal to b, increment X
print X and newline
n,a,b=int
read n,a,b
print min(n-a, b+1)
n, a, b = integer
count = integer = 0
read n, a, b
if a + b + 1 < n, then ans a = n - b -1
count = n - a
print count
create int n, a and b
read n, a and b
if a + b >= n
print n-a
else
print b+1
n, a, b = integers
Read n, a, b
print minimum value of n - a and b + 1 and a new line
declare integers n, a, b, i = 0, c = 0
read n, a, b
let i be n - a
let c be b + 11
if i is less than or equal to c
print i and newline
else
print c and newline
declare new int variables a, b and n
read n, a and b and loop, then print b + 1 if n - a > b, or n -a otherwise, then loop again
n, a, b =integers
Read n, a, b
print minimum value of b + 1 and n - a and a new line
n, a, b =integers
Read n, a, b
print minimum value of n - a and b + 1 and a new line
n,l,r,i=int
read n,l,r
print n-max(l,n-r-1)
declare new int variables n, a and b
read from the input to n, a and b
declare integer variable called x = min of n - a and b + 1
print x
create integers n, a and b
read n, a and b
print min of n - a and b + 1 to the standard output
declare integers a, b, c
read a, b, c
if a - b is greater than c + 1
print c + 1 and newline
else
print a - b and newline
declare res as integer
declare n, a, b as integer
read n and a and b
let res be maximum of ( a + 1 and n - b )
print n - res + 1 and newline
declare integers n, a, b
read n and a and b
declare long long c = 0
for i = 1 to n inclusive
if ( i is greater than a ) and ( n - i ) is less than or equal to b, increment c
print c and "\n"
n,a,b=int, d and c=0
read n,a,b
d=n-a
c=b+1
if d<=c
print d
else
print c
n,a,b=int
read n,a,b
k=n-a
print min(k, b+1)
n,a,b=int
while read n,a,b
cnt=0
subtract a from n
if n<=b+1
print n
break
else
print b+1
let a, b, c long long ints
read a, b, and c
let k, g long long ints with k = 0, g = b + 1
while g at most a
if a - g at most c, increment k
increment g
print k
maxx = constant integer = 1e3 + 10
a = integer array of size maxx
n = integer
while n is read with a valid integer
for i = 0 to n exclusive, read a[i]
sort a in ascending order
sum = long long = 0
for i = 1 to n exclusive, then sum = sum + (a[i] - a[i - 1] - 1)
print sum
create ints n, x, max = 0, and min = INT_MAX
read n
for i = 0 to n exclusive
read x
if x is greater than or equal to max, set max to x
if min is greater than x, set min to x
print max - min + 1 - n
n = int
read n
a = int array of size n
read n values into a
sort a
print a[n - 1] - a[0] + 1 - n
n, result =integers and a = array of 1000 integers
Read n
Read n values into array a
sort array elements of a in ascending order
set result to a[n - 1] - a[0] - n + 1
print result and a new line
n, i, j, l, r =integers with l = 1000000000000000 and r = 0
Read n
for i = 0 to n exclusive
Read j
set l to minimum value of l and j
set r to minimum value of r and j
print (r - l + 1) - n and a new line
let inf = 0x3f3f3f3f = const int
N = 1010 = int const
let a be a long long array of length N
m = int
read m
read the first m elements of a
sort the first m elements of a
ans = 0 = long long
for i = 1 to m exclusive then increment ans by a[i]+a[i-1]-1
print ans
let n and res be ints with res = 0
read input to n
declare new array of long longs arr with n elements
read standard input to arr n times
sort arr
for integer i = 1 to n exclusive
if arr[i] != arr[i - 1] + 1, change res to the sum of res and arr[i] - arr[i - 1] - 1
print res and "\n"
create long long int arra[1100]
create long long int i, j, k, l, p, q, r, s, t, u, v, w, n, max_i, set max_i to 0
read n
for i=1 to n inclusive, read arra[i]
sort elements between arra and arra + n + 1
for i=1 to n inclusive
if arra[i] >= max_i, set max_i = arra[i]
if n equal to 1
print 0 and a new line
else
set l to max_i - arra[1] + 1 - n
print l and a newline
n = int
read n
mi, mx = int with mi = 1 bitshift left by 30 and mx = 0
for i = 0 to n
x = int
read x
set mi to min of x, mi
set mx to max of x, mx
print mx - mi + 1 - n
set maxn to 1000010
assign 500000 to MAXM
create int n
while read n
create int a[1005]
for i=0 to n exclusive, read a[i]
sort elements between a and a + n
cnt =0
for i=1 to n exclusive
if a[i] - a[i - 1] > 1, cnt = cnt + (a[i] - a[i - 1]) - 1
print cnt
n =integer
Read n
mx = integer with 0
mn = integer with 0
for i = 0 to n exclusive
t = integer
Read t
set mx to maximum value of mx and t
set mn to minimum value of mx and t
print mx - mn + 1 - n and a new line
a = array of 1010 integers
n=integer
Read n
Read n values into array a
sort array elements of a in ascending order
print a[n - 1] - a[0] - n + 1 and a new line
create n and res = 0
read n
make long long integer arr of size n
for i = 0 to n exclusive, read arr[i]
sort arr using argument arr + n
for i = 1 to exclusive
if arr[i] is not equal to arr[i - 1] + 1, set res to res + arr[i] - arr[i - 1] - 1
print res
maxn = const integer with maxn = 1e6
n, a, res = long long with a = array of size maxn
read n
for i = cast to int(0) to cast to int(n), read a[i]
sort a and a + n
res = a[n - 1] - a[0] - n + 1
print res
create new integer variable n
read n and loop further
a is a new array of integers with size 1005
read n elements into a
sort a
cnt is a new integer variable = 0
for i from 1 to n exclusive
if a[i] - a[i - 1] is greater than 1, change cnt to cnt + (a[i] - a[i - 1]) - 1
print cnt
declare long long variable with name n
read standard input to n
a is a new array of long longs with n elements
read n elements into a
sort a
declare new long long variable ans with value 0
start for loop from i = 0 to n - 1 exclusive
if a[i + 1] - a[i] is greater than 1, assign the new value = ans + ((a[i + 1] - a[i]) - 1) to ans
print ans
create constant integer inf = 0x3f3f3f3f
make const int N = 1010
make long long array a of size N
make int m
read m
for i = 0 to m exclusive, read a[i]
sort a using argument a + m
create long long int ans = 0
for i = 1 to m exclusive, add a[i] - a[i - 1] - 1 to ans
print ans
create long long n
read n
create long long ar[n + 1]
i=0 to n exclusive, read ar[i]
sort elements between ar and ar+n
count =0
set temp to n-2
count = (ar[n - 1] - ar[0] - 1) - temp
print (count) and a newline
make int n
read n
create long long array a of size 100001
for i = 0 to n exclusive, read a[i]
sort a using a + n
print a[n -1] - a[0] + 1 - n
inf = constant integer = 0x3f3f3f3f
N = constant integer = 1010
a = long long array of size N
n = integer
read n
for i = 0 to n exclusive, then read a[i]
sort a in ascending order
ans = long long = 0
for i = 1 to n exclusive, then ans = ans + a[i] - a[i - 1] - 1
print ans
declare long long variables i, j, k, n, t, m, x, z and ans and an array a with size 200007
read n from the input
read n elements into a from the input
sort a
in a loop, change i from 1 to n exclusive, increasing ans by a[i] - a[i - 1] - 1 on each loop
print ans
declare integer n
read n
if n % 2 is 0
print "0\n"
else
print "1\n"
n = int
read n
if even
print 0
if not even
print 1
i,j,m,n,x,y,k=int
read n
print n modulo 2
create integer n
read from the input to n
print 1 if n & 1 = 1, or 0, and '\n'
a = int
read a
if a is even
print 0
else
print 1
declare integer n
read n
print n % 2 and '\n'
declare constant integer maxn = 5001
declare integer n
read n
print n % 2 and newline
n = int
read n
print remainder of n % 2
n = int
read n
print remainder of n / 2
create integer variable a
read standard input to a
if a is odd
print "1"
else
print "0" to the standard output
declare integer n
read n
if n % 2 is 0
print "0" and newline
else
print "1" and newline
n = integer
read n
if n % 2 == 0
print 0
else
print 1
a = int
read a
if a is even
print 0
else
print 1
a = int
read a
print remainder of a / 2
INF = const int with INF = 0x3f3f3f3f
n = int
read n
if n is even
print "0"
else
print "1"
let a = int
read a
if remainder of a / 2 equals 1
print 1
else
print 0
create integer x
read x
print x % 2
create long long int n
read n
if n & 1 is truthy
print 1
else do
show 0
a = int
read a
if a % 2
print 1 and new line
else
print 0 and new line
n=int
read n
print n and 1
let n be a integer
read n
if n modulo 2 equals 0
print 0 and newline
else do the following
print 1 and newline
n is a new integer variable
read variable n from the input
print n & 1
create new integer variable n
read n from the user input
print n % 2
let num be an integer
read in num
if num is even
print 0
or else
print 1
new integer n
read from the input to n
if n & 1 != 0
print "1"
else
print "0"
declare integer n
read n
print n % 2 and newline
let n be a integer
read n
if n modulo 2 is equal to 0
print 1 and newline
else do the following
print 0 and newline
n=int
read n
print n modulo 2
n = int
read n
if even
print 0
else
print 1
declare integer a
read a
print a % 2, "\n"
n = int
read n
if n bitwise and 1
print 1
else
print 0
x = int
read x
print remainder of x / 2
create int in
read in
print in % 2
a = int
read a
print remainder of a / 2
declare long longs a, b, c
read a
read b
read c
print 2 * c * (a + b - 2) - 8 * (c * (c - 1)) and newline
declare integers w, h, k
read w, h, k
print 2 * k * (w + h - 2) - 8 * (k * (k - 1)) and newline
let can be a function that accepts integers i , j , k and returns a boolean value
if i + j is greater than k and j + k is greater than i and i + k is greater than j , return true
return false
let w, h, k be integers
read w, h, k
let ans be a integer with ans = 0
while w is greater than 0 and h is greater than 0 and k is greater than 0
increment ans by 2 * (w + h) - 4
decrement w by 4
decrement h by 4
decrement k by 1
print ans and newline
create ints w, h, and k
read w, h, and k
show the result of 2 * k * (w + h - 2) - 8 * (k * (k - 1))
let n, m, k be long long ints
let ans be a long long int with value 0
read n and m and k
for longlong int i=0 to k
let len be a long long int with value n-(i*2)*2
let win be a long long int with value m-(i*2)*2
set ans to ans+ ((len+wid)*2-4)
print ans and newline
make ints w, h, i, and r = 0
read w, h, and i
while i is greater than or equal to 1
set r to r + (w + h - 2) * 2
set w to (w - 4)
set h to (h - 4)
subtract 1 from i
print r
let x, y, z, and t ints with t = 0
read x, y, and z
for i from 0 to z exclusive
set t to t + 2 * x + 2 * y - 4
subtract 4 from x
subtract 4 from y
print t
i, b, a, t, k, l, ans = long long
read a
read b
read k
for i = 1 to k inclusive
set ans to ans + (a + b) * 2 - 4
decrement a by 4
decrement b by 4
print ans
create ints w, h, and k
read w, h, and k
make int cnt = 0
for i = 1 to k
create int size = (w - 4 * (i - 1)) * (h - 4 * (i - 1))
if size is less than or equal to 0
break loop
else do
set cnt to cnt + (w - 4 * (i - 1)) * 2 + (h - 4 * (i - 1) - 2) * 2
display cnt
create ints w, h, and k
make int ans = 0
read w, h, and k
for i = 1 to k
create int _w = w - (i - 1) * 4
let integer _h = h - (i - 1) * 4
set ans to ans + 2 * (_w + _h) - 4
display ans
w,h,k=int, res and i=0
read w,h,k
while decremented value of k is not 0
add 2*(w-(4*i)+h-(4*i))-4 to res
increment i
print res
create ints w, h, k and counter_yello = 0
read standard input to w, h and k
for i from 0 to k exclusive incrementing i
change counter_yello to counter_yello + 2 * w + 2 * h - 4
change w to w - 4
change h to h - 4
print counter_yello to the standard output
create long long integers a, b, c, r = 0
read a, b and c
for c iterations set r to r + ((((a - (4 * i)) - 1) + ((b - (4 * i)) - 1)) * 2)
print r
let w, h, k, count be integers with count = 0
read w, h, k
while k is decremented by 1
increment count by 2 * (w + h) - 4
decrement w by 4
decrement h by 4
print count and newline
create long long ints w, h, and k
read w, h, and k
make long long int _rs = 0
while k-- is truthy
set _rs to _rs + 2 * (w + h) - 4
set w to w - 4
set h to h - 4
print _rs
declare new integer variables w, h and k = 0
read w, h and k from the input
create new integer called cells = 0
while k != 0, decrement it and continue the loop
set cells to cells + ((2 * (w + h)) - 4)
subtract 4 from w
decrease h by 4
print cells and "\n"
declare new constant integer called maxn = 1e3 + 5
declare new int variables w, h and k
read input to w, h and k
create integer variable total = 0
declare integer variable sum with value 0
change the value of sum to (w + h - 2) * 2
in a for loop, change i from 1 to k inclusive
a is a new integer with value sum - 16 * (i - 1)
assign total + a to total
print total
make ints w, h, and k
read w, h, k and while they're truthy
make integer sum = 0
for i = 0 to k exclusive
add 2 * (w + h) - 4 to sum
substract 4 from w
set h to h - 4
print sum
create integers w, h, k, and value = 0
read w, h, and k
create integers deck = 0 and it = 2
for i = 1 to k
set value to (((h - deck) * 2) + ((w - it) * 2)) + value
set deck to deck + 4
set it to it + 4
show value
let w, h, k, sum be integers with sum = 0
read w, h, k
for q = 0 to k exclusive
increment sum by (2 * w) + (2 * h) - 4
decrement w by 4
decrement h by 4
if w <= 1 or h <= 1 , stop
print sum and new line
let h, w, k be long integers
read h, w, k
let g be a long integer with g = 0
while k is greater than 0
increment g by h * 2 + (w - 2) * 2
decrement k by 1
decrement h by 4
decrement w by 4
if h <= 0 , stop
if w <= 0 , stop
print g and newline
create int n, a, count, set count to 0
read n and a
for i=1 to n inclusive
if a mod i =0 and (a / i) <= n, increment count
print count
let n and z be long long variables
get value of n and x
let c be integer = 0
for i = 1 to n inclusive
if x modulo i is zero and x less than or equal to n * i then increment c
print c
n = long long
x = long long
read n, x
cnt = 0 = int
for i = 1 to n inclusive
if x mod i = 0 and x <= i *n then increment cnt
print cnt
let n, x and r be ints where r = 0
read from the input to n and x
for i = 1 to n inclusive
skip the rest of the loop if x % i is not 0
create integer variable y with value x / i
if y <= n, increment r by one
print r
let n, x and count = 0 be integers
read n and x
if x equal to 1
print 1
for i = 2 to n inclusive
if x modulo i is equal to 0 and x/i less then or equal to n then increment count
if x less than or equal to n print count +1 or print count
let n, m be integers
while read n , m
the integer value of flag = 0
for i = 1 to n inclusive
the integer value of k = m / i
if m modulo i is equal to 0 and k <= n , increment flag by 1
print flag and newline
let a, b, c be integers with c = 0
read a , b
if a is equal to 1 and b is equal to 1
print 1 and newline
if a is equal to 1 and b is equal to 0
print 0 and newline
for i = 1 to a inclusive
if b modulo i is equal to 0 and b / i <= a
print c and newline
let tabeSize, num, i and cnt be long long ints with cnt = 0
read input to tabeSize and num
start for loop from i = 1 to tabeSize inclusive incrementing i
increment cnt if num % i = 0 and num / i <= tabeSize
print cnt
n, x, cnt = 0 be ints
read n, x
for i =1, until i^2 <= x
if x mod i = 0
if i = x / i and i <= n and x / i <= n then increment cnt
if i isn't x/i and i <= n and x/i <= n then increment cnt by 2
print cnt
create long long n, x
read n and x
c=0
if x <= n, increment c
for i=2 to n inclusive
if x % i = 0 and x / i <= n, increment c
print c
let n, i, c, t, d be integers with d = 0
read n , t
c is equal to 0
for i = 1 to n inclusive
if t modulo i is equal to 0
d is equal to t / i
if d >= 1 and d <= n , increment c by 1
print c and newline
declare long long ints a, b, c, d, e, f, g, h, i and j
declare vectors of long long integers s v, x and u
create new strings s and t
read a and b and keep looping
for c from 1 to a inclusive, add element = c to the end of v
assign the new value = 0 to e
change f to a - 1
assign 0 to g
while e <= f
if v[e] * v[f] = b and v[e] != v[f]
add 2 to g
decrement f by one
else if v[e] * v[f] = b and v[e] is equal to v[f]
change g to g + 1
decrement f
else if v[e] * v[f] is less than b
increment e by one
else
decrement f by one
print g
clear vector v
declare new integers n and x
read n and x from the user input
declare new integer called ans with value 0
for i from 1 to n inclusive
increment ans if x modulo i = 0 and x / i <= n
print ans
create ints i, j, k, n, m, ans, mn and count with ans and count = 0
read user input to n and m
change the value of mn to min of n and m
in a for loop, change i from 1 to mn inclusive incrementing i
if m % i = 0 and m / i <= n, increment count
print count to the standard output
create new ints n and k
read standard input to n and k
define integer cnt = 0
for integer i = 1 to n inclusive
increment cnt if k % i = 0 and i * 1LL * n >= k
print cnt
define long long ints n, x and occurances with occurances = 0
read n and x
in a for loop, change i from 1 to n inclusive incrementing i
if x % i = 0 and x / i <= n, increment occurances
print occurances and "\n"
i, j = int
in function cnt taking int n and returning int
ans, res = int with ans = 1
iterate i from 2 while i * i <= n
set res to 0
loop while n is a multiple of i
set n to n / i
increment res
set ans to ans* (res + 1)
return ans
n, x, ans = int with ans = 0
read n then x
iterate i from 1 while i * i <= x and i <= n
if x is not a multiple of i continue
if x / i <= n increment ans by 2
if i * i is x decrement ans
print ans
create long long n, t, cont, set cont to 0
read na dn t
for i=1 to n inclusive
if t mod i =0
if t / i >= 1 and t / i <= n, increment cont
print cont
create long long int n, x, i, cnt, set cnt to 0
read n and x
for i=0 to n inclusive
if x mod i=0 and x <= (i * n), increment cnt
print cnt
declare ints n and k
a is a new array of integers with 105 elements
read from the input to n and k
create integer ans = 0
start for loop from i = 0 to n exclusive incrementing i
read user input to a[i]
if a[i] is equal to 0, break
if k is greater than 0
decrement k
increment ans by one
else if a[i] is equal to a[i - 1]
increment ans by one
else
stop the loop
print ans
create int n and k
read n and k
create int prev, next, cnt, set cnt to 0
read prev
set total_cnt = 0
if prev different from 0
total_cnt = 1
for i=1 to n exclusive
read next
if next=0, break
if prev different from next
if total_cnt + 1 > k, break
increment total_cnt
set prev to nect
print total_cnt
create ints n, k, f, a, count and temp where count = 0 and f = 1
read input to n and k
in a for loop, change i from 0 to n exclusive incrementing i
read from the input to a
if f > k and temp != a
break the loop
else if a is greater than 0
increment count by one
assign the new value = a to temp
increment f by one
print count
i, n, m, x = int
read n then m
a = int array of size n
for i = 1 to n inclusive read a[i]
set x to 0
for i = 1 to n inclusive
if (a[i] >= a[m]) and (a[i] > 0) increment x
print x
let n, k be integers and 50th element of integer array a is 0
read n and k
for i = 0 to n exclusive, read a[i]
if a[k - 1] is not equal to 0
while a[k - 1] is equal to a[k] , increment k by 1
print k and newline
else do the following
if k is equal to 1
print 0 and newline
else do the following
k is decremented by 1
while a[k - 1] is equal to 0, decrement k by 1
print k and newline
n, k, a, b = long long integers
Read n and k
for i = 0 to n exclusive
Read a
if a is 0
print i and a new line
for i = k to n exclusive
Read b
if b is not a
print i and a new line
print n and a new line
ara = integer array of size 10000
n, k = integers
read n, k
cnt = integer with cnt = 0
for i = 0 to n exclusive, read ara[i]
for i = 0 to n exclusive
if (ara[i] >= ara[k - 1] and ara[i] > 0), increment cnt
print cnt
x = integer array of size 1000001
k, n, points = integers with points = 0
read n, k
for i = 0 to n exclusive, read x[i]
for i = 0 to n exclusive
if (x[i] >= x[k - 1] and x[i] is not 0) increment points
print points
n, k = int
read n then k
a = int array of size n
noop
i, 1 = int
for i = 0 to n
rad a[i]
if k is i + 1 set t1 to a[i]
sort a using greater of type int
c = int with c = 0
for i = 0 to n
if a[i] is not 0 and a[i] >= t1 increment c
if a[0] is 0
print "0"
else
print c
declare integers n, k, i, c = 0, integer array A size 110
read n and k
for i= 1 to n inclusive, read A[i]
for i = 1 to n inclusive
if A[i] is greater than or equal to A[k]] and A[i] is greater than 0, increment c
print c and newline
create int n, k, i, a[100], cnt. set cnt to 0
read n and k
for i=1 to n inclusive, read a[i]
for i=1 to n inclusive
if a[i] >= a[k] and a[i] > 0, increment cnt
print cnt
create integers n, k and ans with ans = 0; create an array of integers a with size 1000 filled with 0
read n and k
read n elements into a
change i in a loop from 0 to n exclusive
increment ans if a[i] >= a[k - 1] and a[i] > 0
print ans to the standard output
declare integer array a size 101, integers n, c, s = 0
read n and c
for i = 0 to n exclusive, read a[i]
for i = 0 to n exclusive
if a[i] is greater than 0 and a[i] is greater than or equal to a[c-1], increment s by i
print s and newline
n, k = int
read n and k
let a pointer be a new int array of length n
output = 0 = int
for i = 0 to n exclusive
read a at i
if i <= k-1 and a[i] is positive
increment output
else if i > k-1 and a[i] is positive and a[i] = a[k-1]
increment output
else
exit loop
print output
create new int variables n, k and sum with sum = 0 and a new int pointer *arr
read input to n and k
set arr to point to the new integer array with n elements
read n elements into arr
in a for loop, change i from 0 to n exclusive
if arr[k - 1] = 0
if arr[i] is greater than arr[k - 1], add 1 to sum
else
if arr[i] >= arr[k - 1], change sum to sum + 1
print sum
create ints x and y and int array ar of size 100
make integer c = 0
read x and y
for i = 0 to x exclusive
read ar[i]
if ar[i] is greater than or equal to ar[y - 1] and ar[i] is greater than 0
print c
create long long n, k
read n and k
if k mod n=0
print k/n
else
print k/n + 1
n,k=long long
while read n,k
ans=k/n
if k is not multiple of n increment ans
print ans
create new long longs n and m
read user input to n and m
if m % n != 0
print m / n + 1 to the output
else
print m / n
create long long n, k, h
read n and k
if k mod n=0
print k/n
else
print k/n + 1
n, m = long long int
read n then m
if m <= n
print "1"
else
if m is a multiple of n
print m / n
else
print m / n + 1
n,k,h=long long int
read n,k
if k<=n
h=1
else
if k is not multiple of n
h=k/n+1
else
h=k/n
print h
n, k = long long
read n then k
counts = long long with counts = 0
if k is not a multiple of n increment counts
increment counts by k / n
print counts
MAXN = const int = 1e4 + 20
const int = INF = 1e9 + 100
MOD = const int = 1e9
n, k = long long
while read n and k, print (k + n - 1) / n
n, k, h =integers
Read n and k
set h to k / n
if h is not equal to 0
if k modulo n is equal to 0
print h and a new line
else do the following
print h + 1 and a new line
else do the following
print 1 and a new line
create new long longs n and k
loop, reading n and k from the input
if k % n = 0
print k / n
else
print k / n + 1
n, k =integers
while reading values n, k
if k modulo n is 0
print k / n and a new line
else do the following
print k / n + 1 and a new line
n, k, h =integers
while reading values n, k, h
if n is 0 OR k is 0, then Terminate the loop
set h to k / n
if k modulo n is 0
print h and a new line
else do the following
print h + 1 and a new line
let n, k be long integers
read n , k
if n >= k
print 1 and newline
else if k modulo n equals 0
print k / n and newline
else do the following
print k / n + 1 and newline
n, k = long long
read n then k
if n >= k
print 1
else
if k is a multiple of n
print k / n
else
print k / n + 1
define new long longs n and s
read n and s from the user input
print (s / n) + (1 if s modulo n != 0, or 0 otherwise)
a=int
n,k=long long
read n,k
if k <= n
print 1
else
if k is multiple of n
print k/n
else
print k/n+1
create long long n, k
while read n and k
if k<= n
print 1
else if k mod n =0
print k/n
else if k mod n different from 0
print k/n +1
n,l=long long
function c1 (get long long n and k, return long long)
if n is multiple of k return n/k
return n/k+1
read n
print cl(k, n)
n, k = integers
while reading values n, k
ans = integer, set to k / n
if k modulo n, then increment ans
print ans and a new line
create new long longs n and m
read n and m from the user input
if n >= m
print 1
else
if m % n = 0
print m / n
else
print m / n + 1
n, k =integers
Read n and k
if k modulo n is 0
print k / n and a new line
else do the following
print k / n + 1 and a new line
n = integer
read n
if ((n modulo 3) is 1), decrement n
if ((n modulo 3) is 2), increment n
n = n / 3
feet = integer with feet = n / 12
inch = integer with inch = n modulo 12
print feet," ",inch
let n be a integer
read n
let ans1 be a integer with ans1 = n / 3
n is equal to n modulo 3
if n >= 2 , increment ans1 by 1
let ans2 be a integer with ans2 = ans1 / 12
ans1 is equal to ans1 modulo 12
print ans2 and space and ans1 and newline
let n an int
read n
let inches an int with value n / 3
if n mod 3 is 2, add 1 to inches
print inches / 12, followed by a space, followed by inches mod 12
let n be a integer
read n
let k be a integer with k = (n + 1) / 3
print k / 12 and space and k modulo 12 and newline
create new integer called n
read standard input to n
define new integer variable a = n / 36
define new integer b with value (n - 36 * a) / 3
c is a new integer variable with value n - 36 * a - b * 3
if c = 2, increase b by 1
if b = 12
add 1 to a
assign 0 to b
print a, " " and b
n is a new integer
read user input to n
print (n + 1) / 36 and " "
change the value of n to n modulo 36
if (n + 1) / 36 <= n / 36
print (n + 1) / 3
else
print 0 to the standard output
n = integer
read n
if ((n + 1) modulo 36 is 0), increment n
ft = integer with ft = n / 36
n = n modulo 36
in = integer
if (n modulo 3 is 0 or (n - 1) modulo 3 is 0)
in = n / 3
else
in = n / 3 + 1
print ft,' ',in
create integer n
read standard input to n
define new integer inches with value n / 3 + (n modulo 3 > 1)
print inches / 12, " ", inches modulo 12 and "\n"
n =integer
Read n
c = integer, set to n / 3
if n modulo 3 is 2, then set c to c + 1
print c / 12, c modulo 12 and a new line
n, foot, inch, x =integers
Read n
set foot to n / 36
set x to n modulo 36
if x is equal to 35
increment foot
set inch to 0
print foot , inch and a new line
else do the following
set inch to x / 3
if x modulo 3 is 2, then increment inch
print foot , inch and a new line
n = integer
read n
k = integer with k = (n + 1) / 3
print k / 12,' ',k modulo 12
m=long long
n=double
read n
m=round(n/3)
print m/12, space, m modulo 12
n = long long
read n
ft, cm = long long with ft = (n / 36) and cm =n - (36 * ft)
in = long long with in = cm / 3
if cm mod 3 is 2 increment in
if in is 12 increment ft then set in to 0
print ft and in
new integer variable n
read n and keep looping
new integer variable inches with value (n+1) /3
define new integer foot = inches / 12
print foot and " "
if inches - foot * 12 <= 0
print "0"
else
print inches - foot * 12
n, x, y = integers
read n
set x to n / 36
set n to n - x*36
if n mod 3 equals 2
set y to n / 3 + 1
else
set y to n / 3
if y equals 12
print x+1 space 0
else
print x space y
create integer n
read n
make int inch = 0
create integer feet = n / 36
subtract (n / 36) * 36 from n
if n is 35
increment feet
else do
set inch to n / 3
set n to n - (n / 3) * 3
if n is equal to 2, increment inch
show feet, " ", and inch
define new integer constant INF with value 0x3f3f3f3f
declare long long variables i, j and k
create new long longs n and m
read input to n
assign n modulo 3 to k
divide n by 3
if k is equal to 2, increment n
print n / 12, ' ' and n modulo 12 to the output
declare new integer variable n
read n from the user input
create new integer m = n / 36
define integer q with value (n % 36) / 3
mo is a new integer with value n modulo 36 modulo 3
if mo is equal to 2, add 1 to q
assign 0 to q and increment m by one, if q = 12
print m, " " and q
create long longs n, inches and feets
read variable n from the input
set inches to n / 3
if n modulo 3 is 2, add 1 to inches
change feets to inches / 12
subtract feets * 12 from inches
print feets, " " and inches
define ints n, ft, inch and r
read variable n from the input
assign the new value = n / 36 to ft
set inch to (n modulo 36) / 3
change the value of r to (n % 36) % 3
increment inch if r is greater than 1
if inch is 12
add one to ft
set inch to 0
print ft, " " and inch to the standard output
let m be a map from integers to integers
create ints t, x, c and y with c and y = 1
read t
create boolean variable hard with value false
start for loop from i = 0 to t exclusive incrementing i
read variable x from the input
if m[x] >= c
increment m[x] by one
if m[x] is greater than y, assign the new value = m[x] to y
else
change the value of m[x] to c
if m[x] is greater than y, set y to m[x]
print t - y
n =integer
Read n
j, d, t = integers with all set to 0
for i = 0 to n exclusive
Read temp
if temp is equal to 1
increment j
else if temp is equal to 2
increment d
else do the following
increment t
set maximum value of (maximum value of (j and t) and maximum value of(j and d))
print n - temp and a new line
v is a new array of integers with 5 elements
create new integer variable n
read variable n from the input
incrementi i in a for loop, changing it from 1 to n inclusive
create new integer called x
read from the input to x
increment v[x] by one
maxi is a new integer variable = max of v[1] and max(v[2], v[3])
print n - maxi
let n be a integer
read n
a = array of integers of length 1000005
let n1, n2, n3 be integers
for i = 0 to n exclusive
read a[i]
if a[i] is equal to 1
increment n1 by 1
else if a[i] is equal to 2
increment n2 by 1
else do the following
increment n3 by 1
if (n1 >= n2) and (n1 >= n3)
print n - n1 and newline
else if (n2 >= n1) and (n2 >= n3)
print n - n2 and newline
else do the following
print n - n3 and newline
set num[4] = {0}
create int n
read n
for i=1 to n inclusive
create int tmp
read tmp
increment num[tmp]
if num[1] >= num[2] and num[1] >= num[3]
print num[2] + num[3]
else if num[2] >= num[1] and num[2] >= num[3]
print num[1] + num[3]
else
print num[1] + num[2]
freq=array of 3 int
a,b,mx=int
read a
for i=0 to a exclusive
read b
increment freq[b-1]
mx=max of freq items
print a-mx
let n be an integer
read n
let a, b, c be integers with value of 0
for int i = 0 to n
let x be an integer
read x
if x equals 1, add one to a
if x equals 2, add one to b
if x equals 3, add one to c
if a is greater or equal to b and a is greater or equal to c
print b + c
else if b is greater or equal to a and b is greater or equal to c
print a + c
else if c is greater or equal to a and c is greater or equal to b
print a + b
let n be integer
read n
let freq be integer array of length 3 and initiate it to blank
for i = 0 to n exclusive
let x be integer
read x
call freq with x-1 and increment
let m be integer and assign max(freq[0], max(freq[1], freq[2])) to m
print n - m
create int n, i, j, k, x
crate vector int ct
read n
for i=0 to n exclusive
read x
increment ct[x]
print n - max of ct[1] and max(ct[2], ct[3]), and a newline
;
a = array of 11 integers
n, i, x = integers
Read n
for i = 1 to n exclusive
Read x
increment a[x]
max = integer, set to -1
for i = 1 to 3 exclusive
if a[i] is greater than max, set max to a[i]
print n - max and a new line
create int n
read n
set a, b and c = 0
for i=0 to n exclusive
create int x
read x
if x=1, increment a
if x =2, increment b
if x=3, add 1 to c
if a >= b and a >= c
print b+c
else if b >= a and b >= c
print a+c
else if c >= a and c >= b
print a+b
a = integer array of size 1000005
in the function max that takes integer a, b and returns integer
return if a > b, a else b
n = integer
read n
x, y, z = integers x = 0, y = 0, z = 0
for i = 0 to n exclusive
read a[i]
if (a[i] is 1), increment x
if (a[i] is 2), increment y
if (a[i] is 3), increment z
print x + y + z - max(max(x, y), z)
num = int array of length 4
n = int
read n
for i = 0 to n exclusive
a = int
read a
increment num at a
max_num = -1 = int
for i = 1 to 3 inclusive
if num[i] > max_num then set max_num to num at i
print n - max_num
create int A[4]
create int n and inp
read n
while read inp, pre increment A[inp]
print n - max(A[1], max(A[2], A[3]))
create long long n and a
read n
if n is even
a= n/2
else
set ((n + 1) / 2) * (-1)
print a
let n be a long integer
read n
if n modulo 2 is equal to 0
print n / 2 and newline
else do the following
print (-n - 1) / 2 and newline
in function MIN taking long long int a, long long int b and returning long long int
if a > b
return b
else
return a
in function MAX taking long long int a, long long int b and returning long long int
if a > b
return a
else
return b
in function MOD taking long long int x and returning long long int
if x >= 0
return x
else
return -x
n = long long int
read n
if n is even
print n / 2
else
d = long long int with d = n / 2
decrement d by n
print d
n, a = long long
read n
set a to n / 2
if n is even
print a
else
print a - n
declare long longs a, b = 0
read a
declare integer i
if a % 2 is not 0
let i be -1
else
let i be 0
let b be a / 2 * ( -1 raised to power of a % 2 ) + i
print b and newline
create long long n
read n
if n is even
print n/2
else
print -(n + 1) / 2
create long long int n
read n
if n is even
print n/2
else
print -, (n + 1) / 2
declare long longs n, a
read n
if n % 2 is 0
let a be n / 2
else
let a be ((n + 1) / 2) * (-1)
print a and newline
create long long int n
read n
if n is even
print n/2
else if n=1
print -1 and a newline
create long long int div
div = n/2
set n = (n * (-1)) + div
print n
n = 0
read n
if n is even
print n/2
else
print -((n + 1) / 2)
n = long long int
read n
if ((n modulo 2) is 0)
print n / 2
else
print (n / 2) - n
declare f with long long as argument, returning long long
declare long long n
read n
run f(n)
declare f with long long n as argument, returning long long
if n % 2 is 0
print ( n / 2 ) and newline
else
print ( n / 2 - n ) and newline
declare integer array dx = {1, 0, -1, 0, 1, 1, -1, -1}
declare integer array dy = {0, 1, 0, -1, 1, -1, 1, -1}
declare fast with no arguments, returning void
declare constant long long md = 1e9 + 7
run fast
declare long long n
read n
if n % 2 is 0
print n / 2 and "\n"
else
print -(n+1)/2 and "\n"
declare long long variable n
read n from the input
if n is even
print n / 2
else
print - (n + 1) / 2 to the output
create long long variable n
read user input to n
define long long chk = 0
assign n / 2 to chk
if chk * 2 is equal to n
print chk to the standard output
else
print chk - n to the standard output
print new line
n = long long ing
read n
if n is even
print n / 2
else
ans = long long int with value of (n - 1) / 2
print -1 - ans
n, y = long long
x = double
read n
if n % 2 = 0 && n != 0m print n / 2
if n % 2 != 0 && n != 0
let x = ceil(1. * n / 2)
let y = x
print -y
declare long long n
read n
declare long long k1 = ((2 + (n - 1 if n % 2 is 1, else n)) / 2) * (n / 2)
declare long long k2 = ((1 + (n if n % 2 is 1, else n - 1)) / 2) * ((n + 1) / 2)
print k1 - k2 and '\n'
num = char
n = int, n = 0
while num is not a new line
let num = getchar
if n = 0 and num = 9
print num
else if num >= 5
print 9
else
print num
add one to n
function check with int arguments x and y that returns int
if x <= y, return x
return y
define strings s and p with p = ""
declare int variables i and j
read variable s from the input
assign the new value = s to p
for i = length of s - 1 to 0 counting down
change j to the result of check(s[i] - '0', 9 - (s[i] - '0'))
assign the new value = (j + '0') casted to char, to p[i]
change j to 9 - (s[0] - '0')
if j is not 0
assign the returned value of check(s[0] - '0', 9 - (s[0] - '0')) to j
change p[0] to (j + '0') casted to char
print p
declare string s
new integer i
read s and keep looping
change the value of i to 0
if s[0] is equal to '9', increment i by one
while i < length of s, increment it by 1 in a loop
if s[i] is greater than '4', assign the value = '9' - s[i] + '0' to s[i]
print s to the standard output
declare new string s
read variable s from the input
for integer i = 0 to length of s exclusive
if s[i] - '0' >= 5
create integer x with value = 9 - (s[i] - '0')
change s[i] to x + '0'
if s[0] is equal to '0', set s[0] to '9'
print s
define string s
read from the input to s
for i from 0 to length of s exclusive
if i = 0 and s[i] is equal to '9', go to the start of the loop
if s[i] >= '5', change s[i] to '9' - s[i] + '0'
print s
create new string s
read standard input to s
for i = 0 to length of s exclusive
if s[i] = '9'
if i is equal to 0
go to the start of the loop
else
assign the new value = '0' to s[i]
go to the start of the loop
if s[i] - '0' is greater than 4, set s[i] to 48 + 9 - (s[i] - '0')
print s and "\n" to the standard output
s = string
read s
i = unsigned long long int with i = 0
if s[i] is '9'
print s[i]
increment i
continue iterating i while i < length of s print min of s[i] - '0', 9 - (s[i] - '0')
print newline
let numero be a string
read numero
let n be a integer with n is equal to length of numero
for i = 0 to n - 1 inclusive
let x be a integer with x = numero[i] - 0
if i is equal to 0
if 5 <= x and x <= 8 , numero[i] is equal to (char)(0 + 9 - x)
else if 5 <= x
numero[i] is equal to (char)(0 + 9 - x)
print numero and newline
declare integer array a size 100010
declare long long array cnt size 100010
declare character array c size 155
declare integer array num size 155
read c
declare integer len = string length of c
for i = 0 to len exclusive
if c[i] is greater than or equal to '5' and c[i] is less than or equal to '9'
if c[i] is '9' and i is 0
let num[i] be c[i] - '0'
else
let num[i] be 9 - ( c[i] - '0' )
else
let num[i] be c[i] - '0'
for i = 0 to len exclusive, print num[i]
print newline
declare character array x size 20
declare integer ok = 1
while read x is true
declare integer len = string length of x
for i = 0 to len exclusive
if i is 0
if x[i] is '9'
print x[i]
else if x[i] is greater than or equal to '5'
print '9' - x[i]
else
print x[i]
else
if x[i] is greater than or equal to '5'
print '9' - x[i]
else
print x[i]
print newline
create string str
read str
for i=0 to size of str exclusive
if i = 0 and str[i] = 9, continue
if str[i] > 4, set str[i] = 9 - str[i] + 48
print str
create string s
read s
for i=0 to length of s exclusive
if s[i] > 9 - s[i] + 0, s[i] = 9 - s[i] + 0
if s[0] = 0, s[0] = 9
print s
define new string a
read user input to a
for i = 0 to length of a exclusive
if a[i] >= '5', change the value of a[i] to 9 - (a[i] - '0') + '0'
if a[0] is equal to '0'
print 9
else
print a[0]
print all elements of a, starting from the index 1, to the output
print new line
create strings s and output
read from the input to s
start for loop from i = 0 to length of s exclusive
declare new integer temp with value s[i] - 48
create new character called tempChar = '\0'
if (i = 0 and temp = 9) or temp < 5
add new element = s[i] after the last element of output
else
assign (9 - temp) + 48 to tempChar
push tempChar to the variable output
print output to the stdout
arr = 4 * 1e5
md = 1e9 + 7
create int pref[2600][2600]
create n and m
call solve(int u)
res=0
for i=0 to n exclusive
for j=0 to m exclusive
l1 = i
set l2 = j
assign min(n, i + u) to r1
set r2 to min(m, j + u)
set now = pref[r1][r2] - pref[r1][l2] - pref[l1][r2] + pref[l1][l2];
set res to res + min of now and u*u-now
return res
read n and m
for i=1 to n inclusive
create string st
read st
for j=0 to size of st, pref[i][j + 1] = st[j] - 0
for i=1 to n inclusive
for j=1 to m inclusive, set pref[i][j] = pref[i - 1][j] + pref[i][j - 1] - pref[i - 1][j - 1] + pref[i][j]
assign 1e9 to ans
for k=2 to max of n and m inclusive, set ans to min of ans and solve(k)
print ans and a newline
declare integer array at size 5001 by 5001
declare integer array psum size 5001 by 5001
declare sum with integers fi, li, fj, lj as arguments, returning integer
declare integer big = psum[li][lj]
declare integer smol = psum[fi - 1][fj - 1] if fi and fj, else 0
declare integer lat1 = psum[li][fj - 1] if fj is true, else 0
declare integer lat2 = psum[fi - 1][lj] if fi is true, else 0
return big + smol - lat1 - lat2 from function
declare integers n, m
read n and m
for i = 0 to 5001 exclusive
for j = 0 to 5001 exclusive, let mat[i][j] be 0
for i = 0 to n exclusive
declare string s
read s
for j = 0 to m exclusive, let max[i][j] be s[j] - '0'
let psum[0][0] be mat[0][0]
for i = 1 to 5001 exclusive, let psum[0][i] be psum[0][i - 1] + mat[0][i]
for i = 1 to 5001 exclusive, let psum[i][0] be psum[i - 1][0] + mat[i][0]
for i = 1 to 5001 exclusive
for j = 1 to 5001 exclusive, let psum[i][j] be psum[i][j - 1] + psum[i - 1][j] - psum[i - 1][j - 1] + mat[i][j]
declare integer ans = 1e9
for k = 2 to 2500 inclusive
end statement
declare integer pans = 0
for i = 0 to (n + k - 1) / k exclusive
for j = t0 to (m + k - 1) / k excclusive
declare integer c1 = result of run sum with i * k, (i + 1) * k - 1, j * k, (j + 1) * k - 1 as arguments
declare integer c0 = k * k - c1
end statement
end statement
end statement
end statement
increment pans by minimum of c0 and c1
end statement
let ans be minimum of ans and pans
print ans and '\n'
create int array dp of size 2505 with array of size 2505
make ints n and m
declare cntt taking in int k and returning integer
create integers k - 1 and res = 0
for i = 1 to n
for j = 1 to m
create integer cnt = 0
set cnt to cnt + dp[min(i + k1, n)][min(j + k1, m)]
set cnt to cnt - dp[i - 1][min(j + k1, m)]
subtract dp[min(i + k1, n)][j - 1] from cnt
add dp[i - 1][j - 1] to cnt
add min(cnt, k * k - cnt) to res
return res
read n and m
create string s
for i = 1 to n
read s
for j = 1 to m, set dp[i][j] to dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + s[j - 1] - '0'
create integer res = n * m
for k = 2 to min(n, m), set res to min of res and cntt(k)
show res
create int array mat of size 5001 with array of size 5001
make integer array psum of size 5001 with array of size 5001
declare sum taking in ints fi, li, fj, and lj and returning integer
make integer big = psum[li][lj]
create integer smol =
make integer lat1 = (fj ? psum[li][fj - 1] : 0)
let int lat2 = (fi ? psum[fi - 1][lj] : 0)
return big + smol - lat1 - lat2
create ints n and m
read n and m
for i = 0 to 5001 exclusive
for j = 0 to 5001 exclusive, set mat[i][j] to 1
for i = 0 to n exclusive
make string s
read s
for j = 0 to m exclusive, set m[i][j] to s[j] - '0'
set psum[0][0] to mat[0][0]
for i = 1 to 5001 exclusive, set psum[0][i] to psum[0][i - 1] + mat[0][i]
for i = 1 to 5001 exclusive, set psum[i][0] to psum[i - 1][0] + mat[i][0]
for i = 1 to 5001 exclusive
for j = 1 to 5001 exclusive, set psum[i][j] to psum[i][j - 1] + psum[i - 1][j] - psum[i - 1][j - 1] + mat[i][j]
make integer ans = 1e9
for k = 2 to 10
end statement
make integer pans = 0
for i = 0 to (n + k - 1) / k exclusive
for j = 0 to (m + k - 1) / k exclusive
create int c1 = sum(i * k, (i + 1) * k - 1, j * k, (j + 1) * k - 1)
create integer c0 to k * k - c1
end
end
end
end statement
set pans to pans + min of c0 and c1
end statement
set ans to min of ans and pans
print ans
db = string of size 2501
n, m, ans, prf = integers with ans = 6250000, prf = array of size [2 * 2501][2 * 2501]
read n, m
for i = 0 to n exclusive, read db[i]
for i = 0 to 2 * 2501 exclusive
for j = 0 to 2 * 2501 exclusive
if (i < n and j < m and db[i][j] is 1), prf[i][j] = 1
if (i), prf[i][j] = prf[i][j] + prf[i - 1][j]
if (j), prf[i][j] = prf[i][j] + prf[i][j - 1]
if (i and j), prf[i][j] = prf[i][j] - prf[i - 1][j - 1]
maxk = integer with maxk = min of n and m
for k = 2 to maxk
tmp_ans = integer with tmp_ans = 0
for i = 0 to n exclusvie, i = i + k
for j = 0 to m exclusive, j = j + k
solve = integer with solve = prf[i + k - 1][j + k - 1]
if (i), solve = solve - prf[i - 1][j + k - 1]
if (j), solve = solve - prf[i + k - 1][j - 1]
if (i and j), solve = solve + prf[i - 1][j - 1]
tmp_ans = tmp_ans + min(solve, k * k - solve)
ans = min of ans and tmp_ans
print ans
MAXN, MAXM = const int with MAXN = 2500 and MAXM = 2500
S = two dimensional int array of sizes MAXN + 1 and MAXM + 1
N, M = int
read N then M
for i = 1 to N inclusive
R = string
read R
for j = 1 to M inclusive set S[i][j] to (R[j - 1] - '0') + S[i - 1][j] + S[i][j - 1] - S[i - 1][j - 1]
ans = int with ans = INT_MAX
iterate k from 2 while k <= N or k <= M
aux = int with aux = 0
for i = 1 to N inclusive incrementing i by k
for j = 1 to M inclusive incrementing j by k
ii, jj = int with ii = min of N, i + k - 1 and jj = min of M, j + k - 1
q = int with q = S[ii][jj] - S[ii][j - 1] - S[i - 1][jj] + S[i - 1][j - 1]
increment aux by min of q, k * k - q
set ans to min of ans, aux
print ans
let n be a integer
read n
if n equals 2
print 2 and newline
else do the following
print 1 and newline
n=int
while read n
if n is 2
print 2
else
print 1
n = int
read n
if n is 2
print "2"
else
print "1"
n = int
read n
if n = 2
print n
else
print 1
integer as l,r,a,b,d,i,n
read n
output 2 if n =2, else output 1
declare integer n
read n
if n is 2
print 2 and newline
else
print 1 and newline
declare integer n
read n
if n is 2
print 2 and newline
else
print 1 and newline
declare integer v
read v
if v is 2
print 2 and newline
else
print 1 and newline
n = int
read n
if n is not 2
print "1"
else
print "2"
let n, x, v be long integers
read v
n is equal to v
if n is greater than 2
n is equal to 1
else if n is equal to 2
n is equal to 2
print n and newline
integer as n
read n
if n is 1 or n is 2 then do the following
output n
else
output 1
let n be a integer
read n
if n equals 2
print 2 and newline
else do the following
print 1 and newline
let n be a long integer
while read n
if n equals 2
print 2 and newline
else do the following
print 1 and newline
n=int
read n
if n is 2
print 2
else
print 1
n = integer
read n
if (n is 2)
read n
else
print 1
n = int
read n
k = int, k = n - 1
if n = 2
print 2
else
print n - k
integer as n
read n
if n is 2 then do the following
output 2
else
output 1
let N be a constant integer with N is equal to 1e5 + 50
let oo be a constant integer with oo is equal to1e9
let mod be a constant integer with mod is equal to 1e9 + 7
let a, b,f1,f2 be string arrays of size 2001
let n be a integer
read n, m
for integer i = 0 to n exclusive, read a[i]
for integer i = 0 to m exclusive, read b[i]
for integer i = 0 to n-m inclusive,
f1[i] is empty
for integer j = 0 to m exclusive, increase f1[i] with a[i + j]
for integer i = 0 to n-m inclusive,
f2[i] is empty
for integer j = 0 to m exclusive, increase f2[i] withb[j].substr(i, m)
for integer i = 0 to n-m inclusive,
for integer j = 0 to n-m inclusive,
if f1[i] equals f2[j]
print i + 1 space j + 1 and endline
declare constant integer maxn = 2000 + 5
declare string arrays s1 size maxn, s2 size maxn
declare integers n, m
read n, m
for i = 0 to n exclusive, read s1[i]
for i = 0 to m exclusive, read s2[i]
for i = 0 to n - m inclusive
for j = 0 to n - m inclusive
declare boolean flag = true
for p = 0 to p is less than m and flag, incrementing p
if memory compare between address of s1[i + p][0] and address of s2[p][j] comparing m bytes, let flag be false
if flag is true
print i + 1, " ", j + 1, "\n"
n, m = int
read n, m
A, B = string vectors with size of A = n and size of B = m
read all A
read all B
for i = 0 to n exclusive
pos = -1 = int
while pos+1 < n
ok = 1 = bool
set pos to find A[i], pos + 1 on B[0]
if pos = -1 then break
for k = m - 1, until k <= 0 and is ok, decrement k
if A[i+k] isn't substring from pos to m of b then set ok to 0
if ok then return print i+1 and space and pos + 1 and new line
print -1
let mp[2][2001][2001] be a array of character elements
let n , m be integers
read n , m
for i = 0 to n exclusive , read mp[0][i]
for i = 0 to m exclusive , read mp[1][i]
for i = 0 to n - m inclusive
for j = 0 to n - m inclusive
the integer value of ok = 1
for integer p = 0, p is less than m and ok equals 1, increment p by 1 , ok &= !memcmp(&mp[0][i + p][0], &mp[1][p][j], m)
if ok is true
print i + 1 and ' ' and j + 1 and newline
declare constant integer N = 1e5 + 50
declare constant integer oo = 1e9
declare constant integer mod = 1e9 + 7
declare string arrays a size 2001, b size 201, f1 size 2001, f2 size 2001
declare integers n, m
read n, m
for i = 0 to n exclusive, read a[i]
for i = 0 to m exclusive, read b[i]
for i = 0 to i + m is less than or equal to n, incrementing i
let f1[i] be ""
for j = 0 to m exclusive, increment f1[i] by a[i+j]
for i = 0 to i + m is less than or equal to n, incrementing i
let f2[i] be ""
for j = 0 to m exclusive, increment f2[i] by substring of b[j] from i to m
for i = 0 to i + m is less than or equal to n, incrementing i
for j = 0 to j + m is less than or equal to n, incrementing j
if f1[i] is f2[j]
print i + 1, ' ', j + 1, newline
declare character array mp size 2 by 2001 by 2001
declare integers n, m
read n, m
for i = 0 to n exclusive, read mp[0][i]
for i = 0 to m exclusive, read mp[1][i]
declare integers i, j
for i = 0 to n - m inclusive
for j = 0 to n - m inclusive
declare boolean ok = true
for p = 0 to p is less than m and ok, incrementing p, let ok be ok bitwise and not ( memory compare ( address of mp[0][i + p][0] and address of mp[1][p][j] comparing m bytes ) )
if ok is true
print i + 1, ' ', j + 1, newline
n, m = int
read n, m
let v1(2002), v2(202), v3(2002), v4(2002) be vector of string
for i = 0 to n exlcusive, read v[i]
read the first m elements of v2
for i = 0 until i+m <=n increment i after
for j = 0 to m exlcusive, increment v3 at i by v1[i+j]
for i = 0 until i+m <= n increment i after
for j = 0 to m exclusive, increment v4[j] by substring of v2[j] form i to m
for i = 0 until i+m <= n
for j = 0 until j + m <= n
if v3 at i is v4 at j
print i + 1 << ' ' << j + 1 <<
t = int
read t
loop t times
n, r = int
read n then r
x = int then for i = 1 to n read x then decrement r by x
print (r mod n + n) mod n + 1
t, n, r, k = integer
q = integer array of size 5
read t
for i = 0 to t exclusive
k = 0
read n, r
for j = 0 to n - 1 exclusive
read q[j]
k = k + q[j]
print the result of ((r - k) modulo n + n) modulo n + 1
test = integer
read test
while looping decrease test by 1
n, r = integers
read n, r
sum = integer = r
for i = 0 to n - 1 exclusive
val = integer
read val
sum = sum - val
sum = (sum modulo n + n) modulo n
print the result of sum + 1
create int n
read n
while decrement n
create unsigned int a, b and sum, set sum to 0
read a and b
for i=1 to a exclusive
create int c
read c
set sum to sum + c
assign sum mod a to sum
sum = (a + b - sum) % a
print sum +1
create int nums[5], r, n, T
read T
while decrement T
read n and r
set sum to 0
for c=1 to n exclusive
create int i
read i
set sum to sum -i
set sum = sum +r
assign sum + n*1000 to sum
print sum mod n + 1
no, appr, st = long long arrays all with length 300001
app = long long vector with length 300001
i, j, n, m, k, cnt, ans, t = long long with cnt and ans having value of 0 and t having value of 1
read n and t
v = long long vector
pos = long long with value of 0
while t is not zero subtract 1 from t and do
read m and k
if m equals 1
set no[cnt] to k
append cnt to the end of app[k]
set st[cnt] to 0
append cnt to the end of v
add 1 to cnt
add 1 to ans
else if m equals 2
for i = appr[k] to the size of app[k] exclusive
if st[app[k][i]] equals 0 subtract 1 from ans
set st[app[k][i]] to 1
set appr[k] to the size of app[k]
else
for i = pos to k exclusive
if st[v[i]] equals 0 subtract 1 from ans
set st[v[i]] to 1
set pos to the maximum of pos and k
print ans
MAXN = 3 * 1e5 + 5
create int N, M, S, x, y, j, z, r
create vector int V[MAXN]
create int v[MAXN]
create bool R[MAXN]
read N and M
while decrement M
read x and y
if x = 1
assign j to last element of V[y]
increment j
increment S
if x = 2
set z to size of V[y]
for i=v[y] to z exclusive
if R[V[y][i]] = 0, decrement S
set R[V[y][i]] = true
set v[y] = z
if x = 3
for i=r to y exclusive
if R[i]=0, decrement S
assign true to R[i]
set r to max of r and y
print S
declare integers vector arrays mp and dis with size 100010 * 3
create ints u, v and c
declare long long res
create long long array a with 100010 * 3 elements
create long long arrays dp and dp_max with 100010 * 3 elements
dfs is a void function with int arguments x and y
create long long max1 = 0
create long long max2 = 0
loop i from 0 to length of mp[x] exclusive
declare integer f = mp[x][i]
if f = y, skip the rest of the loop
call function dfs with arguments f and x
if dp[f] - dis[x][i] is greater than max1
set max2 to max1
assign dp[f] - dis[x][i] to max1
else if dp[f] - dis[x][i] = max1
set value of max2 to max1
else
if dp[f] - dis[x][i] is greater than max2, change max2 to dp[f] - dis[x][i]
assign max1 + max2 + a[x] to dp_max[x]
change dp[x] to max1 + a[x]
assign max of max(dp[x], dp_max[x]) and res to res
declare int t
read t
set res to 0
for i = 1 to t inclusive, read a[i]
subtract 1 from t
decrement t and loop further, while t is not 0
read u, v and c
push v into mp[u]
push u into mp[v]
push c into dis[u]
push c into dis[v]
call function dfs with arguments 1 and -1
print res
create long long m and an array of long longs a with size 200000
create array of long long pairs b with size 200000
create long long array cnt with size 200000
read m
for integer i = 0 to m exclusive read a[i]
for i = 0 to m exclusive
read b[i].first
b[i].second = i
sort array a
sort b
reverse b
for i = 0 to m exclusive, set cnt[b[i].second] to a[i]
for i = 0 to m exclusive, print cnt[i] and " \n"[i == m - 1]
